// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package routingpb

import (
	context "context"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyManagerClient is the client API for PolicyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyManagerClient interface {
	// List the Default Routing Policies.
	ListDefaultPolicies(ctx context.Context, in *ListDefaultPoliciesRequest, opts ...grpc.CallOption) (*ListDefaultPoliciesResponse, error)
	// Get the Default Routing Policy.
	GetDefaultPolicy(ctx context.Context, in *GetDefaultPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Set the Default Routing Policy.
	SetDefaultPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List the Routing Policies with Home Networks.
	ListHomeNetworkPolicies(ctx context.Context, in *ListHomeNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListHomeNetworkPoliciesResponse, error)
	// Get the Routing Policy with the Home Network.
	GetHomeNetworkPolicy(ctx context.Context, in *GetHomeNetworkPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Set the Routing Policy with the Home Network.
	SetHomeNetworkPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type policyManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyManagerClient(cc grpc.ClientConnInterface) PolicyManagerClient {
	return &policyManagerClient{cc}
}

func (c *policyManagerClient) ListDefaultPolicies(ctx context.Context, in *ListDefaultPoliciesRequest, opts ...grpc.CallOption) (*ListDefaultPoliciesResponse, error) {
	out := new(ListDefaultPoliciesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListDefaultPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetDefaultPolicy(ctx context.Context, in *GetDefaultPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/GetDefaultPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) SetDefaultPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/SetDefaultPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ListHomeNetworkPolicies(ctx context.Context, in *ListHomeNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListHomeNetworkPoliciesResponse, error) {
	out := new(ListHomeNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListHomeNetworkPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetHomeNetworkPolicy(ctx context.Context, in *GetHomeNetworkPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/GetHomeNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) SetHomeNetworkPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/SetHomeNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyManagerServer is the server API for PolicyManager service.
// All implementations must embed UnimplementedPolicyManagerServer
// for forward compatibility
type PolicyManagerServer interface {
	// List the Default Routing Policies.
	ListDefaultPolicies(context.Context, *ListDefaultPoliciesRequest) (*ListDefaultPoliciesResponse, error)
	// Get the Default Routing Policy.
	GetDefaultPolicy(context.Context, *GetDefaultPolicyRequest) (*GetPolicyResponse, error)
	// Set the Default Routing Policy.
	SetDefaultPolicy(context.Context, *SetPolicyRequest) (*emptypb.Empty, error)
	// List the Routing Policies with Home Networks.
	ListHomeNetworkPolicies(context.Context, *ListHomeNetworkPoliciesRequest) (*ListHomeNetworkPoliciesResponse, error)
	// Get the Routing Policy with the Home Network.
	GetHomeNetworkPolicy(context.Context, *GetHomeNetworkPolicyRequest) (*GetPolicyResponse, error)
	// Set the Routing Policy with the Home Network.
	SetHomeNetworkPolicy(context.Context, *SetPolicyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPolicyManagerServer()
}

// UnimplementedPolicyManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyManagerServer struct {
}

func (UnimplementedPolicyManagerServer) ListDefaultPolicies(context.Context, *ListDefaultPoliciesRequest) (*ListDefaultPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefaultPolicies not implemented")
}
func (UnimplementedPolicyManagerServer) GetDefaultPolicy(context.Context, *GetDefaultPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPolicy not implemented")
}
func (UnimplementedPolicyManagerServer) SetDefaultPolicy(context.Context, *SetPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPolicy not implemented")
}
func (UnimplementedPolicyManagerServer) ListHomeNetworkPolicies(context.Context, *ListHomeNetworkPoliciesRequest) (*ListHomeNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworkPolicies not implemented")
}
func (UnimplementedPolicyManagerServer) GetHomeNetworkPolicy(context.Context, *GetHomeNetworkPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkPolicy not implemented")
}
func (UnimplementedPolicyManagerServer) SetHomeNetworkPolicy(context.Context, *SetPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkPolicy not implemented")
}
func (UnimplementedPolicyManagerServer) mustEmbedUnimplementedPolicyManagerServer() {}

// UnsafePolicyManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyManagerServer will
// result in compilation errors.
type UnsafePolicyManagerServer interface {
	mustEmbedUnimplementedPolicyManagerServer()
}

func RegisterPolicyManagerServer(s grpc.ServiceRegistrar, srv PolicyManagerServer) {
	s.RegisterService(&PolicyManager_ServiceDesc, srv)
}

func _PolicyManager_ListDefaultPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefaultPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListDefaultPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListDefaultPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListDefaultPolicies(ctx, req.(*ListDefaultPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetDefaultPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetDefaultPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/GetDefaultPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetDefaultPolicy(ctx, req.(*GetDefaultPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_SetDefaultPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).SetDefaultPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/SetDefaultPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).SetDefaultPolicy(ctx, req.(*SetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ListHomeNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListHomeNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListHomeNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListHomeNetworkPolicies(ctx, req.(*ListHomeNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetHomeNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetHomeNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/GetHomeNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetHomeNetworkPolicy(ctx, req.(*GetHomeNetworkPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_SetHomeNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).SetHomeNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/SetHomeNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).SetHomeNetworkPolicy(ctx, req.(*SetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PolicyManager_ServiceDesc is the grpc.ServiceDesc for PolicyManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.PolicyManager",
	HandlerType: (*PolicyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDefaultPolicies",
			Handler:    _PolicyManager_ListDefaultPolicies_Handler,
		},
		{
			MethodName: "GetDefaultPolicy",
			Handler:    _PolicyManager_GetDefaultPolicy_Handler,
		},
		{
			MethodName: "SetDefaultPolicy",
			Handler:    _PolicyManager_SetDefaultPolicy_Handler,
		},
		{
			MethodName: "ListHomeNetworkPolicies",
			Handler:    _PolicyManager_ListHomeNetworkPolicies_Handler,
		},
		{
			MethodName: "GetHomeNetworkPolicy",
			Handler:    _PolicyManager_GetHomeNetworkPolicy_Handler,
		},
		{
			MethodName: "SetHomeNetworkPolicy",
			Handler:    _PolicyManager_SetHomeNetworkPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// ForwarderDataClient is the client API for ForwarderData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwarderDataClient interface {
	// Publish an uplink message.
	Publish(ctx context.Context, in *PublishUplinkMessageRequest, opts ...grpc.CallOption) (*PublishUplinkMessageResponse, error)
	// Subscribe to routed downlink messages.
	Subscribe(ctx context.Context, in *SubscribeForwarderRequest, opts ...grpc.CallOption) (ForwarderData_SubscribeClient, error)
}

type forwarderDataClient struct {
	cc grpc.ClientConnInterface
}

func NewForwarderDataClient(cc grpc.ClientConnInterface) ForwarderDataClient {
	return &forwarderDataClient{cc}
}

func (c *forwarderDataClient) Publish(ctx context.Context, in *PublishUplinkMessageRequest, opts ...grpc.CallOption) (*PublishUplinkMessageResponse, error) {
	out := new(PublishUplinkMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.ForwarderData/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwarderDataClient) Subscribe(ctx context.Context, in *SubscribeForwarderRequest, opts ...grpc.CallOption) (ForwarderData_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ForwarderData_ServiceDesc.Streams[0], "/org.packetbroker.routing.v1.ForwarderData/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwarderDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ForwarderData_SubscribeClient interface {
	Recv() (*v3.RoutedDownlinkMessage, error)
	grpc.ClientStream
}

type forwarderDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *forwarderDataSubscribeClient) Recv() (*v3.RoutedDownlinkMessage, error) {
	m := new(v3.RoutedDownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForwarderDataServer is the server API for ForwarderData service.
// All implementations must embed UnimplementedForwarderDataServer
// for forward compatibility
type ForwarderDataServer interface {
	// Publish an uplink message.
	Publish(context.Context, *PublishUplinkMessageRequest) (*PublishUplinkMessageResponse, error)
	// Subscribe to routed downlink messages.
	Subscribe(*SubscribeForwarderRequest, ForwarderData_SubscribeServer) error
	mustEmbedUnimplementedForwarderDataServer()
}

// UnimplementedForwarderDataServer must be embedded to have forward compatible implementations.
type UnimplementedForwarderDataServer struct {
}

func (UnimplementedForwarderDataServer) Publish(context.Context, *PublishUplinkMessageRequest) (*PublishUplinkMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedForwarderDataServer) Subscribe(*SubscribeForwarderRequest, ForwarderData_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedForwarderDataServer) mustEmbedUnimplementedForwarderDataServer() {}

// UnsafeForwarderDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwarderDataServer will
// result in compilation errors.
type UnsafeForwarderDataServer interface {
	mustEmbedUnimplementedForwarderDataServer()
}

func RegisterForwarderDataServer(s grpc.ServiceRegistrar, srv ForwarderDataServer) {
	s.RegisterService(&ForwarderData_ServiceDesc, srv)
}

func _ForwarderData_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishUplinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderDataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.ForwarderData/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderDataServer).Publish(ctx, req.(*PublishUplinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForwarderData_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeForwarderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForwarderDataServer).Subscribe(m, &forwarderDataSubscribeServer{stream})
}

type ForwarderData_SubscribeServer interface {
	Send(*v3.RoutedDownlinkMessage) error
	grpc.ServerStream
}

type forwarderDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *forwarderDataSubscribeServer) Send(m *v3.RoutedDownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

// ForwarderData_ServiceDesc is the grpc.ServiceDesc for ForwarderData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForwarderData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.ForwarderData",
	HandlerType: (*ForwarderDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ForwarderData_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ForwarderData_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// HomeNetworkDataClient is the client API for HomeNetworkData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeNetworkDataClient interface {
	// Publish a downlink message.
	Publish(ctx context.Context, in *PublishDownlinkMessageRequest, opts ...grpc.CallOption) (*PublishDownlinkMessageResponse, error)
	// Subscribe to routed uplink messages.
	Subscribe(ctx context.Context, in *SubscribeHomeNetworkRequest, opts ...grpc.CallOption) (HomeNetworkData_SubscribeClient, error)
}

type homeNetworkDataClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeNetworkDataClient(cc grpc.ClientConnInterface) HomeNetworkDataClient {
	return &homeNetworkDataClient{cc}
}

func (c *homeNetworkDataClient) Publish(ctx context.Context, in *PublishDownlinkMessageRequest, opts ...grpc.CallOption) (*PublishDownlinkMessageResponse, error) {
	out := new(PublishDownlinkMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.HomeNetworkData/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkDataClient) Subscribe(ctx context.Context, in *SubscribeHomeNetworkRequest, opts ...grpc.CallOption) (HomeNetworkData_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &HomeNetworkData_ServiceDesc.Streams[0], "/org.packetbroker.routing.v1.HomeNetworkData/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeNetworkDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HomeNetworkData_SubscribeClient interface {
	Recv() (*v3.RoutedUplinkMessage, error)
	grpc.ClientStream
}

type homeNetworkDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *homeNetworkDataSubscribeClient) Recv() (*v3.RoutedUplinkMessage, error) {
	m := new(v3.RoutedUplinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeNetworkDataServer is the server API for HomeNetworkData service.
// All implementations must embed UnimplementedHomeNetworkDataServer
// for forward compatibility
type HomeNetworkDataServer interface {
	// Publish a downlink message.
	Publish(context.Context, *PublishDownlinkMessageRequest) (*PublishDownlinkMessageResponse, error)
	// Subscribe to routed uplink messages.
	Subscribe(*SubscribeHomeNetworkRequest, HomeNetworkData_SubscribeServer) error
	mustEmbedUnimplementedHomeNetworkDataServer()
}

// UnimplementedHomeNetworkDataServer must be embedded to have forward compatible implementations.
type UnimplementedHomeNetworkDataServer struct {
}

func (UnimplementedHomeNetworkDataServer) Publish(context.Context, *PublishDownlinkMessageRequest) (*PublishDownlinkMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedHomeNetworkDataServer) Subscribe(*SubscribeHomeNetworkRequest, HomeNetworkData_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedHomeNetworkDataServer) mustEmbedUnimplementedHomeNetworkDataServer() {}

// UnsafeHomeNetworkDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeNetworkDataServer will
// result in compilation errors.
type UnsafeHomeNetworkDataServer interface {
	mustEmbedUnimplementedHomeNetworkDataServer()
}

func RegisterHomeNetworkDataServer(s grpc.ServiceRegistrar, srv HomeNetworkDataServer) {
	s.RegisterService(&HomeNetworkData_ServiceDesc, srv)
}

func _HomeNetworkData_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkDataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.HomeNetworkData/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkDataServer).Publish(ctx, req.(*PublishDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkData_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeNetworkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HomeNetworkDataServer).Subscribe(m, &homeNetworkDataSubscribeServer{stream})
}

type HomeNetworkData_SubscribeServer interface {
	Send(*v3.RoutedUplinkMessage) error
	grpc.ServerStream
}

type homeNetworkDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *homeNetworkDataSubscribeServer) Send(m *v3.RoutedUplinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

// HomeNetworkData_ServiceDesc is the grpc.ServiceDesc for HomeNetworkData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomeNetworkData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.HomeNetworkData",
	HandlerType: (*HomeNetworkDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _HomeNetworkData_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _HomeNetworkData_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// RouterDataClient is the client API for RouterData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterDataClient interface {
	// Route an uplink message.
	RouteUplink(ctx context.Context, in *RouteUplinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
	// Route a downlink message.
	RouteDownlink(ctx context.Context, in *RouteDownlinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
}

type routerDataClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterDataClient(cc grpc.ClientConnInterface) RouterDataClient {
	return &routerDataClient{cc}
}

func (c *routerDataClient) RouteUplink(ctx context.Context, in *RouteUplinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.RouterData/RouteUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerDataClient) RouteDownlink(ctx context.Context, in *RouteDownlinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.RouterData/RouteDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterDataServer is the server API for RouterData service.
// All implementations must embed UnimplementedRouterDataServer
// for forward compatibility
type RouterDataServer interface {
	// Route an uplink message.
	RouteUplink(context.Context, *RouteUplinkMessageRequest) (*RouteMessageResponse, error)
	// Route a downlink message.
	RouteDownlink(context.Context, *RouteDownlinkMessageRequest) (*RouteMessageResponse, error)
	mustEmbedUnimplementedRouterDataServer()
}

// UnimplementedRouterDataServer must be embedded to have forward compatible implementations.
type UnimplementedRouterDataServer struct {
}

func (UnimplementedRouterDataServer) RouteUplink(context.Context, *RouteUplinkMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteUplink not implemented")
}
func (UnimplementedRouterDataServer) RouteDownlink(context.Context, *RouteDownlinkMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteDownlink not implemented")
}
func (UnimplementedRouterDataServer) mustEmbedUnimplementedRouterDataServer() {}

// UnsafeRouterDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterDataServer will
// result in compilation errors.
type UnsafeRouterDataServer interface {
	mustEmbedUnimplementedRouterDataServer()
}

func RegisterRouterDataServer(s grpc.ServiceRegistrar, srv RouterDataServer) {
	s.RegisterService(&RouterData_ServiceDesc, srv)
}

func _RouterData_RouteUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteUplinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterDataServer).RouteUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.RouterData/RouteUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterDataServer).RouteUplink(ctx, req.(*RouteUplinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterData_RouteDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterDataServer).RouteDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.RouterData/RouteDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterDataServer).RouteDownlink(ctx, req.(*RouteDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouterData_ServiceDesc is the grpc.ServiceDesc for RouterData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouterData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.RouterData",
	HandlerType: (*RouterDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouteUplink",
			Handler:    _RouterData_RouteUplink_Handler,
		},
		{
			MethodName: "RouteDownlink",
			Handler:    _RouterData_RouteDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// Returns the routes.
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.Routes/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// Returns the routes.
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.Routes/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoutes",
			Handler:    _Routes_ListRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}
