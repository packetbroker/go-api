// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/iam/v1/service.proto

package iampb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DevAddrBlocksValue struct {
	Value                []*v3.DevAddrBlock `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DevAddrBlocksValue) Reset()      { *m = DevAddrBlocksValue{} }
func (*DevAddrBlocksValue) ProtoMessage() {}
func (*DevAddrBlocksValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{0}
}
func (m *DevAddrBlocksValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevAddrBlocksValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevAddrBlocksValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevAddrBlocksValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrBlocksValue.Merge(m, src)
}
func (m *DevAddrBlocksValue) XXX_Size() int {
	return m.Size()
}
func (m *DevAddrBlocksValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrBlocksValue.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrBlocksValue proto.InternalMessageInfo

func (m *DevAddrBlocksValue) GetValue() []*v3.DevAddrBlock {
	if m != nil {
		return m.Value
	}
	return nil
}

type ListNetworksRequest struct {
	// Number of items to skip.
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksRequest) Reset()      { *m = ListNetworksRequest{} }
func (*ListNetworksRequest) ProtoMessage() {}
func (*ListNetworksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{1}
}
func (m *ListNetworksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNetworksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNetworksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNetworksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksRequest.Merge(m, src)
}
func (m *ListNetworksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNetworksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksRequest proto.InternalMessageInfo

func (m *ListNetworksRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListNetworksRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListNetworksResponse struct {
	Networks []*v3.Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Total number of networks.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksResponse) Reset()      { *m = ListNetworksResponse{} }
func (*ListNetworksResponse) ProtoMessage() {}
func (*ListNetworksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{2}
}
func (m *ListNetworksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNetworksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNetworksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNetworksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksResponse.Merge(m, src)
}
func (m *ListNetworksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNetworksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksResponse proto.InternalMessageInfo

func (m *ListNetworksResponse) GetNetworks() []*v3.Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *ListNetworksResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type CreateNetworkRequest struct {
	Network              *v3.Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateNetworkRequest) Reset()      { *m = CreateNetworkRequest{} }
func (*CreateNetworkRequest) ProtoMessage() {}
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{3}
}
func (m *CreateNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkRequest.Merge(m, src)
}
func (m *CreateNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkRequest proto.InternalMessageInfo

func (m *CreateNetworkRequest) GetNetwork() *v3.Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type CreateNetworkResponse struct {
	Network              *v3.Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateNetworkResponse) Reset()      { *m = CreateNetworkResponse{} }
func (*CreateNetworkResponse) ProtoMessage() {}
func (*CreateNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{4}
}
func (m *CreateNetworkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNetworkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkResponse.Merge(m, src)
}
func (m *CreateNetworkResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkResponse proto.InternalMessageInfo

func (m *CreateNetworkResponse) GetNetwork() *v3.Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type GetNetworkResponse struct {
	Network              *v3.Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetNetworkResponse) Reset()      { *m = GetNetworkResponse{} }
func (*GetNetworkResponse) ProtoMessage() {}
func (*GetNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{5}
}
func (m *GetNetworkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNetworkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNetworkResponse.Merge(m, src)
}
func (m *GetNetworkResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNetworkResponse proto.InternalMessageInfo

func (m *GetNetworkResponse) GetNetwork() *v3.Network {
	if m != nil {
		return m.Network
	}
	return nil
}

type NetworkRequest struct {
	NetId                uint32   `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkRequest) Reset()      { *m = NetworkRequest{} }
func (*NetworkRequest) ProtoMessage() {}
func (*NetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{6}
}
func (m *NetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkRequest.Merge(m, src)
}
func (m *NetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *NetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkRequest proto.InternalMessageInfo

func (m *NetworkRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

type ContactInfoValue struct {
	Value                *v3.ContactInfo `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ContactInfoValue) Reset()      { *m = ContactInfoValue{} }
func (*ContactInfoValue) ProtoMessage() {}
func (*ContactInfoValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{7}
}
func (m *ContactInfoValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactInfoValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactInfoValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactInfoValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactInfoValue.Merge(m, src)
}
func (m *ContactInfoValue) XXX_Size() int {
	return m.Size()
}
func (m *ContactInfoValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactInfoValue.DiscardUnknown(m)
}

var xxx_messageInfo_ContactInfoValue proto.InternalMessageInfo

func (m *ContactInfoValue) GetValue() *v3.ContactInfo {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateNetworkRequest struct {
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Name of the tenant.
	Name *types.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr blocks of the tenant.
	DevAddrBlocks *DevAddrBlocksValue `protobuf:"bytes,3,opt,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfoValue `protobuf:"bytes,4,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact     *ContactInfoValue `protobuf:"bytes,5,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateNetworkRequest) Reset()      { *m = UpdateNetworkRequest{} }
func (*UpdateNetworkRequest) ProtoMessage() {}
func (*UpdateNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{8}
}
func (m *UpdateNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNetworkRequest.Merge(m, src)
}
func (m *UpdateNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNetworkRequest proto.InternalMessageInfo

func (m *UpdateNetworkRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *UpdateNetworkRequest) GetName() *types.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *UpdateNetworkRequest) GetDevAddrBlocks() *DevAddrBlocksValue {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *UpdateNetworkRequest) GetAdministrativeContact() *ContactInfoValue {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *UpdateNetworkRequest) GetTechnicalContact() *ContactInfoValue {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

type ListTenantsRequest struct {
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Number of items to skip.
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTenantsRequest) Reset()      { *m = ListTenantsRequest{} }
func (*ListTenantsRequest) ProtoMessage() {}
func (*ListTenantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{9}
}
func (m *ListTenantsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTenantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTenantsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTenantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTenantsRequest.Merge(m, src)
}
func (m *ListTenantsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTenantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTenantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTenantsRequest proto.InternalMessageInfo

func (m *ListTenantsRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *ListTenantsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListTenantsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListTenantsResponse struct {
	Tenants []*v3.Tenant `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	// Total number of tenants.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTenantsResponse) Reset()      { *m = ListTenantsResponse{} }
func (*ListTenantsResponse) ProtoMessage() {}
func (*ListTenantsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{10}
}
func (m *ListTenantsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTenantsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTenantsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTenantsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTenantsResponse.Merge(m, src)
}
func (m *ListTenantsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTenantsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTenantsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTenantsResponse proto.InternalMessageInfo

func (m *ListTenantsResponse) GetTenants() []*v3.Tenant {
	if m != nil {
		return m.Tenants
	}
	return nil
}

func (m *ListTenantsResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type CreateTenantRequest struct {
	Tenant               *v3.Tenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateTenantRequest) Reset()      { *m = CreateTenantRequest{} }
func (*CreateTenantRequest) ProtoMessage() {}
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{11}
}
func (m *CreateTenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTenantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTenantRequest.Merge(m, src)
}
func (m *CreateTenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTenantRequest proto.InternalMessageInfo

func (m *CreateTenantRequest) GetTenant() *v3.Tenant {
	if m != nil {
		return m.Tenant
	}
	return nil
}

type CreateTenantResponse struct {
	Tenant               *v3.Tenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateTenantResponse) Reset()      { *m = CreateTenantResponse{} }
func (*CreateTenantResponse) ProtoMessage() {}
func (*CreateTenantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{12}
}
func (m *CreateTenantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTenantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTenantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTenantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTenantResponse.Merge(m, src)
}
func (m *CreateTenantResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateTenantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTenantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTenantResponse proto.InternalMessageInfo

func (m *CreateTenantResponse) GetTenant() *v3.Tenant {
	if m != nil {
		return m.Tenant
	}
	return nil
}

type TenantRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId             string   `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TenantRequest) Reset()      { *m = TenantRequest{} }
func (*TenantRequest) ProtoMessage() {}
func (*TenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{13}
}
func (m *TenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TenantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantRequest.Merge(m, src)
}
func (m *TenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *TenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TenantRequest proto.InternalMessageInfo

func (m *TenantRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *TenantRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type GetTenantResponse struct {
	Tenant               *v3.Tenant `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetTenantResponse) Reset()      { *m = GetTenantResponse{} }
func (*GetTenantResponse) ProtoMessage() {}
func (*GetTenantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{14}
}
func (m *GetTenantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantResponse.Merge(m, src)
}
func (m *GetTenantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantResponse proto.InternalMessageInfo

func (m *GetTenantResponse) GetTenant() *v3.Tenant {
	if m != nil {
		return m.Tenant
	}
	return nil
}

type UpdateTenantRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Name of the tenant.
	Name *types.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr blocks of the tenant.
	DevAddrBlocks *DevAddrBlocksValue `protobuf:"bytes,4,opt,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfoValue `protobuf:"bytes,5,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact     *ContactInfoValue `protobuf:"bytes,6,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateTenantRequest) Reset()      { *m = UpdateTenantRequest{} }
func (*UpdateTenantRequest) ProtoMessage() {}
func (*UpdateTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{15}
}
func (m *UpdateTenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTenantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTenantRequest.Merge(m, src)
}
func (m *UpdateTenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTenantRequest proto.InternalMessageInfo

func (m *UpdateTenantRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *UpdateTenantRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *UpdateTenantRequest) GetName() *types.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *UpdateTenantRequest) GetDevAddrBlocks() *DevAddrBlocksValue {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *UpdateTenantRequest) GetAdministrativeContact() *ContactInfoValue {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *UpdateTenantRequest) GetTechnicalContact() *ContactInfoValue {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

type ListAPIKeysRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member (optional).
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member (optional).
	ClusterId            string   `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAPIKeysRequest) Reset()      { *m = ListAPIKeysRequest{} }
func (*ListAPIKeysRequest) ProtoMessage() {}
func (*ListAPIKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{16}
}
func (m *ListAPIKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAPIKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAPIKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAPIKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIKeysRequest.Merge(m, src)
}
func (m *ListAPIKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAPIKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIKeysRequest proto.InternalMessageInfo

func (m *ListAPIKeysRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *ListAPIKeysRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *ListAPIKeysRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type ListAPIKeysResponse struct {
	Keys                 []*v3.NetworkAPIKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListAPIKeysResponse) Reset()      { *m = ListAPIKeysResponse{} }
func (*ListAPIKeysResponse) ProtoMessage() {}
func (*ListAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{17}
}
func (m *ListAPIKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAPIKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAPIKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAPIKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAPIKeysResponse.Merge(m, src)
}
func (m *ListAPIKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAPIKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAPIKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAPIKeysResponse proto.InternalMessageInfo

func (m *ListAPIKeysResponse) GetKeys() []*v3.NetworkAPIKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CreateAPIKeyRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member (optional).
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member (optional).
	ClusterId            string   `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAPIKeyRequest) Reset()      { *m = CreateAPIKeyRequest{} }
func (*CreateAPIKeyRequest) ProtoMessage() {}
func (*CreateAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{18}
}
func (m *CreateAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAPIKeyRequest.Merge(m, src)
}
func (m *CreateAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAPIKeyRequest proto.InternalMessageInfo

func (m *CreateAPIKeyRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *CreateAPIKeyRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *CreateAPIKeyRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type APIKeyRequest struct {
	KeyId                string   `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIKeyRequest) Reset()      { *m = APIKeyRequest{} }
func (*APIKeyRequest) ProtoMessage() {}
func (*APIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{19}
}
func (m *APIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKeyRequest.Merge(m, src)
}
func (m *APIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *APIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_APIKeyRequest proto.InternalMessageInfo

func (m *APIKeyRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

type CreateAPIKeyResponse struct {
	Key                  *v3.NetworkAPIKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateAPIKeyResponse) Reset()      { *m = CreateAPIKeyResponse{} }
func (*CreateAPIKeyResponse) ProtoMessage() {}
func (*CreateAPIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb4c3db227ceef8f, []int{20}
}
func (m *CreateAPIKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAPIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAPIKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAPIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAPIKeyResponse.Merge(m, src)
}
func (m *CreateAPIKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAPIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAPIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAPIKeyResponse proto.InternalMessageInfo

func (m *CreateAPIKeyResponse) GetKey() *v3.NetworkAPIKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func init() {
	proto.RegisterType((*DevAddrBlocksValue)(nil), "org.packetbroker.iam.v1.DevAddrBlocksValue")
	golang_proto.RegisterType((*DevAddrBlocksValue)(nil), "org.packetbroker.iam.v1.DevAddrBlocksValue")
	proto.RegisterType((*ListNetworksRequest)(nil), "org.packetbroker.iam.v1.ListNetworksRequest")
	golang_proto.RegisterType((*ListNetworksRequest)(nil), "org.packetbroker.iam.v1.ListNetworksRequest")
	proto.RegisterType((*ListNetworksResponse)(nil), "org.packetbroker.iam.v1.ListNetworksResponse")
	golang_proto.RegisterType((*ListNetworksResponse)(nil), "org.packetbroker.iam.v1.ListNetworksResponse")
	proto.RegisterType((*CreateNetworkRequest)(nil), "org.packetbroker.iam.v1.CreateNetworkRequest")
	golang_proto.RegisterType((*CreateNetworkRequest)(nil), "org.packetbroker.iam.v1.CreateNetworkRequest")
	proto.RegisterType((*CreateNetworkResponse)(nil), "org.packetbroker.iam.v1.CreateNetworkResponse")
	golang_proto.RegisterType((*CreateNetworkResponse)(nil), "org.packetbroker.iam.v1.CreateNetworkResponse")
	proto.RegisterType((*GetNetworkResponse)(nil), "org.packetbroker.iam.v1.GetNetworkResponse")
	golang_proto.RegisterType((*GetNetworkResponse)(nil), "org.packetbroker.iam.v1.GetNetworkResponse")
	proto.RegisterType((*NetworkRequest)(nil), "org.packetbroker.iam.v1.NetworkRequest")
	golang_proto.RegisterType((*NetworkRequest)(nil), "org.packetbroker.iam.v1.NetworkRequest")
	proto.RegisterType((*ContactInfoValue)(nil), "org.packetbroker.iam.v1.ContactInfoValue")
	golang_proto.RegisterType((*ContactInfoValue)(nil), "org.packetbroker.iam.v1.ContactInfoValue")
	proto.RegisterType((*UpdateNetworkRequest)(nil), "org.packetbroker.iam.v1.UpdateNetworkRequest")
	golang_proto.RegisterType((*UpdateNetworkRequest)(nil), "org.packetbroker.iam.v1.UpdateNetworkRequest")
	proto.RegisterType((*ListTenantsRequest)(nil), "org.packetbroker.iam.v1.ListTenantsRequest")
	golang_proto.RegisterType((*ListTenantsRequest)(nil), "org.packetbroker.iam.v1.ListTenantsRequest")
	proto.RegisterType((*ListTenantsResponse)(nil), "org.packetbroker.iam.v1.ListTenantsResponse")
	golang_proto.RegisterType((*ListTenantsResponse)(nil), "org.packetbroker.iam.v1.ListTenantsResponse")
	proto.RegisterType((*CreateTenantRequest)(nil), "org.packetbroker.iam.v1.CreateTenantRequest")
	golang_proto.RegisterType((*CreateTenantRequest)(nil), "org.packetbroker.iam.v1.CreateTenantRequest")
	proto.RegisterType((*CreateTenantResponse)(nil), "org.packetbroker.iam.v1.CreateTenantResponse")
	golang_proto.RegisterType((*CreateTenantResponse)(nil), "org.packetbroker.iam.v1.CreateTenantResponse")
	proto.RegisterType((*TenantRequest)(nil), "org.packetbroker.iam.v1.TenantRequest")
	golang_proto.RegisterType((*TenantRequest)(nil), "org.packetbroker.iam.v1.TenantRequest")
	proto.RegisterType((*GetTenantResponse)(nil), "org.packetbroker.iam.v1.GetTenantResponse")
	golang_proto.RegisterType((*GetTenantResponse)(nil), "org.packetbroker.iam.v1.GetTenantResponse")
	proto.RegisterType((*UpdateTenantRequest)(nil), "org.packetbroker.iam.v1.UpdateTenantRequest")
	golang_proto.RegisterType((*UpdateTenantRequest)(nil), "org.packetbroker.iam.v1.UpdateTenantRequest")
	proto.RegisterType((*ListAPIKeysRequest)(nil), "org.packetbroker.iam.v1.ListAPIKeysRequest")
	golang_proto.RegisterType((*ListAPIKeysRequest)(nil), "org.packetbroker.iam.v1.ListAPIKeysRequest")
	proto.RegisterType((*ListAPIKeysResponse)(nil), "org.packetbroker.iam.v1.ListAPIKeysResponse")
	golang_proto.RegisterType((*ListAPIKeysResponse)(nil), "org.packetbroker.iam.v1.ListAPIKeysResponse")
	proto.RegisterType((*CreateAPIKeyRequest)(nil), "org.packetbroker.iam.v1.CreateAPIKeyRequest")
	golang_proto.RegisterType((*CreateAPIKeyRequest)(nil), "org.packetbroker.iam.v1.CreateAPIKeyRequest")
	proto.RegisterType((*APIKeyRequest)(nil), "org.packetbroker.iam.v1.APIKeyRequest")
	golang_proto.RegisterType((*APIKeyRequest)(nil), "org.packetbroker.iam.v1.APIKeyRequest")
	proto.RegisterType((*CreateAPIKeyResponse)(nil), "org.packetbroker.iam.v1.CreateAPIKeyResponse")
	golang_proto.RegisterType((*CreateAPIKeyResponse)(nil), "org.packetbroker.iam.v1.CreateAPIKeyResponse")
}

func init() {
	proto.RegisterFile("packetbroker/api/iam/v1/service.proto", fileDescriptor_eb4c3db227ceef8f)
}
func init() {
	golang_proto.RegisterFile("packetbroker/api/iam/v1/service.proto", fileDescriptor_eb4c3db227ceef8f)
}

var fileDescriptor_eb4c3db227ceef8f = []byte{
	// 1094 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x3d, 0x90, 0xd3, 0x46,
	0x14, 0xd6, 0x9e, 0xcf, 0x07, 0x7e, 0x77, 0xe6, 0x67, 0xef, 0x27, 0x1e, 0x5f, 0xb2, 0x73, 0xa7,
	0x99, 0x00, 0x09, 0x20, 0x87, 0xbb, 0x84, 0x64, 0x26, 0x15, 0x1c, 0x19, 0x62, 0x38, 0x2e, 0x8c,
	0x20, 0x37, 0x93, 0x34, 0x8e, 0x6c, 0xad, 0x7d, 0x1a, 0xd9, 0x92, 0x23, 0xad, 0xcd, 0xb8, 0xa3,
	0x64, 0x52, 0xa5, 0x4b, 0xca, 0x94, 0x94, 0x14, 0x29, 0x28, 0x29, 0x29, 0x29, 0x29, 0xb1, 0xdc,
	0x50, 0x31, 0x94, 0x14, 0x29, 0x32, 0xd2, 0xae, 0x74, 0x96, 0x2d, 0xd9, 0x86, 0xe3, 0x3a, 0x6b,
	0xf7, 0xbd, 0xf7, 0x7d, 0xfb, 0xde, 0xfb, 0xf6, 0xad, 0xe1, 0xf3, 0xb6, 0x56, 0x33, 0x29, 0xab,
	0x3a, 0xb6, 0x49, 0x9d, 0x92, 0xd6, 0x36, 0x4a, 0x86, 0xd6, 0x2a, 0x75, 0xaf, 0x94, 0x5c, 0xea,
	0x74, 0x8d, 0x1a, 0x55, 0xda, 0x8e, 0xcd, 0x6c, 0xfc, 0x89, 0xed, 0x34, 0x94, 0x61, 0x53, 0xc5,
	0xd0, 0x5a, 0x4a, 0xf7, 0x4a, 0x71, 0xbd, 0x61, 0xdb, 0x8d, 0x26, 0x2d, 0x05, 0x66, 0xd5, 0x4e,
	0xbd, 0x44, 0x5b, 0x6d, 0xd6, 0xe3, 0x5e, 0x45, 0x32, 0xba, 0xf9, 0xc0, 0xd1, 0xda, 0x6d, 0xea,
	0xb8, 0x62, 0x7f, 0x73, 0x0c, 0xbc, 0xbb, 0x5d, 0xaa, 0xd9, 0x16, 0xd3, 0x6a, 0x4c, 0x98, 0xc8,
	0x49, 0x26, 0x16, 0x65, 0x0f, 0x6c, 0xc7, 0x14, 0x61, 0xe4, 0x3b, 0x80, 0x6f, 0xd0, 0xee, 0x35,
	0x5d, 0x77, 0xae, 0x37, 0xed, 0x9a, 0xe9, 0xee, 0x6b, 0xcd, 0x0e, 0xc5, 0xdf, 0x42, 0xb6, 0xeb,
	0xff, 0x28, 0xa0, 0x8d, 0xcc, 0x85, 0xc5, 0xad, 0x4d, 0x65, 0xec, 0x08, 0xdd, 0x6d, 0x65, 0xd8,
	0x4f, 0xe5, 0xf6, 0xf2, 0x0e, 0x2c, 0xef, 0x1a, 0x2e, 0xdb, 0x13, 0x20, 0x2a, 0xfd, 0xbd, 0x43,
	0x5d, 0x86, 0xd7, 0x60, 0xc1, 0xae, 0xd7, 0x5d, 0xca, 0x0a, 0x68, 0x03, 0x5d, 0xc8, 0xab, 0xe2,
	0x0b, 0xaf, 0x40, 0xb6, 0x69, 0xb4, 0x0c, 0x56, 0x98, 0x0b, 0x96, 0xf9, 0x87, 0x5c, 0x87, 0x95,
	0x78, 0x10, 0xb7, 0x6d, 0x5b, 0x2e, 0xc5, 0xdf, 0xc1, 0xc9, 0x90, 0xbd, 0x20, 0xf6, 0x69, 0x22,
	0x31, 0xe1, 0xa8, 0x46, 0xd6, 0x3e, 0x0e, 0xb3, 0x99, 0xd6, 0x0c, 0x71, 0x82, 0x0f, 0x79, 0x0f,
	0x56, 0x76, 0x1c, 0xaa, 0x31, 0x1a, 0x3a, 0x08, 0xb6, 0x57, 0xe1, 0x84, 0xf0, 0x0c, 0xe8, 0x4e,
	0x83, 0x09, 0x8d, 0xe5, 0x9f, 0x60, 0x75, 0x24, 0x9e, 0x20, 0xfe, 0xa1, 0x01, 0x77, 0x01, 0xdf,
	0xa4, 0xec, 0x63, 0x45, 0x3b, 0x0f, 0xa7, 0x46, 0x0e, 0xba, 0x0a, 0x0b, 0x16, 0x65, 0x15, 0x43,
	0x17, 0x65, 0xc9, 0x5a, 0x94, 0x95, 0x75, 0xf9, 0x16, 0x9c, 0xd9, 0xe1, 0x8d, 0x54, 0xb6, 0xea,
	0x36, 0xef, 0x88, 0xab, 0x87, 0x1d, 0xe1, 0x43, 0x6e, 0x24, 0x42, 0x0e, 0x79, 0x85, 0x0d, 0xf1,
	0x66, 0x0e, 0x56, 0x7e, 0x6e, 0xeb, 0xe3, 0x49, 0x4e, 0xc6, 0xc6, 0x5f, 0xc1, 0xbc, 0xa5, 0xb5,
	0x68, 0x50, 0x28, 0xff, 0x64, 0x5c, 0x05, 0x4a, 0xa8, 0x02, 0xe5, 0x1e, 0x73, 0x0c, 0xab, 0x11,
	0x70, 0x52, 0x03, 0x4b, 0x7c, 0x0f, 0x4e, 0xeb, 0xb4, 0x5b, 0xd1, 0x74, 0xdd, 0xa9, 0x54, 0x83,
	0x1e, 0x2e, 0x64, 0x02, 0xe7, 0x8b, 0x4a, 0x8a, 0xf0, 0x94, 0xf1, 0x8e, 0x57, 0xf3, 0xfa, 0xf0,
	0x1a, 0xfe, 0x0d, 0xd6, 0x34, 0xbd, 0x65, 0x58, 0x86, 0xcb, 0x1c, 0x8d, 0x19, 0x5d, 0x5a, 0x11,
	0xd2, 0x2a, 0xcc, 0x07, 0xb1, 0xbf, 0x48, 0x8d, 0x3d, 0x9a, 0x39, 0x75, 0x35, 0x1e, 0x48, 0xec,
	0xe3, 0x7d, 0x38, 0xcb, 0x68, 0xed, 0xc0, 0x32, 0x6a, 0x5a, 0x33, 0x0a, 0x9e, 0x7d, 0xdf, 0xe0,
	0x67, 0xa2, 0x18, 0x62, 0x4b, 0xfe, 0x05, 0xb0, 0x2f, 0x9e, 0xfb, 0xd4, 0xd2, 0x2c, 0xe6, 0x4e,
	0xc9, 0xf6, 0xa1, 0x2e, 0xe7, 0x92, 0x75, 0x99, 0x19, 0xd6, 0x65, 0x95, 0x8b, 0x3b, 0x0a, 0x2d,
	0xfa, 0xf1, 0x1b, 0x38, 0xc1, 0xf8, 0x92, 0x50, 0xe5, 0x7a, 0x62, 0x73, 0x70, 0x37, 0x35, 0xb4,
	0x4d, 0xd1, 0xe4, 0x2d, 0x58, 0xe6, 0x1a, 0x12, 0xe6, 0x82, 0xff, 0x36, 0x2c, 0x70, 0x3f, 0xd1,
	0x7f, 0x13, 0x21, 0x84, 0xa9, 0x7c, 0x3b, 0xd4, 0x77, 0x18, 0x4b, 0x10, 0xfe, 0xa0, 0x60, 0x3b,
	0x90, 0x8f, 0x53, 0x4a, 0x49, 0xe9, 0x3a, 0xe4, 0xb8, 0x87, 0xbf, 0xe3, 0x1f, 0x2d, 0xa7, 0x9e,
	0xe4, 0x0b, 0x65, 0x5d, 0xfe, 0x11, 0xce, 0xde, 0xa4, 0xec, 0x63, 0xd0, 0xf9, 0x23, 0x03, 0xcb,
	0x5c, 0x57, 0x47, 0x66, 0x15, 0x69, 0x2e, 0x73, 0x14, 0xcd, 0xcd, 0x1f, 0xa3, 0xe6, 0xb2, 0xc7,
	0xa9, 0xb9, 0x85, 0xa3, 0x6b, 0xae, 0xc1, 0x35, 0x77, 0xed, 0x6e, 0xf9, 0x36, 0xed, 0xb9, 0x47,
	0x29, 0xc5, 0x67, 0x00, 0xb5, 0x66, 0xc7, 0x65, 0xd4, 0xf1, 0x77, 0x33, 0xc1, 0x6e, 0x4e, 0xac,
	0x94, 0x75, 0xf9, 0x0e, 0x57, 0x60, 0x04, 0x14, 0x4d, 0x84, 0x79, 0x93, 0xf6, 0x42, 0xf9, 0xc9,
	0x93, 0xc6, 0x01, 0x77, 0x55, 0x03, 0x7b, 0xf9, 0x20, 0x14, 0x9b, 0x58, 0x3d, 0x3e, 0xe2, 0xe7,
	0x20, 0x3f, 0x86, 0x61, 0xd2, 0x5e, 0x88, 0x91, 0x53, 0xb3, 0x26, 0xed, 0x95, 0x75, 0x79, 0x37,
	0x94, 0x6c, 0x68, 0x2d, 0x4e, 0xf8, 0x35, 0x64, 0x4c, 0xda, 0x13, 0x02, 0x99, 0xe5, 0x80, 0xbe,
	0xf9, 0xd6, 0x7f, 0x19, 0x38, 0x1d, 0x8d, 0x9d, 0x86, 0xdf, 0x0e, 0x3d, 0x6c, 0xc2, 0xd2, 0xf0,
	0xe3, 0x02, 0x5f, 0x4a, 0x2d, 0x7c, 0xc2, 0x43, 0xa6, 0x78, 0x79, 0x46, 0x6b, 0x41, 0xdb, 0x82,
	0x7c, 0xec, 0x45, 0x80, 0xd3, 0xfd, 0x93, 0x5e, 0x22, 0x45, 0x65, 0x56, 0x73, 0x81, 0x57, 0x05,
	0x38, 0x7c, 0x30, 0xe0, 0xf3, 0xa9, 0xde, 0x23, 0x30, 0xe9, 0xaa, 0x4d, 0x78, 0x7e, 0xec, 0x43,
	0x3e, 0x36, 0xd0, 0x27, 0x9c, 0x29, 0x69, 0xf0, 0x17, 0xd7, 0xc6, 0xee, 0x97, 0x1f, 0xfc, 0x67,
	0x2f, 0xbe, 0x0b, 0xf9, 0x1b, 0xb4, 0x49, 0x0f, 0xe3, 0xce, 0x4c, 0x3f, 0x25, 0xe2, 0xd6, 0x9b,
	0x0c, 0x9c, 0x0a, 0x6f, 0x47, 0x51, 0xfd, 0x03, 0x58, 0x1c, 0x1a, 0x61, 0xf8, 0xe2, 0xc4, 0x72,
	0xc6, 0x67, 0x68, 0xf1, 0xd2, 0x6c, 0xc6, 0x22, 0x4d, 0x26, 0x2c, 0x0d, 0x0f, 0x9f, 0x09, 0x7d,
	0x96, 0x30, 0xef, 0x8a, 0x97, 0x67, 0xb4, 0x16, 0x60, 0x15, 0xc8, 0x45, 0x73, 0x05, 0x9f, 0x4b,
	0xf5, 0x8d, 0x63, 0x7c, 0x39, 0xa9, 0xea, 0x23, 0x00, 0xf7, 0x61, 0x69, 0x78, 0xda, 0x4c, 0x38,
	0x4d, 0xc2, 0x50, 0x4a, 0x2d, 0xf9, 0x1e, 0x2c, 0xf1, 0x92, 0xbf, 0x27, 0xf3, 0xb4, 0x82, 0xff,
	0x3b, 0x07, 0x8b, 0x5c, 0xff, 0xfb, 0x5a, 0xa7, 0xc9, 0xc2, 0x6a, 0x8b, 0xeb, 0x72, 0x4a, 0xb5,
	0xe3, 0xb7, 0xf7, 0x94, 0x6a, 0x8f, 0xde, 0xc0, 0x51, 0xb5, 0xf9, 0xc6, 0xd4, 0x6a, 0xc7, 0x2e,
	0xc3, 0xa9, 0xd5, 0x1e, 0xb9, 0x0c, 0xa3, 0xb4, 0x09, 0xb0, 0xf4, 0xb4, 0xc5, 0x61, 0x52, 0xd2,
	0x76, 0xfd, 0x2f, 0xf4, 0xbc, 0x4f, 0xd0, 0x8b, 0x3e, 0x41, 0x2f, 0xfb, 0x44, 0x7a, 0xd5, 0x27,
	0xd2, 0xeb, 0x3e, 0x91, 0xde, 0xf6, 0x89, 0xf4, 0xae, 0x4f, 0xd0, 0x43, 0x8f, 0xa0, 0x47, 0x1e,
	0x91, 0x1e, 0x7b, 0x04, 0x3d, 0xf1, 0x88, 0xf4, 0xd4, 0x23, 0xd2, 0x33, 0x8f, 0x48, 0xcf, 0x3d,
	0x82, 0x5e, 0x78, 0x04, 0xbd, 0xf4, 0x88, 0xf4, 0xca, 0x23, 0xe8, 0xb5, 0x47, 0xa4, 0xb7, 0x1e,
	0x41, 0xef, 0x3c, 0x22, 0x3d, 0x1c, 0x10, 0xe9, 0xd1, 0x80, 0xa0, 0x3f, 0x07, 0x44, 0xfa, 0x7b,
	0x40, 0xd0, 0x3f, 0x03, 0x22, 0x3d, 0x1e, 0x10, 0xe9, 0xc9, 0x80, 0xa0, 0xa7, 0x03, 0x82, 0x9e,
	0x0d, 0x08, 0xfa, 0x75, 0xb3, 0x61, 0xc7, 0x49, 0xdb, 0x4e, 0x23, 0xfc, 0x17, 0xfd, 0xbd, 0xa1,
	0xb5, 0xda, 0xd5, 0xea, 0x42, 0xc0, 0x74, 0xfb, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x3b,
	0x55, 0xde, 0x6a, 0x0f, 0x00, 0x00,
}

func (this *DevAddrBlocksValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevAddrBlocksValue)
	if !ok {
		that2, ok := that.(DevAddrBlocksValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *ListNetworksRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNetworksRequest)
	if !ok {
		that2, ok := that.(ListNetworksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ListNetworksResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNetworksResponse)
	if !ok {
		that2, ok := that.(ListNetworksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Networks) != len(that1.Networks) {
		return false
	}
	for i := range this.Networks {
		if !this.Networks[i].Equal(that1.Networks[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *CreateNetworkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNetworkRequest)
	if !ok {
		that2, ok := that.(CreateNetworkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Network.Equal(that1.Network) {
		return false
	}
	return true
}
func (this *CreateNetworkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNetworkResponse)
	if !ok {
		that2, ok := that.(CreateNetworkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Network.Equal(that1.Network) {
		return false
	}
	return true
}
func (this *GetNetworkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNetworkResponse)
	if !ok {
		that2, ok := that.(GetNetworkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Network.Equal(that1.Network) {
		return false
	}
	return true
}
func (this *NetworkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkRequest)
	if !ok {
		that2, ok := that.(NetworkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	return true
}
func (this *ContactInfoValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContactInfoValue)
	if !ok {
		that2, ok := that.(ContactInfoValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *UpdateNetworkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNetworkRequest)
	if !ok {
		that2, ok := that.(UpdateNetworkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.DevAddrBlocks.Equal(that1.DevAddrBlocks) {
		return false
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	return true
}
func (this *ListTenantsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTenantsRequest)
	if !ok {
		that2, ok := that.(ListTenantsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ListTenantsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTenantsResponse)
	if !ok {
		that2, ok := that.(ListTenantsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tenants) != len(that1.Tenants) {
		return false
	}
	for i := range this.Tenants {
		if !this.Tenants[i].Equal(that1.Tenants[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *CreateTenantRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTenantRequest)
	if !ok {
		that2, ok := that.(CreateTenantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tenant.Equal(that1.Tenant) {
		return false
	}
	return true
}
func (this *CreateTenantResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTenantResponse)
	if !ok {
		that2, ok := that.(CreateTenantResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tenant.Equal(that1.Tenant) {
		return false
	}
	return true
}
func (this *TenantRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantRequest)
	if !ok {
		that2, ok := that.(TenantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	return true
}
func (this *GetTenantResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantResponse)
	if !ok {
		that2, ok := that.(GetTenantResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tenant.Equal(that1.Tenant) {
		return false
	}
	return true
}
func (this *UpdateTenantRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTenantRequest)
	if !ok {
		that2, ok := that.(UpdateTenantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.DevAddrBlocks.Equal(that1.DevAddrBlocks) {
		return false
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	return true
}
func (this *ListAPIKeysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAPIKeysRequest)
	if !ok {
		that2, ok := that.(ListAPIKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	return true
}
func (this *ListAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *CreateAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAPIKeyRequest)
	if !ok {
		that2, ok := that.(CreateAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	return true
}
func (this *APIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIKeyRequest)
	if !ok {
		that2, ok := that.(APIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	return true
}
func (this *CreateAPIKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAPIKeyResponse)
	if !ok {
		that2, ok := that.(CreateAPIKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkRegistryClient is the client API for NetworkRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkRegistryClient interface {
	// List networks.
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// Create a network.
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	// Get a network.
	GetNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	// Update a network.
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete a network.
	DeleteNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type networkRegistryClient struct {
	cc *grpc.ClientConn
}

func NewNetworkRegistryClient(cc *grpc.ClientConn) NetworkRegistryClient {
	return &networkRegistryClient{cc}
}

func (c *networkRegistryClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.NetworkRegistry/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkRegistryClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	out := new(CreateNetworkResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.NetworkRegistry/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkRegistryClient) GetNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.NetworkRegistry/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkRegistryClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.NetworkRegistry/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkRegistryClient) DeleteNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.NetworkRegistry/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkRegistryServer is the server API for NetworkRegistry service.
type NetworkRegistryServer interface {
	// List networks.
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// Create a network.
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	// Get a network.
	GetNetwork(context.Context, *NetworkRequest) (*GetNetworkResponse, error)
	// Update a network.
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*types.Empty, error)
	// Delete a network.
	DeleteNetwork(context.Context, *NetworkRequest) (*types.Empty, error)
}

// UnimplementedNetworkRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkRegistryServer struct {
}

func (*UnimplementedNetworkRegistryServer) ListNetworks(ctx context.Context, req *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedNetworkRegistryServer) CreateNetwork(ctx context.Context, req *CreateNetworkRequest) (*CreateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (*UnimplementedNetworkRegistryServer) GetNetwork(ctx context.Context, req *NetworkRequest) (*GetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (*UnimplementedNetworkRegistryServer) UpdateNetwork(ctx context.Context, req *UpdateNetworkRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (*UnimplementedNetworkRegistryServer) DeleteNetwork(ctx context.Context, req *NetworkRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}

func RegisterNetworkRegistryServer(s *grpc.Server, srv NetworkRegistryServer) {
	s.RegisterService(&_NetworkRegistry_serviceDesc, srv)
}

func _NetworkRegistry_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkRegistryServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.NetworkRegistry/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkRegistryServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkRegistry_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkRegistryServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.NetworkRegistry/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkRegistryServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkRegistry_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkRegistryServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.NetworkRegistry/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkRegistryServer).GetNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkRegistry_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkRegistryServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.NetworkRegistry/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkRegistryServer).UpdateNetwork(ctx, req.(*UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkRegistry_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkRegistryServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.NetworkRegistry/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkRegistryServer).DeleteNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v1.NetworkRegistry",
	HandlerType: (*NetworkRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworks",
			Handler:    _NetworkRegistry_ListNetworks_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _NetworkRegistry_CreateNetwork_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _NetworkRegistry_GetNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _NetworkRegistry_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _NetworkRegistry_DeleteNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v1/service.proto",
}

// TenantRegistryClient is the client API for TenantRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TenantRegistryClient interface {
	// List a network's tenants.
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	// Create a tenant.
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	// Get a tenant.
	GetTenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
	// Update a tenant.
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete a tenant.
	DeleteTenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type tenantRegistryClient struct {
	cc *grpc.ClientConn
}

func NewTenantRegistryClient(cc *grpc.ClientConn) TenantRegistryClient {
	return &tenantRegistryClient{cc}
}

func (c *tenantRegistryClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.TenantRegistry/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.TenantRegistry/CreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) GetTenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.TenantRegistry/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.TenantRegistry/UpdateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantRegistryClient) DeleteTenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.TenantRegistry/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantRegistryServer is the server API for TenantRegistry service.
type TenantRegistryServer interface {
	// List a network's tenants.
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	// Create a tenant.
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	// Get a tenant.
	GetTenant(context.Context, *TenantRequest) (*GetTenantResponse, error)
	// Update a tenant.
	UpdateTenant(context.Context, *UpdateTenantRequest) (*types.Empty, error)
	// Delete a tenant.
	DeleteTenant(context.Context, *TenantRequest) (*types.Empty, error)
}

// UnimplementedTenantRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedTenantRegistryServer struct {
}

func (*UnimplementedTenantRegistryServer) ListTenants(ctx context.Context, req *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (*UnimplementedTenantRegistryServer) CreateTenant(ctx context.Context, req *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (*UnimplementedTenantRegistryServer) GetTenant(ctx context.Context, req *TenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (*UnimplementedTenantRegistryServer) UpdateTenant(ctx context.Context, req *UpdateTenantRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (*UnimplementedTenantRegistryServer) DeleteTenant(ctx context.Context, req *TenantRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}

func RegisterTenantRegistryServer(s *grpc.Server, srv TenantRegistryServer) {
	s.RegisterService(&_TenantRegistry_serviceDesc, srv)
}

func _TenantRegistry_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.TenantRegistry/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.TenantRegistry/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.TenantRegistry/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).GetTenant(ctx, req.(*TenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.TenantRegistry/UpdateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantRegistry_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantRegistryServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.TenantRegistry/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantRegistryServer).DeleteTenant(ctx, req.(*TenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TenantRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v1.TenantRegistry",
	HandlerType: (*TenantRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTenants",
			Handler:    _TenantRegistry_ListTenants_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _TenantRegistry_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _TenantRegistry_GetTenant_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _TenantRegistry_UpdateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _TenantRegistry_DeleteTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v1/service.proto",
}

// APIKeyVaultClient is the client API for APIKeyVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIKeyVaultClient interface {
	// List API keys.
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type aPIKeyVaultClient struct {
	cc *grpc.ClientConn
}

func NewAPIKeyVaultClient(cc *grpc.ClientConn) APIKeyVaultClient {
	return &aPIKeyVaultClient{cc}
}

func (c *aPIKeyVaultClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.APIKeyVault/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyVaultClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error) {
	out := new(CreateAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.APIKeyVault/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIKeyVaultClient) DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v1.APIKeyVault/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIKeyVaultServer is the server API for APIKeyVault service.
type APIKeyVaultServer interface {
	// List API keys.
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(context.Context, *APIKeyRequest) (*types.Empty, error)
}

// UnimplementedAPIKeyVaultServer can be embedded to have forward compatible implementations.
type UnimplementedAPIKeyVaultServer struct {
}

func (*UnimplementedAPIKeyVaultServer) ListAPIKeys(ctx context.Context, req *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedAPIKeyVaultServer) CreateAPIKey(ctx context.Context, req *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedAPIKeyVaultServer) DeleteAPIKey(ctx context.Context, req *APIKeyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}

func RegisterAPIKeyVaultServer(s *grpc.Server, srv APIKeyVaultServer) {
	s.RegisterService(&_APIKeyVault_serviceDesc, srv)
}

func _APIKeyVault_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyVaultServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.APIKeyVault/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyVaultServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyVault_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyVaultServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.APIKeyVault/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyVaultServer).CreateAPIKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIKeyVault_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIKeyVaultServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v1.APIKeyVault/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIKeyVaultServer).DeleteAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _APIKeyVault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v1.APIKeyVault",
	HandlerType: (*APIKeyVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeys",
			Handler:    _APIKeyVault_ListAPIKeys_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _APIKeyVault_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _APIKeyVault_DeleteAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v1/service.proto",
}

func (m *DevAddrBlocksValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevAddrBlocksValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevAddrBlocksValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListNetworksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNetworksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListNetworksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNetworksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Networks) > 0 {
		for iNdEx := len(m.Networks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Networks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNetworkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNetworkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContactInfoValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactInfoValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactInfoValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DevAddrBlocks != nil {
		{
			size, err := m.DevAddrBlocks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTenantsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTenantsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTenantsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTenantsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTenantsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTenantsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tenants) > 0 {
		for iNdEx := len(m.Tenants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tenants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateTenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tenant != nil {
		{
			size, err := m.Tenant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTenantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTenantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTenantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tenant != nil {
		{
			size, err := m.Tenant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTenantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tenant != nil {
		{
			size, err := m.Tenant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DevAddrBlocks != nil {
		{
			size, err := m.DevAddrBlocks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAPIKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAPIKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAPIKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAPIKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAPIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *APIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintService(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAPIKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAPIKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAPIKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDevAddrBlocksValue(r randyService, easy bool) *DevAddrBlocksValue {
	this := &DevAddrBlocksValue{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Value = make([]*v3.DevAddrBlock, v1)
		for i := 0; i < v1; i++ {
			this.Value[i] = v3.NewPopulatedDevAddrBlock(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListNetworksRequest(r randyService, easy bool) *ListNetworksRequest {
	this := &ListNetworksRequest{}
	this.Offset = uint32(r.Uint32())
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListNetworksResponse(r randyService, easy bool) *ListNetworksResponse {
	this := &ListNetworksResponse{}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Networks = make([]*v3.Network, v2)
		for i := 0; i < v2; i++ {
			this.Networks[i] = v3.NewPopulatedNetwork(r, easy)
		}
	}
	this.Total = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateNetworkRequest(r randyService, easy bool) *CreateNetworkRequest {
	this := &CreateNetworkRequest{}
	if r.Intn(5) != 0 {
		this.Network = v3.NewPopulatedNetwork(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateNetworkResponse(r randyService, easy bool) *CreateNetworkResponse {
	this := &CreateNetworkResponse{}
	if r.Intn(5) != 0 {
		this.Network = v3.NewPopulatedNetwork(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetNetworkResponse(r randyService, easy bool) *GetNetworkResponse {
	this := &GetNetworkResponse{}
	if r.Intn(5) != 0 {
		this.Network = v3.NewPopulatedNetwork(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkRequest(r randyService, easy bool) *NetworkRequest {
	this := &NetworkRequest{}
	this.NetId = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContactInfoValue(r randyService, easy bool) *ContactInfoValue {
	this := &ContactInfoValue{}
	if r.Intn(5) != 0 {
		this.Value = v3.NewPopulatedContactInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateNetworkRequest(r randyService, easy bool) *UpdateNetworkRequest {
	this := &UpdateNetworkRequest{}
	this.NetId = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Name = types.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DevAddrBlocks = NewPopulatedDevAddrBlocksValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = NewPopulatedContactInfoValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = NewPopulatedContactInfoValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListTenantsRequest(r randyService, easy bool) *ListTenantsRequest {
	this := &ListTenantsRequest{}
	this.NetId = uint32(r.Uint32())
	this.Offset = uint32(r.Uint32())
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListTenantsResponse(r randyService, easy bool) *ListTenantsResponse {
	this := &ListTenantsResponse{}
	if r.Intn(5) != 0 {
		i3 := r.Intn(5)
		this.Tenants = make([]*v3.Tenant, i3)
		for i := 0; i < i3; i++ {
			this.Tenants[i] = v3.NewPopulatedTenant(r, easy)
		}
	}
	this.Total = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateTenantRequest(r randyService, easy bool) *CreateTenantRequest {
	this := &CreateTenantRequest{}
	if r.Intn(5) != 0 {
		this.Tenant = v3.NewPopulatedTenant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateTenantResponse(r randyService, easy bool) *CreateTenantResponse {
	this := &CreateTenantResponse{}
	if r.Intn(5) != 0 {
		this.Tenant = v3.NewPopulatedTenant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTenantRequest(r randyService, easy bool) *TenantRequest {
	this := &TenantRequest{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTenantResponse(r randyService, easy bool) *GetTenantResponse {
	this := &GetTenantResponse{}
	if r.Intn(5) != 0 {
		this.Tenant = v3.NewPopulatedTenant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateTenantRequest(r randyService, easy bool) *UpdateTenantRequest {
	this := &UpdateTenantRequest{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringService(r))
	if r.Intn(5) != 0 {
		this.Name = types.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DevAddrBlocks = NewPopulatedDevAddrBlocksValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = NewPopulatedContactInfoValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = NewPopulatedContactInfoValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListAPIKeysRequest(r randyService, easy bool) *ListAPIKeysRequest {
	this := &ListAPIKeysRequest{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringService(r))
	this.ClusterId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListAPIKeysResponse(r randyService, easy bool) *ListAPIKeysResponse {
	this := &ListAPIKeysResponse{}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.Keys = make([]*v3.NetworkAPIKey, v4)
		for i := 0; i < v4; i++ {
			this.Keys[i] = v3.NewPopulatedNetworkAPIKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateAPIKeyRequest(r randyService, easy bool) *CreateAPIKeyRequest {
	this := &CreateAPIKeyRequest{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringService(r))
	this.ClusterId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAPIKeyRequest(r randyService, easy bool) *APIKeyRequest {
	this := &APIKeyRequest{}
	this.KeyId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateAPIKeyResponse(r randyService, easy bool) *CreateAPIKeyResponse {
	this := &CreateAPIKeyResponse{}
	if r.Intn(5) != 0 {
		this.Key = v3.NewPopulatedNetworkAPIKey(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneService(r randyService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringService(r randyService) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneService(r)
	}
	return string(tmps)
}
func randUnrecognizedService(r randyService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldService(dAtA []byte, r randyService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateService(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DevAddrBlocksValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ListNetworksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	return n
}

func (m *ListNetworksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	return n
}

func (m *CreateNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateNetworkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetNetworkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *NetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	return n
}

func (m *ContactInfoValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.DevAddrBlocks != nil {
		l = m.DevAddrBlocks.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListTenantsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	if m.Offset != 0 {
		n += 1 + sovService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	return n
}

func (m *ListTenantsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tenants) > 0 {
		for _, e := range m.Tenants {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	return n
}

func (m *CreateTenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != nil {
		l = m.Tenant.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateTenantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != nil {
		l = m.Tenant.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *TenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetTenantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != nil {
		l = m.Tenant.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateTenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.DevAddrBlocks != nil {
		l = m.DevAddrBlocks.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListAPIKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListAPIKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *CreateAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *APIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateAPIKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DevAddrBlocksValue) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValue := "[]*DevAddrBlock{"
	for _, f := range this.Value {
		repeatedStringForValue += strings.Replace(fmt.Sprintf("%v", f), "DevAddrBlock", "v3.DevAddrBlock", 1) + ","
	}
	repeatedStringForValue += "}"
	s := strings.Join([]string{`&DevAddrBlocksValue{`,
		`Value:` + repeatedStringForValue + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNetworksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNetworksRequest{`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNetworksResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworks := "[]*Network{"
	for _, f := range this.Networks {
		repeatedStringForNetworks += strings.Replace(fmt.Sprintf("%v", f), "Network", "v3.Network", 1) + ","
	}
	repeatedStringForNetworks += "}"
	s := strings.Join([]string{`&ListNetworksResponse{`,
		`Networks:` + repeatedStringForNetworks + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNetworkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNetworkRequest{`,
		`Network:` + strings.Replace(fmt.Sprintf("%v", this.Network), "Network", "v3.Network", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNetworkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNetworkResponse{`,
		`Network:` + strings.Replace(fmt.Sprintf("%v", this.Network), "Network", "v3.Network", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetNetworkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNetworkResponse{`,
		`Network:` + strings.Replace(fmt.Sprintf("%v", this.Network), "Network", "v3.Network", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContactInfoValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContactInfoValue{`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "ContactInfo", "v3.ContactInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNetworkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateNetworkRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "StringValue", "types.StringValue", 1) + `,`,
		`DevAddrBlocks:` + strings.Replace(this.DevAddrBlocks.String(), "DevAddrBlocksValue", "DevAddrBlocksValue", 1) + `,`,
		`AdministrativeContact:` + strings.Replace(this.AdministrativeContact.String(), "ContactInfoValue", "ContactInfoValue", 1) + `,`,
		`TechnicalContact:` + strings.Replace(this.TechnicalContact.String(), "ContactInfoValue", "ContactInfoValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTenantsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTenantsRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTenantsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTenants := "[]*Tenant{"
	for _, f := range this.Tenants {
		repeatedStringForTenants += strings.Replace(fmt.Sprintf("%v", f), "Tenant", "v3.Tenant", 1) + ","
	}
	repeatedStringForTenants += "}"
	s := strings.Join([]string{`&ListTenantsResponse{`,
		`Tenants:` + repeatedStringForTenants + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTenantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTenantRequest{`,
		`Tenant:` + strings.Replace(fmt.Sprintf("%v", this.Tenant), "Tenant", "v3.Tenant", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTenantResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTenantResponse{`,
		`Tenant:` + strings.Replace(fmt.Sprintf("%v", this.Tenant), "Tenant", "v3.Tenant", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TenantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TenantRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTenantResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantResponse{`,
		`Tenant:` + strings.Replace(fmt.Sprintf("%v", this.Tenant), "Tenant", "v3.Tenant", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTenantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTenantRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "StringValue", "types.StringValue", 1) + `,`,
		`DevAddrBlocks:` + strings.Replace(this.DevAddrBlocks.String(), "DevAddrBlocksValue", "DevAddrBlocksValue", 1) + `,`,
		`AdministrativeContact:` + strings.Replace(this.AdministrativeContact.String(), "ContactInfoValue", "ContactInfoValue", 1) + `,`,
		`TechnicalContact:` + strings.Replace(this.TechnicalContact.String(), "ContactInfoValue", "ContactInfoValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListAPIKeysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListAPIKeysRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListAPIKeysResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeys := "[]*NetworkAPIKey{"
	for _, f := range this.Keys {
		repeatedStringForKeys += strings.Replace(fmt.Sprintf("%v", f), "NetworkAPIKey", "v3.NetworkAPIKey", 1) + ","
	}
	repeatedStringForKeys += "}"
	s := strings.Join([]string{`&ListAPIKeysResponse{`,
		`Keys:` + repeatedStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateAPIKeyRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIKeyRequest{`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateAPIKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateAPIKeyResponse{`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "NetworkAPIKey", "v3.NetworkAPIKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DevAddrBlocksValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrBlocksValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrBlocksValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &v3.DevAddrBlock{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNetworksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNetworksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &v3.Network{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &v3.Network{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &v3.Network{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &v3.Network{}
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactInfoValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactInfoValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactInfoValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &v3.ContactInfo{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &types.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DevAddrBlocks == nil {
				m.DevAddrBlocks = &DevAddrBlocksValue{}
			}
			if err := m.DevAddrBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &ContactInfoValue{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &ContactInfoValue{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTenantsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTenantsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTenantsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTenantsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTenantsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTenantsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenants = append(m.Tenants, &v3.Tenant{})
			if err := m.Tenants[len(m.Tenants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tenant == nil {
				m.Tenant = &v3.Tenant{}
			}
			if err := m.Tenant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTenantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTenantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTenantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tenant == nil {
				m.Tenant = &v3.Tenant{}
			}
			if err := m.Tenant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tenant == nil {
				m.Tenant = &v3.Tenant{}
			}
			if err := m.Tenant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &types.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DevAddrBlocks == nil {
				m.DevAddrBlocks = &DevAddrBlocksValue{}
			}
			if err := m.DevAddrBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &ContactInfoValue{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &ContactInfoValue{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAPIKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAPIKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAPIKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &v3.NetworkAPIKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAPIKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAPIKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAPIKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &v3.NetworkAPIKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
