// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v3/networks.proto

package packetbroker

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Network struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Name of the network.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr prefixes of the tenant.
	DevAddrBlocks []*DevAddrBlock `protobuf:"bytes,3,rep,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfo `protobuf:"bytes,4,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact     *ContactInfo `protobuf:"bytes,5,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Network) Reset()      { *m = Network{} }
func (*Network) ProtoMessage() {}
func (*Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{0}
}
func (m *Network) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Network.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Network.Merge(m, src)
}
func (m *Network) XXX_Size() int {
	return m.Size()
}
func (m *Network) XXX_DiscardUnknown() {
	xxx_messageInfo_Network.DiscardUnknown(m)
}

var xxx_messageInfo_Network proto.InternalMessageInfo

func (m *Network) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Network) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Network) GetDevAddrBlocks() []*DevAddrBlock {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *Network) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *Network) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

type Tenant struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Name of the tenant.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr prefixes of the tenant.
	DevAddrBlocks []*DevAddrBlock `protobuf:"bytes,5,rep,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfo `protobuf:"bytes,6,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact     *ContactInfo `protobuf:"bytes,7,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Tenant) Reset()      { *m = Tenant{} }
func (*Tenant) ProtoMessage() {}
func (*Tenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{1}
}
func (m *Tenant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tenant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenant.Merge(m, src)
}
func (m *Tenant) XXX_Size() int {
	return m.Size()
}
func (m *Tenant) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenant.DiscardUnknown(m)
}

var xxx_messageInfo_Tenant proto.InternalMessageInfo

func (m *Tenant) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Tenant) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Tenant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tenant) GetDevAddrBlocks() []*DevAddrBlock {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *Tenant) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *Tenant) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

type NetworkOrTenant struct {
	// Types that are valid to be assigned to Value:
	//	*NetworkOrTenant_Network
	//	*NetworkOrTenant_Tenant
	Value                isNetworkOrTenant_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NetworkOrTenant) Reset()      { *m = NetworkOrTenant{} }
func (*NetworkOrTenant) ProtoMessage() {}
func (*NetworkOrTenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{2}
}
func (m *NetworkOrTenant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkOrTenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkOrTenant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkOrTenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkOrTenant.Merge(m, src)
}
func (m *NetworkOrTenant) XXX_Size() int {
	return m.Size()
}
func (m *NetworkOrTenant) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkOrTenant.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkOrTenant proto.InternalMessageInfo

type isNetworkOrTenant_Value interface {
	isNetworkOrTenant_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NetworkOrTenant_Network struct {
	Network *Network `protobuf:"bytes,1,opt,name=network,proto3,oneof" json:"network,omitempty"`
}
type NetworkOrTenant_Tenant struct {
	Tenant *Tenant `protobuf:"bytes,2,opt,name=tenant,proto3,oneof" json:"tenant,omitempty"`
}

func (*NetworkOrTenant_Network) isNetworkOrTenant_Value() {}
func (*NetworkOrTenant_Tenant) isNetworkOrTenant_Value()  {}

func (m *NetworkOrTenant) GetValue() isNetworkOrTenant_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *NetworkOrTenant) GetNetwork() *Network {
	if x, ok := m.GetValue().(*NetworkOrTenant_Network); ok {
		return x.Network
	}
	return nil
}

func (m *NetworkOrTenant) GetTenant() *Tenant {
	if x, ok := m.GetValue().(*NetworkOrTenant_Tenant); ok {
		return x.Tenant
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NetworkOrTenant) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NetworkOrTenant_Network)(nil),
		(*NetworkOrTenant_Tenant)(nil),
	}
}

type DevAddrPrefix struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Significant bits of value.
	Length               uint32   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevAddrPrefix) Reset()      { *m = DevAddrPrefix{} }
func (*DevAddrPrefix) ProtoMessage() {}
func (*DevAddrPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{3}
}
func (m *DevAddrPrefix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevAddrPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevAddrPrefix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevAddrPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrPrefix.Merge(m, src)
}
func (m *DevAddrPrefix) XXX_Size() int {
	return m.Size()
}
func (m *DevAddrPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrPrefix proto.InternalMessageInfo

func (m *DevAddrPrefix) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DevAddrPrefix) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type DevAddrBlock struct {
	Prefix *DevAddrPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Cluster of the Home Network Member (optional).
	HomeNetworkClusterId string   `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevAddrBlock) Reset()      { *m = DevAddrBlock{} }
func (*DevAddrBlock) ProtoMessage() {}
func (*DevAddrBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{4}
}
func (m *DevAddrBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevAddrBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevAddrBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevAddrBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrBlock.Merge(m, src)
}
func (m *DevAddrBlock) XXX_Size() int {
	return m.Size()
}
func (m *DevAddrBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrBlock proto.InternalMessageInfo

func (m *DevAddrBlock) GetPrefix() *DevAddrPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *DevAddrBlock) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

type NetworkAPIKey struct {
	// Unique identifier of the API key.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member.
	ClusterId string `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Network rights.
	Rights []Right `protobuf:"varint,7,rep,packed,name=rights,proto3,enum=org.packetbroker.v3.Right" json:"rights,omitempty"`
	// Last authentication timestamp.
	AuthenticatedAt *types.Timestamp `protobuf:"bytes,5,opt,name=authenticated_at,json=authenticatedAt,proto3" json:"authenticated_at,omitempty"`
	// Secret key value.
	Key                  string   `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkAPIKey) Reset()      { *m = NetworkAPIKey{} }
func (*NetworkAPIKey) ProtoMessage() {}
func (*NetworkAPIKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{5}
}
func (m *NetworkAPIKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkAPIKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkAPIKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkAPIKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkAPIKey.Merge(m, src)
}
func (m *NetworkAPIKey) XXX_Size() int {
	return m.Size()
}
func (m *NetworkAPIKey) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkAPIKey.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkAPIKey proto.InternalMessageInfo

func (m *NetworkAPIKey) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *NetworkAPIKey) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *NetworkAPIKey) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *NetworkAPIKey) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NetworkAPIKey) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func (m *NetworkAPIKey) GetAuthenticatedAt() *types.Timestamp {
	if m != nil {
		return m.AuthenticatedAt
	}
	return nil
}

func (m *NetworkAPIKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*Network)(nil), "org.packetbroker.v3.Network")
	golang_proto.RegisterType((*Network)(nil), "org.packetbroker.v3.Network")
	proto.RegisterType((*Tenant)(nil), "org.packetbroker.v3.Tenant")
	golang_proto.RegisterType((*Tenant)(nil), "org.packetbroker.v3.Tenant")
	proto.RegisterType((*NetworkOrTenant)(nil), "org.packetbroker.v3.NetworkOrTenant")
	golang_proto.RegisterType((*NetworkOrTenant)(nil), "org.packetbroker.v3.NetworkOrTenant")
	proto.RegisterType((*DevAddrPrefix)(nil), "org.packetbroker.v3.DevAddrPrefix")
	golang_proto.RegisterType((*DevAddrPrefix)(nil), "org.packetbroker.v3.DevAddrPrefix")
	proto.RegisterType((*DevAddrBlock)(nil), "org.packetbroker.v3.DevAddrBlock")
	golang_proto.RegisterType((*DevAddrBlock)(nil), "org.packetbroker.v3.DevAddrBlock")
	proto.RegisterType((*NetworkAPIKey)(nil), "org.packetbroker.v3.NetworkAPIKey")
	golang_proto.RegisterType((*NetworkAPIKey)(nil), "org.packetbroker.v3.NetworkAPIKey")
}

func init() {
	proto.RegisterFile("packetbroker/api/v3/networks.proto", fileDescriptor_9961a18bcd231dc0)
}
func init() {
	golang_proto.RegisterFile("packetbroker/api/v3/networks.proto", fileDescriptor_9961a18bcd231dc0)
}

var fileDescriptor_9961a18bcd231dc0 = []byte{
	// 720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x3d, 0x4c, 0x1b, 0x4b,
	0x10, 0xde, 0xf5, 0xcf, 0x19, 0xaf, 0x9f, 0x1f, 0x7e, 0xfb, 0x80, 0x67, 0x99, 0x97, 0xc1, 0x5c,
	0x13, 0x57, 0x67, 0xc9, 0x08, 0x29, 0x4a, 0x94, 0x02, 0x48, 0x24, 0x9c, 0x28, 0x09, 0x3a, 0x21,
	0x45, 0x4a, 0x63, 0xad, 0xef, 0x16, 0xfb, 0x64, 0xfb, 0xce, 0x3a, 0xaf, 0x9d, 0xb8, 0x23, 0x4d,
	0x84, 0x94, 0x26, 0x65, 0x9a, 0x48, 0xe9, 0x42, 0x49, 0x49, 0x49, 0x49, 0x3a, 0x4a, 0x4a, 0x7c,
	0xd7, 0x50, 0x52, 0x52, 0x46, 0xbe, 0x5b, 0x13, 0x13, 0x1d, 0x28, 0x8a, 0x92, 0xee, 0x76, 0xe6,
	0x9b, 0x99, 0xfb, 0xbe, 0xfd, 0x76, 0x88, 0xda, 0x65, 0x46, 0x8b, 0x8b, 0xba, 0xeb, 0xb4, 0xb8,
	0x5b, 0x66, 0x5d, 0xab, 0x3c, 0x58, 0x29, 0xdb, 0x5c, 0xbc, 0x76, 0xdc, 0x56, 0x4f, 0xeb, 0xba,
	0x8e, 0x70, 0xe8, 0xbf, 0x8e, 0xdb, 0xd0, 0xa6, 0x71, 0xda, 0x60, 0xa5, 0xb0, 0xd4, 0x70, 0x9c,
	0x46, 0x9b, 0x97, 0x03, 0x48, 0xbd, 0xbf, 0x53, 0x16, 0x56, 0x87, 0xf7, 0x04, 0xeb, 0x74, 0xc3,
	0xaa, 0xc2, 0x72, 0x54, 0x67, 0xc3, 0xb1, 0x05, 0x33, 0x84, 0x84, 0x2c, 0x45, 0x41, 0xb8, 0xdd,
	0xef, 0xc8, 0xc9, 0xea, 0x97, 0x18, 0x49, 0x3d, 0x0f, 0x7f, 0x86, 0xce, 0x13, 0xc5, 0xe6, 0xa2,
	0x66, 0x99, 0x79, 0x5c, 0xc4, 0xa5, 0xac, 0x9e, 0xb4, 0xb9, 0xa8, 0x9a, 0x94, 0x92, 0x84, 0xcd,
	0x3a, 0x3c, 0x1f, 0x2b, 0xe2, 0x52, 0x5a, 0x0f, 0xbe, 0x69, 0x95, 0xcc, 0x9a, 0x7c, 0x50, 0x63,
	0xa6, 0xe9, 0xd6, 0xea, 0x6d, 0xc7, 0x68, 0xf5, 0xf2, 0xf1, 0x62, 0xbc, 0x94, 0xa9, 0x2c, 0x6b,
	0x11, 0x54, 0xb4, 0x47, 0x7c, 0xb0, 0x66, 0x9a, 0xee, 0xfa, 0x18, 0xa9, 0x67, 0xcd, 0xa9, 0x53,
	0x8f, 0xbe, 0x24, 0x0b, 0xcc, 0xec, 0x58, 0xb6, 0xd5, 0x13, 0x2e, 0x13, 0xd6, 0x80, 0xd7, 0x24,
	0x85, 0x7c, 0xa2, 0x88, 0x4b, 0x99, 0x4a, 0x31, 0xb2, 0xe3, 0x46, 0x88, 0xa9, 0xda, 0x3b, 0x8e,
	0x3e, 0x7f, 0xbd, 0x5e, 0xa6, 0xe8, 0x33, 0xf2, 0x8f, 0xe0, 0x46, 0xd3, 0xb6, 0x0c, 0xd6, 0xbe,
	0xea, 0x99, 0xfc, 0xc9, 0x9e, 0xb9, 0xab, 0x52, 0x19, 0x55, 0xbf, 0xc6, 0x88, 0xb2, 0xcd, 0x6d,
	0x66, 0x8b, 0x9b, 0x84, 0x5a, 0x24, 0x69, 0x11, 0x00, 0xc6, 0x99, 0x50, 0xad, 0x99, 0x30, 0x30,
	0xa5, 0x62, 0xe2, 0x76, 0x15, 0x93, 0xbf, 0x5d, 0x45, 0xe5, 0x0f, 0xa8, 0x98, 0xfa, 0x55, 0x15,
	0x9f, 0x24, 0x66, 0xe2, 0xb9, 0x84, 0xfa, 0x1e, 0x93, 0x59, 0xe9, 0xba, 0x17, 0xae, 0x14, 0xf5,
	0x1e, 0x49, 0xc9, 0x57, 0x11, 0xa8, 0x9a, 0xa9, 0xfc, 0x1f, 0xd9, 0x5e, 0x96, 0x6d, 0x22, 0x7d,
	0x02, 0xa7, 0xab, 0x44, 0x09, 0x65, 0x0e, 0x44, 0xcf, 0x54, 0x16, 0x23, 0x0b, 0xc3, 0x31, 0x9b,
	0x48, 0x97, 0xe0, 0xf5, 0x14, 0x49, 0x0e, 0x58, 0xbb, 0xcf, 0xd5, 0x87, 0x24, 0x2b, 0xa5, 0xdd,
	0x72, 0xf9, 0x8e, 0xf5, 0x86, 0xce, 0xc9, 0xcc, 0xe4, 0x7a, 0x83, 0x03, 0x5d, 0x20, 0x4a, 0x9b,
	0xdb, 0x0d, 0xd1, 0x0c, 0xc6, 0x64, 0x75, 0x79, 0x52, 0xdf, 0x62, 0xf2, 0xd7, 0xf4, 0xd5, 0xd0,
	0xfb, 0x44, 0xe9, 0x06, 0x8d, 0x24, 0x11, 0xf5, 0xb6, 0xdb, 0x0c, 0x47, 0xea, 0xb2, 0x82, 0xae,
	0x92, 0xff, 0x9a, 0x4e, 0x87, 0xd7, 0x24, 0xb7, 0x9a, 0xd1, 0xee, 0xf7, 0x04, 0x77, 0xbf, 0x3b,
	0x6a, 0x6e, 0x9c, 0x96, 0x22, 0x6c, 0x84, 0xc9, 0xaa, 0xa9, 0xbe, 0x8b, 0x91, 0xac, 0x0c, 0xae,
	0x6d, 0x55, 0x9f, 0xf2, 0xe1, 0xd8, 0xa3, 0x2d, 0x3e, 0x9c, 0x78, 0x34, 0xad, 0x27, 0x5b, 0x7c,
	0x58, 0x35, 0xa7, 0xac, 0x1b, 0xbb, 0xd1, 0xba, 0xf1, 0x1f, 0xac, 0x7b, 0x87, 0x90, 0xa9, 0xdf,
	0x08, 0x0d, 0x9c, 0x36, 0x26, 0xb3, 0x69, 0x85, 0x28, 0xae, 0xd5, 0x68, 0x8a, 0x5e, 0x3e, 0x55,
	0x8c, 0x97, 0xfe, 0xae, 0x14, 0x22, 0xe9, 0xea, 0x63, 0x88, 0x2e, 0x91, 0xf4, 0x31, 0xc9, 0xb1,
	0xbe, 0x68, 0x72, 0x5b, 0x58, 0x06, 0x13, 0xdc, 0xac, 0xb1, 0xc9, 0xd3, 0x2c, 0x68, 0xe1, 0xda,
	0xd3, 0x26, 0x6b, 0x4f, 0xdb, 0x9e, 0xac, 0x3d, 0x7d, 0xf6, 0x5a, 0xcd, 0x9a, 0xa0, 0x39, 0x12,
	0x6f, 0xf1, 0x61, 0x60, 0xf1, 0xb4, 0x3e, 0xfe, 0x5c, 0xff, 0x84, 0x8f, 0x47, 0x80, 0x4f, 0x46,
	0x80, 0x4f, 0x47, 0x80, 0xce, 0x46, 0x80, 0xce, 0x47, 0x80, 0x2e, 0x46, 0x80, 0x2e, 0x47, 0x80,
	0x77, 0x3d, 0xc0, 0x7b, 0x1e, 0xa0, 0x7d, 0x0f, 0xf0, 0x81, 0x07, 0xe8, 0xd0, 0x03, 0x74, 0xe4,
	0x01, 0x3a, 0xf6, 0x00, 0x9f, 0x78, 0x80, 0x4f, 0x3d, 0x40, 0x67, 0x1e, 0xe0, 0x73, 0x0f, 0xd0,
	0x85, 0x07, 0xf8, 0xd2, 0x03, 0xb4, 0xeb, 0x03, 0xda, 0xf3, 0x01, 0x7f, 0xf0, 0x01, 0x7d, 0xf4,
	0x01, 0x7f, 0xf6, 0x01, 0xed, 0xfb, 0x80, 0x0e, 0x7c, 0xc0, 0x87, 0x3e, 0xe0, 0x23, 0x1f, 0xf0,
	0xab, 0xbb, 0x0d, 0xe7, 0x3a, 0x63, 0xc7, 0x6d, 0xc8, 0x75, 0xfb, 0x60, 0x3a, 0x5e, 0x57, 0x02,
	0x5a, 0x2b, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xa7, 0x3a, 0xc7, 0x16, 0x06, 0x00, 0x00,
}

func (this *Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Network)
	if !ok {
		that2, ok := that.(Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.DevAddrBlocks) != len(that1.DevAddrBlocks) {
		return false
	}
	for i := range this.DevAddrBlocks {
		if !this.DevAddrBlocks[i].Equal(that1.DevAddrBlocks[i]) {
			return false
		}
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	return true
}
func (this *Tenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tenant)
	if !ok {
		that2, ok := that.(Tenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.DevAddrBlocks) != len(that1.DevAddrBlocks) {
		return false
	}
	for i := range this.DevAddrBlocks {
		if !this.DevAddrBlocks[i].Equal(that1.DevAddrBlocks[i]) {
			return false
		}
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	return true
}
func (this *NetworkOrTenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkOrTenant)
	if !ok {
		that2, ok := that.(NetworkOrTenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *NetworkOrTenant_Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkOrTenant_Network)
	if !ok {
		that2, ok := that.(NetworkOrTenant_Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Network.Equal(that1.Network) {
		return false
	}
	return true
}
func (this *NetworkOrTenant_Tenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkOrTenant_Tenant)
	if !ok {
		that2, ok := that.(NetworkOrTenant_Tenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tenant.Equal(that1.Tenant) {
		return false
	}
	return true
}
func (this *DevAddrPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevAddrPrefix)
	if !ok {
		that2, ok := that.(DevAddrPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	return true
}
func (this *DevAddrBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevAddrBlock)
	if !ok {
		that2, ok := that.(DevAddrBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	if this.HomeNetworkClusterId != that1.HomeNetworkClusterId {
		return false
	}
	return true
}
func (this *NetworkAPIKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkAPIKey)
	if !ok {
		that2, ok := that.(NetworkAPIKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	if !this.AuthenticatedAt.Equal(that1.AuthenticatedAt) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DevAddrBlocks) > 0 {
		for iNdEx := len(m.DevAddrBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevAddrBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DevAddrBlocks) > 0 {
		for iNdEx := len(m.DevAddrBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevAddrBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkOrTenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkOrTenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkOrTenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkOrTenant_Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkOrTenant_Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *NetworkOrTenant_Tenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkOrTenant_Tenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tenant != nil {
		{
			size, err := m.Tenant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DevAddrPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevAddrPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevAddrPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DevAddrBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevAddrBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevAddrBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HomeNetworkClusterId) > 0 {
		i -= len(m.HomeNetworkClusterId)
		copy(dAtA[i:], m.HomeNetworkClusterId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.HomeNetworkClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkAPIKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkAPIKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkAPIKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA9 := make([]byte, len(m.Rights)*10)
		var j8 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintNetworks(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x32
	}
	if m.AuthenticatedAt != nil {
		{
			size, err := m.AuthenticatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NetId != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworks(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedNetwork(r randyNetworks, easy bool) *Network {
	this := &Network{}
	this.NetId = uint32(r.Uint32())
	this.Name = string(randStringNetworks(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.DevAddrBlocks = make([]*DevAddrBlock, v1)
		for i := 0; i < v1; i++ {
			this.DevAddrBlocks[i] = NewPopulatedDevAddrBlock(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = NewPopulatedContactInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = NewPopulatedContactInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTenant(r randyNetworks, easy bool) *Tenant {
	this := &Tenant{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringNetworks(r))
	this.Name = string(randStringNetworks(r))
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.DevAddrBlocks = make([]*DevAddrBlock, v2)
		for i := 0; i < v2; i++ {
			this.DevAddrBlocks[i] = NewPopulatedDevAddrBlock(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = NewPopulatedContactInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = NewPopulatedContactInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkOrTenant(r randyNetworks, easy bool) *NetworkOrTenant {
	this := &NetworkOrTenant{}
	oneofNumber_Value := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_Value {
	case 1:
		this.Value = NewPopulatedNetworkOrTenant_Network(r, easy)
	case 2:
		this.Value = NewPopulatedNetworkOrTenant_Tenant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkOrTenant_Network(r randyNetworks, easy bool) *NetworkOrTenant_Network {
	this := &NetworkOrTenant_Network{}
	this.Network = NewPopulatedNetwork(r, easy)
	return this
}
func NewPopulatedNetworkOrTenant_Tenant(r randyNetworks, easy bool) *NetworkOrTenant_Tenant {
	this := &NetworkOrTenant_Tenant{}
	this.Tenant = NewPopulatedTenant(r, easy)
	return this
}
func NewPopulatedDevAddrPrefix(r randyNetworks, easy bool) *DevAddrPrefix {
	this := &DevAddrPrefix{}
	this.Value = uint32(r.Uint32())
	this.Length = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDevAddrBlock(r randyNetworks, easy bool) *DevAddrBlock {
	this := &DevAddrBlock{}
	if r.Intn(5) != 0 {
		this.Prefix = NewPopulatedDevAddrPrefix(r, easy)
	}
	this.HomeNetworkClusterId = string(randStringNetworks(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkAPIKey(r randyNetworks, easy bool) *NetworkAPIKey {
	this := &NetworkAPIKey{}
	this.KeyId = string(randStringNetworks(r))
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringNetworks(r))
	this.ClusterId = string(randStringNetworks(r))
	if r.Intn(5) != 0 {
		this.AuthenticatedAt = types.NewPopulatedTimestamp(r, easy)
	}
	this.Key = string(randStringNetworks(r))
	v3 := r.Intn(10)
	this.Rights = make([]Right, v3)
	for i := 0; i < v3; i++ {
		this.Rights[i] = Right([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyNetworks interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNetworks(r randyNetworks) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNetworks(r randyNetworks) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneNetworks(r)
	}
	return string(tmps)
}
func randUnrecognizedNetworks(r randyNetworks, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNetworks(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNetworks(dAtA []byte, r randyNetworks, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNetworks(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovNetworks(uint64(m.NetId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if len(m.DevAddrBlocks) > 0 {
		for _, e := range m.DevAddrBlocks {
			l = e.Size()
			n += 1 + l + sovNetworks(uint64(l))
		}
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *Tenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovNetworks(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if len(m.DevAddrBlocks) > 0 {
		for _, e := range m.DevAddrBlocks {
			l = e.Size()
			n += 1 + l + sovNetworks(uint64(l))
		}
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *NetworkOrTenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *NetworkOrTenant_Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}
func (m *NetworkOrTenant_Tenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != nil {
		l = m.Tenant.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}
func (m *DevAddrPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNetworks(uint64(m.Value))
	}
	if m.Length != 0 {
		n += 1 + sovNetworks(uint64(m.Length))
	}
	return n
}

func (m *DevAddrBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.HomeNetworkClusterId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *NetworkAPIKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.NetId != 0 {
		n += 1 + sovNetworks(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.AuthenticatedAt != nil {
		l = m.AuthenticatedAt.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovNetworks(uint64(e))
		}
		n += 1 + sovNetworks(uint64(l)) + l
	}
	return n
}

func sovNetworks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworks(x uint64) (n int) {
	return sovNetworks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Network) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevAddrBlocks := "[]*DevAddrBlock{"
	for _, f := range this.DevAddrBlocks {
		repeatedStringForDevAddrBlocks += strings.Replace(f.String(), "DevAddrBlock", "DevAddrBlock", 1) + ","
	}
	repeatedStringForDevAddrBlocks += "}"
	s := strings.Join([]string{`&Network{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DevAddrBlocks:` + repeatedStringForDevAddrBlocks + `,`,
		`AdministrativeContact:` + strings.Replace(fmt.Sprintf("%v", this.AdministrativeContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`TechnicalContact:` + strings.Replace(fmt.Sprintf("%v", this.TechnicalContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tenant) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevAddrBlocks := "[]*DevAddrBlock{"
	for _, f := range this.DevAddrBlocks {
		repeatedStringForDevAddrBlocks += strings.Replace(f.String(), "DevAddrBlock", "DevAddrBlock", 1) + ","
	}
	repeatedStringForDevAddrBlocks += "}"
	s := strings.Join([]string{`&Tenant{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DevAddrBlocks:` + repeatedStringForDevAddrBlocks + `,`,
		`AdministrativeContact:` + strings.Replace(fmt.Sprintf("%v", this.AdministrativeContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`TechnicalContact:` + strings.Replace(fmt.Sprintf("%v", this.TechnicalContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkOrTenant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkOrTenant{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkOrTenant_Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkOrTenant_Network{`,
		`Network:` + strings.Replace(fmt.Sprintf("%v", this.Network), "Network", "Network", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkOrTenant_Tenant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkOrTenant_Tenant{`,
		`Tenant:` + strings.Replace(fmt.Sprintf("%v", this.Tenant), "Tenant", "Tenant", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevAddrPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevAddrPrefix{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevAddrBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevAddrBlock{`,
		`Prefix:` + strings.Replace(this.Prefix.String(), "DevAddrPrefix", "DevAddrPrefix", 1) + `,`,
		`HomeNetworkClusterId:` + fmt.Sprintf("%v", this.HomeNetworkClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkAPIKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkAPIKey{`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`AuthenticatedAt:` + strings.Replace(fmt.Sprintf("%v", this.AuthenticatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNetworks(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddrBlocks = append(m.DevAddrBlocks, &DevAddrBlock{})
			if err := m.DevAddrBlocks[len(m.DevAddrBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &ContactInfo{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &ContactInfo{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddrBlocks = append(m.DevAddrBlocks, &DevAddrBlock{})
			if err := m.DevAddrBlocks[len(m.DevAddrBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &ContactInfo{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &ContactInfo{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkOrTenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkOrTenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkOrTenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Network{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &NetworkOrTenant_Network{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Tenant{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &NetworkOrTenant_Tenant{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevAddrPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevAddrBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &DevAddrPrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkAPIKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkAPIKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkAPIKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticatedAt == nil {
				m.AuthenticatedAt = &types.Timestamp{}
			}
			if err := m.AuthenticatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Right(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNetworks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNetworks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Rights) == 0 {
					m.Rights = make([]Right, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetworks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Right(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworks = fmt.Errorf("proto: unexpected end of group")
)
