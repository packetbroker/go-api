// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mappingpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GatewayVisibilityManagerClient is the client API for GatewayVisibilityManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayVisibilityManagerClient interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(ctx context.Context, in *SetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(ctx context.Context, in *SetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gatewayVisibilityManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayVisibilityManagerClient(cc grpc.ClientConnInterface) GatewayVisibilityManagerClient {
	return &gatewayVisibilityManagerClient{cc}
}

func (c *gatewayVisibilityManagerClient) GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetDefaultVisibility(ctx context.Context, in *SetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetHomeNetworkVisibility(ctx context.Context, in *SetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayVisibilityManagerServer is the server API for GatewayVisibilityManager service.
// All implementations must embed UnimplementedGatewayVisibilityManagerServer
// for forward compatibility
type GatewayVisibilityManagerServer interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(context.Context, *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(context.Context, *SetDefaultGatewayVisibilityRequest) (*empty.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(context.Context, *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(context.Context, *SetHomeNetworkGatewayVisibilityRequest) (*empty.Empty, error)
	mustEmbedUnimplementedGatewayVisibilityManagerServer()
}

// UnimplementedGatewayVisibilityManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayVisibilityManagerServer struct {
}

func (UnimplementedGatewayVisibilityManagerServer) GetDefaultVisibility(context.Context, *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVisibility not implemented")
}
func (UnimplementedGatewayVisibilityManagerServer) SetDefaultVisibility(context.Context, *SetDefaultGatewayVisibilityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVisibility not implemented")
}
func (UnimplementedGatewayVisibilityManagerServer) GetHomeNetworkVisibility(context.Context, *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkVisibility not implemented")
}
func (UnimplementedGatewayVisibilityManagerServer) SetHomeNetworkVisibility(context.Context, *SetHomeNetworkGatewayVisibilityRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkVisibility not implemented")
}
func (UnimplementedGatewayVisibilityManagerServer) mustEmbedUnimplementedGatewayVisibilityManagerServer() {
}

// UnsafeGatewayVisibilityManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayVisibilityManagerServer will
// result in compilation errors.
type UnsafeGatewayVisibilityManagerServer interface {
	mustEmbedUnimplementedGatewayVisibilityManagerServer()
}

func RegisterGatewayVisibilityManagerServer(s grpc.ServiceRegistrar, srv GatewayVisibilityManagerServer) {
	s.RegisterService(&_GatewayVisibilityManager_serviceDesc, srv)
}

func _GatewayVisibilityManager_GetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, req.(*GetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, req.(*SetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, req.(*GetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, req.(*SetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayVisibilityManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v1.GatewayVisibilityManager",
	HandlerType: (*GatewayVisibilityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_GetDefaultVisibility_Handler,
		},
		{
			MethodName: "SetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_SetDefaultVisibility_Handler,
		},
		{
			MethodName: "GetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler,
		},
		{
			MethodName: "SetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v1/service.proto",
}

// ForwarderMapperClient is the client API for ForwarderMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwarderMapperClient interface {
	// Update a gateway.
	UpdateGateway(ctx context.Context, in *UpdateForwarderGatewayRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type forwarderMapperClient struct {
	cc grpc.ClientConnInterface
}

func NewForwarderMapperClient(cc grpc.ClientConnInterface) ForwarderMapperClient {
	return &forwarderMapperClient{cc}
}

func (c *forwarderMapperClient) UpdateGateway(ctx context.Context, in *UpdateForwarderGatewayRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.ForwarderMapper/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwarderMapperServer is the server API for ForwarderMapper service.
// All implementations must embed UnimplementedForwarderMapperServer
// for forward compatibility
type ForwarderMapperServer interface {
	// Update a gateway.
	UpdateGateway(context.Context, *UpdateForwarderGatewayRequest) (*empty.Empty, error)
	mustEmbedUnimplementedForwarderMapperServer()
}

// UnimplementedForwarderMapperServer must be embedded to have forward compatible implementations.
type UnimplementedForwarderMapperServer struct {
}

func (UnimplementedForwarderMapperServer) UpdateGateway(context.Context, *UpdateForwarderGatewayRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}
func (UnimplementedForwarderMapperServer) mustEmbedUnimplementedForwarderMapperServer() {}

// UnsafeForwarderMapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwarderMapperServer will
// result in compilation errors.
type UnsafeForwarderMapperServer interface {
	mustEmbedUnimplementedForwarderMapperServer()
}

func RegisterForwarderMapperServer(s grpc.ServiceRegistrar, srv ForwarderMapperServer) {
	s.RegisterService(&_ForwarderMapper_serviceDesc, srv)
}

func _ForwarderMapper_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForwarderGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderMapperServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.ForwarderMapper/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderMapperServer).UpdateGateway(ctx, req.(*UpdateForwarderGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForwarderMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v1.ForwarderMapper",
	HandlerType: (*ForwarderMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGateway",
			Handler:    _ForwarderMapper_UpdateGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v1/service.proto",
}

// HomeNetworkMapperClient is the client API for HomeNetworkMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomeNetworkMapperClient interface {
	// List gateways.
	// This rpc sets the total number of gateways in the x-total-count header.
	ListGateways(ctx context.Context, in *ListHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// Get a gateway.
	GetGateway(ctx context.Context, in *GetHomeNetworkGatewayRequest, opts ...grpc.CallOption) (*v3.Gateway, error)
	// Subscribe to gateway updates.
	SubscribeGateway(ctx context.Context, in *SubscribeHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (HomeNetworkMapper_SubscribeGatewayClient, error)
}

type homeNetworkMapperClient struct {
	cc grpc.ClientConnInterface
}

func NewHomeNetworkMapperClient(cc grpc.ClientConnInterface) HomeNetworkMapperClient {
	return &homeNetworkMapperClient{cc}
}

func (c *homeNetworkMapperClient) ListGateways(ctx context.Context, in *ListHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.HomeNetworkMapper/ListGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkMapperClient) GetGateway(ctx context.Context, in *GetHomeNetworkGatewayRequest, opts ...grpc.CallOption) (*v3.Gateway, error) {
	out := new(v3.Gateway)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.HomeNetworkMapper/GetGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkMapperClient) SubscribeGateway(ctx context.Context, in *SubscribeHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (HomeNetworkMapper_SubscribeGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HomeNetworkMapper_serviceDesc.Streams[0], "/org.packetbroker.mapping.v1.HomeNetworkMapper/SubscribeGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeNetworkMapperSubscribeGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HomeNetworkMapper_SubscribeGatewayClient interface {
	Recv() (*v3.Gateway, error)
	grpc.ClientStream
}

type homeNetworkMapperSubscribeGatewayClient struct {
	grpc.ClientStream
}

func (x *homeNetworkMapperSubscribeGatewayClient) Recv() (*v3.Gateway, error) {
	m := new(v3.Gateway)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeNetworkMapperServer is the server API for HomeNetworkMapper service.
// All implementations must embed UnimplementedHomeNetworkMapperServer
// for forward compatibility
type HomeNetworkMapperServer interface {
	// List gateways.
	// This rpc sets the total number of gateways in the x-total-count header.
	ListGateways(context.Context, *ListHomeNetworkGatewaysRequest) (*ListGatewaysResponse, error)
	// Get a gateway.
	GetGateway(context.Context, *GetHomeNetworkGatewayRequest) (*v3.Gateway, error)
	// Subscribe to gateway updates.
	SubscribeGateway(*SubscribeHomeNetworkGatewaysRequest, HomeNetworkMapper_SubscribeGatewayServer) error
	mustEmbedUnimplementedHomeNetworkMapperServer()
}

// UnimplementedHomeNetworkMapperServer must be embedded to have forward compatible implementations.
type UnimplementedHomeNetworkMapperServer struct {
}

func (UnimplementedHomeNetworkMapperServer) ListGateways(context.Context, *ListHomeNetworkGatewaysRequest) (*ListGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateways not implemented")
}
func (UnimplementedHomeNetworkMapperServer) GetGateway(context.Context, *GetHomeNetworkGatewayRequest) (*v3.Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (UnimplementedHomeNetworkMapperServer) SubscribeGateway(*SubscribeHomeNetworkGatewaysRequest, HomeNetworkMapper_SubscribeGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGateway not implemented")
}
func (UnimplementedHomeNetworkMapperServer) mustEmbedUnimplementedHomeNetworkMapperServer() {}

// UnsafeHomeNetworkMapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomeNetworkMapperServer will
// result in compilation errors.
type UnsafeHomeNetworkMapperServer interface {
	mustEmbedUnimplementedHomeNetworkMapperServer()
}

func RegisterHomeNetworkMapperServer(s grpc.ServiceRegistrar, srv HomeNetworkMapperServer) {
	s.RegisterService(&_HomeNetworkMapper_serviceDesc, srv)
}

func _HomeNetworkMapper_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeNetworkGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkMapperServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.HomeNetworkMapper/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkMapperServer).ListGateways(ctx, req.(*ListHomeNetworkGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkMapper_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkMapperServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.HomeNetworkMapper/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkMapperServer).GetGateway(ctx, req.(*GetHomeNetworkGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkMapper_SubscribeGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeNetworkGatewaysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HomeNetworkMapperServer).SubscribeGateway(m, &homeNetworkMapperSubscribeGatewayServer{stream})
}

type HomeNetworkMapper_SubscribeGatewayServer interface {
	Send(*v3.Gateway) error
	grpc.ServerStream
}

type homeNetworkMapperSubscribeGatewayServer struct {
	grpc.ServerStream
}

func (x *homeNetworkMapperSubscribeGatewayServer) Send(m *v3.Gateway) error {
	return x.ServerStream.SendMsg(m)
}

var _HomeNetworkMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v1.HomeNetworkMapper",
	HandlerType: (*HomeNetworkMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGateways",
			Handler:    _HomeNetworkMapper_ListGateways_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _HomeNetworkMapper_GetGateway_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeGateway",
			Handler:       _HomeNetworkMapper_SubscribeGateway_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/mapping/v1/service.proto",
}
