// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/mapping/v2/service.proto

package mappingpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDefaultGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId    string   `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultGatewayVisibilityRequest) Reset()      { *m = GetDefaultGatewayVisibilityRequest{} }
func (*GetDefaultGatewayVisibilityRequest) ProtoMessage() {}
func (*GetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{0}
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

type GetHomeNetworkGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId  string   `protobuf:"bytes,4,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Reset() {
	*m = GetHomeNetworkGatewayVisibilityRequest{}
}
func (*GetHomeNetworkGatewayVisibilityRequest) ProtoMessage() {}
func (*GetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{1}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

type SetGatewayVisibilityRequest struct {
	Visibility           *v3.GatewayVisibility `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SetGatewayVisibilityRequest) Reset()      { *m = SetGatewayVisibilityRequest{} }
func (*SetGatewayVisibilityRequest) ProtoMessage() {}
func (*SetGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{2}
}
func (m *SetGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetGatewayVisibilityRequest.Merge(m, src)
}
func (m *SetGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetGatewayVisibilityRequest proto.InternalMessageInfo

func (m *SetGatewayVisibilityRequest) GetVisibility() *v3.GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type GetGatewayVisibilityResponse struct {
	Visibility           *v3.GatewayVisibility `protobuf:"bytes,1,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetGatewayVisibilityResponse) Reset()      { *m = GetGatewayVisibilityResponse{} }
func (*GetGatewayVisibilityResponse) ProtoMessage() {}
func (*GetGatewayVisibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{3}
}
func (m *GetGatewayVisibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGatewayVisibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGatewayVisibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGatewayVisibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayVisibilityResponse.Merge(m, src)
}
func (m *GetGatewayVisibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGatewayVisibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayVisibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayVisibilityResponse proto.InternalMessageInfo

func (m *GetGatewayVisibilityResponse) GetVisibility() *v3.GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type UpdateGatewayRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Forwarder cluster of the Forwarder Member (optional).
	ForwarderClusterId string `protobuf:"bytes,3,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Identifier of the gateway.
	ForwarderGatewayId *v3.GatewayIdentifier `protobuf:"bytes,4,opt,name=forwarder_gateway_id,json=forwarderGatewayId,proto3" json:"forwarder_gateway_id,omitempty"`
	// Gateway location.
	// This field gets updated when a value is set.
	GatewayLocation *v3.GatewayLocationValue `protobuf:"bytes,5,opt,name=gateway_location,json=gatewayLocation,proto3" json:"gateway_location,omitempty"`
	// Administrative contact.
	// This field gets updated when a value is set.
	AdministrativeContact *v3.ContactInfoValue `protobuf:"bytes,6,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	// This field gets updated when a value is set.
	TechnicalContact *v3.ContactInfoValue `protobuf:"bytes,7,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the gateway is online.
	// This field gets updated when a value is set.
	Online *types.BoolValue `protobuf:"bytes,8,opt,name=online,proto3" json:"online,omitempty"`
	// If the gateway is online, this value indicates the time-to-live for the online status. This value must be set when
	// the online field is set and true.
	// When the online status expires, the gateway will be offline.
	// To keep the gateway online, update online status before the status expires.
	OnlineTtl *types.Duration `protobuf:"bytes,9,opt,name=online_ttl,json=onlineTtl,proto3" json:"online_ttl,omitempty"`
	// Frequency plan of the gateway.
	// This field gets updated when a value is set.
	FrequencyPlan *v3.GatewayFrequencyPlan `protobuf:"bytes,10,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// Received packets rate (number of packets per hour).
	// This field gets updated when a value is set.
	RxRate *types.FloatValue `protobuf:"bytes,11,opt,name=rx_rate,json=rxRate,proto3" json:"rx_rate,omitempty"`
	// Transmitted packets rate (number of packets per hour).
	// This field gets updated when a value is set.
	TxRate               *types.FloatValue `protobuf:"bytes,12,opt,name=tx_rate,json=txRate,proto3" json:"tx_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateGatewayRequest) Reset()      { *m = UpdateGatewayRequest{} }
func (*UpdateGatewayRequest) ProtoMessage() {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{4}
}
func (m *UpdateGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGatewayRequest.Merge(m, src)
}
func (m *UpdateGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGatewayRequest proto.InternalMessageInfo

func (m *UpdateGatewayRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *UpdateGatewayRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *UpdateGatewayRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *UpdateGatewayRequest) GetForwarderGatewayId() *v3.GatewayIdentifier {
	if m != nil {
		return m.ForwarderGatewayId
	}
	return nil
}

func (m *UpdateGatewayRequest) GetGatewayLocation() *v3.GatewayLocationValue {
	if m != nil {
		return m.GatewayLocation
	}
	return nil
}

func (m *UpdateGatewayRequest) GetAdministrativeContact() *v3.ContactInfoValue {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *UpdateGatewayRequest) GetTechnicalContact() *v3.ContactInfoValue {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *UpdateGatewayRequest) GetOnline() *types.BoolValue {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *UpdateGatewayRequest) GetOnlineTtl() *types.Duration {
	if m != nil {
		return m.OnlineTtl
	}
	return nil
}

func (m *UpdateGatewayRequest) GetFrequencyPlan() *v3.GatewayFrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return nil
}

func (m *UpdateGatewayRequest) GetRxRate() *types.FloatValue {
	if m != nil {
		return m.RxRate
	}
	return nil
}

func (m *UpdateGatewayRequest) GetTxRate() *types.FloatValue {
	if m != nil {
		return m.TxRate
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.GetDefaultGatewayVisibilityRequest")
	golang_proto.RegisterType((*GetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.GetDefaultGatewayVisibilityRequest")
	proto.RegisterType((*GetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.GetHomeNetworkGatewayVisibilityRequest")
	golang_proto.RegisterType((*GetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.GetHomeNetworkGatewayVisibilityRequest")
	proto.RegisterType((*SetGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.SetGatewayVisibilityRequest")
	golang_proto.RegisterType((*SetGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.SetGatewayVisibilityRequest")
	proto.RegisterType((*GetGatewayVisibilityResponse)(nil), "org.packetbroker.mapping.v2.GetGatewayVisibilityResponse")
	golang_proto.RegisterType((*GetGatewayVisibilityResponse)(nil), "org.packetbroker.mapping.v2.GetGatewayVisibilityResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "org.packetbroker.mapping.v2.UpdateGatewayRequest")
	golang_proto.RegisterType((*UpdateGatewayRequest)(nil), "org.packetbroker.mapping.v2.UpdateGatewayRequest")
}

func init() {
	proto.RegisterFile("packetbroker/api/mapping/v2/service.proto", fileDescriptor_3c3a8864f8c52de4)
}
func init() {
	golang_proto.RegisterFile("packetbroker/api/mapping/v2/service.proto", fileDescriptor_3c3a8864f8c52de4)
}

var fileDescriptor_3c3a8864f8c52de4 = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x3b, 0x8c, 0x1b, 0x45,
	0x18, 0xde, 0x81, 0xe0, 0x70, 0x13, 0x2e, 0x5c, 0xe6, 0xcc, 0x69, 0xb1, 0xd1, 0x28, 0x58, 0x22,
	0xba, 0x48, 0xb0, 0x06, 0x9b, 0x22, 0x88, 0x02, 0x29, 0x17, 0xce, 0x58, 0x22, 0x51, 0xb4, 0x77,
	0x44, 0x28, 0x42, 0xb2, 0xc6, 0xbb, 0xff, 0xae, 0x57, 0xb7, 0x9e, 0x59, 0x66, 0xc7, 0x76, 0xae,
	0x41, 0x29, 0x53, 0x22, 0x2a, 0x44, 0x85, 0x10, 0x45, 0xca, 0x2b, 0x53, 0xa6, 0x4c, 0x99, 0x32,
	0x65, 0xbc, 0x2b, 0xa1, 0x94, 0x29, 0x53, 0x22, 0xef, 0xae, 0xd7, 0xf6, 0xf9, 0x75, 0x3c, 0xbb,
	0xf5, 0x7c, 0x8f, 0xff, 0x9f, 0xd7, 0x37, 0xc6, 0x57, 0x03, 0x66, 0x1d, 0x81, 0x6a, 0x4b, 0x71,
	0x04, 0xb2, 0xca, 0x02, 0xaf, 0xda, 0x65, 0x41, 0xe0, 0x71, 0xb7, 0xda, 0xaf, 0x55, 0x43, 0x90,
	0x7d, 0xcf, 0x02, 0x23, 0x90, 0x42, 0x09, 0x52, 0x16, 0xd2, 0x35, 0xa6, 0xe9, 0x46, 0x46, 0x35,
	0xfa, 0xb5, 0x52, 0xd9, 0x15, 0xc2, 0xf5, 0xa1, 0x9a, 0x50, 0xdb, 0x3d, 0xa7, 0x0a, 0xdd, 0x40,
	0x1d, 0xa7, 0xca, 0x12, 0x3d, 0x0d, 0xda, 0x3d, 0xc9, 0x94, 0x27, 0xf8, 0x32, 0x7c, 0x20, 0x59,
	0x10, 0x80, 0x0c, 0x33, 0xfc, 0xfd, 0xb9, 0x26, 0xfb, 0xf5, 0xaa, 0x25, 0xb8, 0x62, 0x96, 0x5a,
	0x45, 0x71, 0x99, 0x82, 0x01, 0xcb, 0xba, 0xa8, 0xfc, 0x80, 0x2b, 0x0d, 0x50, 0x37, 0xc0, 0x61,
	0x3d, 0x5f, 0x35, 0x52, 0xe8, 0x8e, 0x17, 0x7a, 0x6d, 0xcf, 0xf7, 0xd4, 0xb1, 0x09, 0xdf, 0xf7,
	0x20, 0x54, 0x64, 0x17, 0x6f, 0x39, 0x42, 0x0e, 0x98, 0xb4, 0x41, 0xb6, 0x38, 0xa8, 0x96, 0x67,
	0xeb, 0xe8, 0x32, 0xda, 0xdd, 0x34, 0x2f, 0xe6, 0xe3, 0xb7, 0x40, 0x35, 0x6d, 0x62, 0xe0, 0xed,
	0x09, 0x53, 0x01, 0x67, 0x3c, 0x21, 0xbf, 0x76, 0x19, 0xed, 0x6e, 0x98, 0x97, 0x72, 0xe8, 0x30,
	0x41, 0x9a, 0x76, 0xe5, 0x0f, 0x84, 0xaf, 0x34, 0x40, 0x7d, 0x25, 0xba, 0x70, 0x0b, 0xd4, 0x40,
	0xc8, 0xa3, 0xff, 0xbf, 0x09, 0xf2, 0x11, 0xde, 0xee, 0x88, 0x2e, 0x8c, 0x4c, 0x47, 0x1d, 0x8c,
	0xcd, 0x5f, 0x4f, 0xcc, 0xb7, 0x3a, 0x93, 0xde, 0x52, 0xfb, 0x3a, 0xde, 0x99, 0xa1, 0x4f, 0x2a,
	0x9c, 0x4b, 0x2a, 0x6c, 0x4f, 0x29, 0xf2, 0x89, 0x02, 0x2e, 0x1f, 0xc0, 0xf2, 0x15, 0xde, 0xc7,
	0xb8, 0x9f, 0x0f, 0x26, 0x95, 0x2f, 0xd4, 0xae, 0x18, 0x73, 0x87, 0xab, 0x5f, 0x37, 0xe6, 0x2d,
	0xa6, 0x94, 0x15, 0x07, 0xbf, 0xd7, 0x58, 0x58, 0x26, 0x0c, 0x04, 0x0f, 0xe1, 0x54, 0x1d, 0xf4,
	0xb7, 0xeb, 0x9c, 0x14, 0x70, 0xf1, 0x9b, 0xc0, 0x66, 0x0a, 0x32, 0xde, 0x7f, 0xbf, 0x4b, 0x1f,
	0xe3, 0xe2, 0x84, 0x6f, 0xf9, 0xbd, 0x50, 0x81, 0x1c, 0x6f, 0xd3, 0x86, 0x49, 0x72, 0x6c, 0x2f,
	0x85, 0x9a, 0x36, 0xf9, 0x76, 0x5a, 0x91, 0x9d, 0xfb, 0xf1, 0x36, 0xad, 0x99, 0x76, 0xd3, 0x06,
	0xae, 0x3c, 0xc7, 0x03, 0x39, 0xe5, 0x9c, 0x63, 0xe4, 0x10, 0x6f, 0x8d, 0xfd, 0x7c, 0x61, 0x25,
	0xd7, 0x56, 0x7f, 0x23, 0x71, 0xbd, 0xba, 0xca, 0xf5, 0xeb, 0x8c, 0x7b, 0x87, 0xf9, 0x3d, 0x30,
	0xdf, 0x76, 0x67, 0x47, 0xc9, 0x77, 0x78, 0x87, 0xd9, 0x5d, 0x8f, 0x7b, 0xa1, 0x1a, 0x45, 0x41,
	0x1f, 0x5a, 0xd9, 0x7d, 0xd6, 0x0b, 0x89, 0xf7, 0x07, 0x0b, 0xbd, 0xf7, 0x52, 0x4e, 0x93, 0x3b,
	0x22, 0xf5, 0x7d, 0x67, 0xd6, 0x24, 0xc3, 0x89, 0x89, 0x2f, 0x29, 0xb0, 0x3a, 0xdc, 0xb3, 0x98,
	0x9f, 0x1b, 0x9f, 0xff, 0x2b, 0xc6, 0x5b, 0xb9, 0x7e, 0xec, 0x59, 0xc3, 0x05, 0xc1, 0x7d, 0x8f,
	0x83, 0xfe, 0x66, 0x62, 0x54, 0x32, 0xd2, 0xd4, 0x32, 0xc6, 0xa9, 0x65, 0x5c, 0x17, 0xc2, 0x4f,
	0xd5, 0x19, 0x93, 0x5c, 0xc3, 0x38, 0xfd, 0x6a, 0x29, 0xe5, 0xeb, 0x1b, 0x89, 0xee, 0xdd, 0x39,
	0xdd, 0x8d, 0x2c, 0x0d, 0xcd, 0x8d, 0x94, 0x7c, 0xa8, 0x7c, 0x72, 0x1b, 0x5f, 0x74, 0xe4, 0xe8,
	0x9c, 0x71, 0xeb, 0xb8, 0x15, 0xf8, 0x8c, 0xeb, 0x78, 0xfd, 0x9a, 0xef, 0x8f, 0x15, 0xb7, 0x7d,
	0xc6, 0xcd, 0x4d, 0x67, 0xfa, 0x27, 0xf9, 0x14, 0x9f, 0x97, 0xf7, 0x5a, 0x92, 0x29, 0xd0, 0x2f,
	0x24, 0x56, 0xe5, 0xb9, 0x46, 0xf6, 0x7d, 0xc1, 0x54, 0x36, 0x03, 0x79, 0xcf, 0x64, 0x0a, 0x46,
	0x2a, 0x95, 0xa9, 0xde, 0x3a, 0x83, 0x4a, 0x25, 0xaa, 0xda, 0xef, 0xe7, 0xb0, 0x3e, 0x77, 0xa9,
	0x6e, 0x32, 0xce, 0x5c, 0x90, 0xe4, 0x27, 0x84, 0x8b, 0x93, 0x20, 0x9e, 0xe0, 0xe4, 0x0b, 0x63,
	0xc5, 0x0b, 0x63, 0xac, 0xcf, 0xee, 0xd2, 0x67, 0xeb, 0x0c, 0x96, 0x87, 0x45, 0x07, 0x17, 0x0f,
	0x16, 0xf5, 0x74, 0x6d, 0xa5, 0xe5, 0x8a, 0x98, 0x2b, 0xed, 0xcc, 0x2d, 0xd4, 0x97, 0xa3, 0x27,
	0x91, 0xfc, 0x82, 0xb0, 0x3e, 0xfb, 0x0c, 0x4c, 0x95, 0xdb, 0x5b, 0x37, 0x83, 0x33, 0xbc, 0x1e,
	0xff, 0x64, 0x19, 0x7c, 0xac, 0x1f, 0x2c, 0xeb, 0xed, 0x5f, 0x5f, 0x8a, 0x9a, 0x8d, 0x0b, 0x37,
	0x93, 0x87, 0x9e, 0xdc, 0xc5, 0x9b, 0x33, 0x11, 0x4b, 0x3e, 0x59, 0x59, 0x6c, 0x51, 0x1c, 0x2f,
	0xab, 0x72, 0xfd, 0x37, 0xf4, 0x64, 0x48, 0xd1, 0xd3, 0x21, 0x45, 0xcf, 0x86, 0x54, 0x7b, 0x3e,
	0xa4, 0xda, 0x8b, 0x21, 0xd5, 0x5e, 0x0e, 0xa9, 0xf6, 0x6a, 0x48, 0xd1, 0xfd, 0x88, 0xa2, 0x07,
	0x11, 0xd5, 0x1e, 0x46, 0x14, 0x9d, 0x44, 0x54, 0x7b, 0x14, 0x51, 0xed, 0x71, 0x44, 0xb5, 0x27,
	0x11, 0x45, 0x4f, 0x23, 0x8a, 0x9e, 0x45, 0x54, 0x7b, 0x1e, 0x51, 0xf4, 0x22, 0xa2, 0xda, 0xcb,
	0x88, 0xa2, 0x57, 0x11, 0xd5, 0xee, 0xc7, 0x54, 0x7b, 0x10, 0x53, 0xf4, 0x63, 0x4c, 0xb5, 0x9f,
	0x63, 0x8a, 0x7e, 0x8d, 0xa9, 0xf6, 0x30, 0xa6, 0xda, 0x49, 0x4c, 0xd1, 0xa3, 0x98, 0xa2, 0xc7,
	0x31, 0x45, 0x77, 0x3f, 0x74, 0xc5, 0x6c, 0xff, 0x42, 0xba, 0xa7, 0xfe, 0x60, 0x7d, 0x9e, 0x7d,
	0x06, 0xed, 0x76, 0x21, 0x69, 0xba, 0xfe, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0xdd, 0xe9,
	0xbb, 0x90, 0x09, 0x00, 0x00,
}

func (this *GetDefaultGatewayVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDefaultGatewayVisibilityRequest)
	if !ok {
		that2, ok := that.(GetDefaultGatewayVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	return true
}
func (this *GetHomeNetworkGatewayVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHomeNetworkGatewayVisibilityRequest)
	if !ok {
		that2, ok := that.(GetHomeNetworkGatewayVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if this.HomeNetworkTenantId != that1.HomeNetworkTenantId {
		return false
	}
	return true
}
func (this *SetGatewayVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetGatewayVisibilityRequest)
	if !ok {
		that2, ok := that.(SetGatewayVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Visibility.Equal(that1.Visibility) {
		return false
	}
	return true
}
func (this *GetGatewayVisibilityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayVisibilityResponse)
	if !ok {
		that2, ok := that.(GetGatewayVisibilityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Visibility.Equal(that1.Visibility) {
		return false
	}
	return true
}
func (this *UpdateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if !this.ForwarderGatewayId.Equal(that1.ForwarderGatewayId) {
		return false
	}
	if !this.GatewayLocation.Equal(that1.GatewayLocation) {
		return false
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	if !this.Online.Equal(that1.Online) {
		return false
	}
	if !this.OnlineTtl.Equal(that1.OnlineTtl) {
		return false
	}
	if !this.FrequencyPlan.Equal(that1.FrequencyPlan) {
		return false
	}
	if !this.RxRate.Equal(that1.RxRate) {
		return false
	}
	if !this.TxRate.Equal(that1.TxRate) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayVisibilityManagerClient is the client API for GatewayVisibilityManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayVisibilityManagerClient interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type gatewayVisibilityManagerClient struct {
	cc *grpc.ClientConn
}

func NewGatewayVisibilityManagerClient(cc *grpc.ClientConn) GatewayVisibilityManagerClient {
	return &gatewayVisibilityManagerClient{cc}
}

func (c *gatewayVisibilityManagerClient) GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetDefaultVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetHomeNetworkVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayVisibilityManagerServer is the server API for GatewayVisibilityManager service.
type GatewayVisibilityManagerServer interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(context.Context, *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(context.Context, *SetGatewayVisibilityRequest) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(context.Context, *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(context.Context, *SetGatewayVisibilityRequest) (*types.Empty, error)
}

// UnimplementedGatewayVisibilityManagerServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayVisibilityManagerServer struct {
}

func (*UnimplementedGatewayVisibilityManagerServer) GetDefaultVisibility(ctx context.Context, req *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetDefaultVisibility(ctx context.Context, req *SetGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) GetHomeNetworkVisibility(ctx context.Context, req *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetHomeNetworkVisibility(ctx context.Context, req *SetGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkVisibility not implemented")
}

func RegisterGatewayVisibilityManagerServer(s *grpc.Server, srv GatewayVisibilityManagerServer) {
	s.RegisterService(&_GatewayVisibilityManager_serviceDesc, srv)
}

func _GatewayVisibilityManager_GetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, req.(*GetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, req.(*SetGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, req.(*GetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, req.(*SetGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayVisibilityManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v2.GatewayVisibilityManager",
	HandlerType: (*GatewayVisibilityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_GetDefaultVisibility_Handler,
		},
		{
			MethodName: "SetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_SetDefaultVisibility_Handler,
		},
		{
			MethodName: "GetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler,
		},
		{
			MethodName: "SetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v2/service.proto",
}

// MapperClient is the client API for Mapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapperClient interface {
	// Update a gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type mapperClient struct {
	cc *grpc.ClientConn
}

func NewMapperClient(cc *grpc.ClientConn) MapperClient {
	return &mapperClient{cc}
}

func (c *mapperClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.Mapper/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapperServer is the server API for Mapper service.
type MapperServer interface {
	// Update a gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*types.Empty, error)
}

// UnimplementedMapperServer can be embedded to have forward compatible implementations.
type UnimplementedMapperServer struct {
}

func (*UnimplementedMapperServer) UpdateGateway(ctx context.Context, req *UpdateGatewayRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}

func RegisterMapperServer(s *grpc.Server, srv MapperServer) {
	s.RegisterService(&_Mapper_serviceDesc, srv)
}

func _Mapper_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.Mapper/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v2.Mapper",
	HandlerType: (*MapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGateway",
			Handler:    _Mapper_UpdateGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v2/service.proto",
}

func (m *GetDefaultGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDefaultGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDefaultGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHomeNetworkGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHomeNetworkGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HomeNetworkTenantId) > 0 {
		i -= len(m.HomeNetworkTenantId)
		copy(dAtA[i:], m.HomeNetworkTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.HomeNetworkTenantId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *GetGatewayVisibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayVisibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGatewayVisibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxRate != nil {
		{
			size, err := m.TxRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RxRate != nil {
		{
			size, err := m.RxRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.FrequencyPlan != nil {
		{
			size, err := m.FrequencyPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.OnlineTtl != nil {
		{
			size, err := m.OnlineTtl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Online != nil {
		{
			size, err := m.Online.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.GatewayLocation != nil {
		{
			size, err := m.GatewayLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ForwarderGatewayId != nil {
		{
			size, err := m.ForwarderGatewayId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGetDefaultGatewayVisibilityRequest(r randyService, easy bool) *GetDefaultGatewayVisibilityRequest {
	this := &GetDefaultGatewayVisibilityRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderTenantId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetHomeNetworkGatewayVisibilityRequest(r randyService, easy bool) *GetHomeNetworkGatewayVisibilityRequest {
	this := &GetHomeNetworkGatewayVisibilityRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderTenantId = string(randStringService(r))
	this.HomeNetworkNetId = uint32(r.Uint32())
	this.HomeNetworkTenantId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetGatewayVisibilityRequest(r randyService, easy bool) *SetGatewayVisibilityRequest {
	this := &SetGatewayVisibilityRequest{}
	if r.Intn(5) != 0 {
		this.Visibility = v3.NewPopulatedGatewayVisibility(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGatewayVisibilityResponse(r randyService, easy bool) *GetGatewayVisibilityResponse {
	this := &GetGatewayVisibilityResponse{}
	if r.Intn(5) != 0 {
		this.Visibility = v3.NewPopulatedGatewayVisibility(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateGatewayRequest(r randyService, easy bool) *UpdateGatewayRequest {
	this := &UpdateGatewayRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderTenantId = string(randStringService(r))
	this.ForwarderClusterId = string(randStringService(r))
	if r.Intn(5) != 0 {
		this.ForwarderGatewayId = v3.NewPopulatedGatewayIdentifier(r, easy)
	}
	if r.Intn(5) != 0 {
		this.GatewayLocation = v3.NewPopulatedGatewayLocationValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = v3.NewPopulatedContactInfoValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = v3.NewPopulatedContactInfoValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Online = types.NewPopulatedBoolValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.OnlineTtl = types.NewPopulatedDuration(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FrequencyPlan = v3.NewPopulatedGatewayFrequencyPlan(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RxRate = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TxRate = types.NewPopulatedFloatValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneService(r randyService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringService(r randyService) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneService(r)
	}
	return string(tmps)
}
func randUnrecognizedService(r randyService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldService(dAtA []byte, r randyService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateService(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetDefaultGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	l = len(m.HomeNetworkTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SetGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetGatewayVisibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ForwarderGatewayId != nil {
		l = m.ForwarderGatewayId.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.GatewayLocation != nil {
		l = m.GatewayLocation.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Online != nil {
		l = m.Online.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.OnlineTtl != nil {
		l = m.OnlineTtl.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.FrequencyPlan != nil {
		l = m.FrequencyPlan.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.RxRate != nil {
		l = m.RxRate.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.TxRate != nil {
		l = m.TxRate.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDefaultGatewayVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDefaultGatewayVisibilityRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHomeNetworkGatewayVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHomeNetworkGatewayVisibilityRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`HomeNetworkTenantId:` + fmt.Sprintf("%v", this.HomeNetworkTenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetGatewayVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetGatewayVisibilityRequest{`,
		`Visibility:` + strings.Replace(fmt.Sprintf("%v", this.Visibility), "GatewayVisibility", "v3.GatewayVisibility", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayVisibilityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayVisibilityResponse{`,
		`Visibility:` + strings.Replace(fmt.Sprintf("%v", this.Visibility), "GatewayVisibility", "v3.GatewayVisibility", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGatewayRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`ForwarderGatewayId:` + strings.Replace(fmt.Sprintf("%v", this.ForwarderGatewayId), "GatewayIdentifier", "v3.GatewayIdentifier", 1) + `,`,
		`GatewayLocation:` + strings.Replace(fmt.Sprintf("%v", this.GatewayLocation), "GatewayLocationValue", "v3.GatewayLocationValue", 1) + `,`,
		`AdministrativeContact:` + strings.Replace(fmt.Sprintf("%v", this.AdministrativeContact), "ContactInfoValue", "v3.ContactInfoValue", 1) + `,`,
		`TechnicalContact:` + strings.Replace(fmt.Sprintf("%v", this.TechnicalContact), "ContactInfoValue", "v3.ContactInfoValue", 1) + `,`,
		`Online:` + strings.Replace(fmt.Sprintf("%v", this.Online), "BoolValue", "types.BoolValue", 1) + `,`,
		`OnlineTtl:` + strings.Replace(fmt.Sprintf("%v", this.OnlineTtl), "Duration", "types.Duration", 1) + `,`,
		`FrequencyPlan:` + strings.Replace(fmt.Sprintf("%v", this.FrequencyPlan), "GatewayFrequencyPlan", "v3.GatewayFrequencyPlan", 1) + `,`,
		`RxRate:` + strings.Replace(fmt.Sprintf("%v", this.RxRate), "FloatValue", "types.FloatValue", 1) + `,`,
		`TxRate:` + strings.Replace(fmt.Sprintf("%v", this.TxRate), "FloatValue", "types.FloatValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDefaultGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHomeNetworkGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &v3.GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayVisibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayVisibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayVisibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &v3.GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderGatewayId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwarderGatewayId == nil {
				m.ForwarderGatewayId = &v3.GatewayIdentifier{}
			}
			if err := m.ForwarderGatewayId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayLocation == nil {
				m.GatewayLocation = &v3.GatewayLocationValue{}
			}
			if err := m.GatewayLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &v3.ContactInfoValue{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &v3.ContactInfoValue{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Online == nil {
				m.Online = &types.BoolValue{}
			}
			if err := m.Online.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineTtl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnlineTtl == nil {
				m.OnlineTtl = &types.Duration{}
			}
			if err := m.OnlineTtl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrequencyPlan == nil {
				m.FrequencyPlan = &v3.GatewayFrequencyPlan{}
			}
			if err := m.FrequencyPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxRate == nil {
				m.RxRate = &types.FloatValue{}
			}
			if err := m.RxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxRate == nil {
				m.TxRate = &types.FloatValue{}
			}
			if err := m.TxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
