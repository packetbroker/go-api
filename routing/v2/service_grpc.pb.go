// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package routingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// Returns the routes for uplink messages.
	ListUplinkRoutes(ctx context.Context, in *ListUplinkRoutesRequest, opts ...grpc.CallOption) (*ListUplinkRoutesResponse, error)
	// Returns the routes for join-requests.
	ListJoinRequestRoutes(ctx context.Context, in *ListJoinRequestRoutesRequest, opts ...grpc.CallOption) (*ListJoinRequestRoutesResponse, error)
	// Returns the network targets.
	ListNetworkTargets(ctx context.Context, in *ListNetworkTargetsRequest, opts ...grpc.CallOption) (*ListNetworkTargetsResponse, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) ListUplinkRoutes(ctx context.Context, in *ListUplinkRoutesRequest, opts ...grpc.CallOption) (*ListUplinkRoutesResponse, error) {
	out := new(ListUplinkRoutesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v2.Routes/ListUplinkRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) ListJoinRequestRoutes(ctx context.Context, in *ListJoinRequestRoutesRequest, opts ...grpc.CallOption) (*ListJoinRequestRoutesResponse, error) {
	out := new(ListJoinRequestRoutesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v2.Routes/ListJoinRequestRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) ListNetworkTargets(ctx context.Context, in *ListNetworkTargetsRequest, opts ...grpc.CallOption) (*ListNetworkTargetsResponse, error) {
	out := new(ListNetworkTargetsResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v2.Routes/ListNetworkTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// Returns the routes for uplink messages.
	ListUplinkRoutes(context.Context, *ListUplinkRoutesRequest) (*ListUplinkRoutesResponse, error)
	// Returns the routes for join-requests.
	ListJoinRequestRoutes(context.Context, *ListJoinRequestRoutesRequest) (*ListJoinRequestRoutesResponse, error)
	// Returns the network targets.
	ListNetworkTargets(context.Context, *ListNetworkTargetsRequest) (*ListNetworkTargetsResponse, error)
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) ListUplinkRoutes(context.Context, *ListUplinkRoutesRequest) (*ListUplinkRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUplinkRoutes not implemented")
}
func (UnimplementedRoutesServer) ListJoinRequestRoutes(context.Context, *ListJoinRequestRoutesRequest) (*ListJoinRequestRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJoinRequestRoutes not implemented")
}
func (UnimplementedRoutesServer) ListNetworkTargets(context.Context, *ListNetworkTargetsRequest) (*ListNetworkTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkTargets not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_ListUplinkRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUplinkRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListUplinkRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v2.Routes/ListUplinkRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListUplinkRoutes(ctx, req.(*ListUplinkRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_ListJoinRequestRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJoinRequestRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListJoinRequestRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v2.Routes/ListJoinRequestRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListJoinRequestRoutes(ctx, req.(*ListJoinRequestRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_ListNetworkTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListNetworkTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v2.Routes/ListNetworkTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListNetworkTargets(ctx, req.(*ListNetworkTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v2.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUplinkRoutes",
			Handler:    _Routes_ListUplinkRoutes_Handler,
		},
		{
			MethodName: "ListJoinRequestRoutes",
			Handler:    _Routes_ListJoinRequestRoutes_Handler,
		},
		{
			MethodName: "ListNetworkTargets",
			Handler:    _Routes_ListNetworkTargets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v2/service.proto",
}
