// Copyright Â© 2021 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: packetbroker/api/routing/v2/service.proto

package routingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Routes_ListUplinkRoutes_FullMethodName          = "/org.packetbroker.routing.v2.Routes/ListUplinkRoutes"
	Routes_ListJoinRequestRoutes_FullMethodName     = "/org.packetbroker.routing.v2.Routes/ListJoinRequestRoutes"
	Routes_ListNetworkServerClusters_FullMethodName = "/org.packetbroker.routing.v2.Routes/ListNetworkServerClusters"
)

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// Returns the routes for uplink messages.
	ListUplinkRoutes(ctx context.Context, in *ListUplinkRoutesRequest, opts ...grpc.CallOption) (*ListUplinkRoutesResponse, error)
	// Returns the routes for join-requests.
	ListJoinRequestRoutes(ctx context.Context, in *ListJoinRequestRoutesRequest, opts ...grpc.CallOption) (*ListJoinRequestRoutesResponse, error)
	// Returns the Network Server clusters.
	ListNetworkServerClusters(ctx context.Context, in *ListNetworkServerClustersRequest, opts ...grpc.CallOption) (*ListNetworkServerClustersResponse, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) ListUplinkRoutes(ctx context.Context, in *ListUplinkRoutesRequest, opts ...grpc.CallOption) (*ListUplinkRoutesResponse, error) {
	out := new(ListUplinkRoutesResponse)
	err := c.cc.Invoke(ctx, Routes_ListUplinkRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) ListJoinRequestRoutes(ctx context.Context, in *ListJoinRequestRoutesRequest, opts ...grpc.CallOption) (*ListJoinRequestRoutesResponse, error) {
	out := new(ListJoinRequestRoutesResponse)
	err := c.cc.Invoke(ctx, Routes_ListJoinRequestRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) ListNetworkServerClusters(ctx context.Context, in *ListNetworkServerClustersRequest, opts ...grpc.CallOption) (*ListNetworkServerClustersResponse, error) {
	out := new(ListNetworkServerClustersResponse)
	err := c.cc.Invoke(ctx, Routes_ListNetworkServerClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// Returns the routes for uplink messages.
	ListUplinkRoutes(context.Context, *ListUplinkRoutesRequest) (*ListUplinkRoutesResponse, error)
	// Returns the routes for join-requests.
	ListJoinRequestRoutes(context.Context, *ListJoinRequestRoutesRequest) (*ListJoinRequestRoutesResponse, error)
	// Returns the Network Server clusters.
	ListNetworkServerClusters(context.Context, *ListNetworkServerClustersRequest) (*ListNetworkServerClustersResponse, error)
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) ListUplinkRoutes(context.Context, *ListUplinkRoutesRequest) (*ListUplinkRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUplinkRoutes not implemented")
}
func (UnimplementedRoutesServer) ListJoinRequestRoutes(context.Context, *ListJoinRequestRoutesRequest) (*ListJoinRequestRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJoinRequestRoutes not implemented")
}
func (UnimplementedRoutesServer) ListNetworkServerClusters(context.Context, *ListNetworkServerClustersRequest) (*ListNetworkServerClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkServerClusters not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_ListUplinkRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUplinkRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListUplinkRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_ListUplinkRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListUplinkRoutes(ctx, req.(*ListUplinkRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_ListJoinRequestRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJoinRequestRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListJoinRequestRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_ListJoinRequestRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListJoinRequestRoutes(ctx, req.(*ListJoinRequestRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_ListNetworkServerClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkServerClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListNetworkServerClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_ListNetworkServerClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListNetworkServerClusters(ctx, req.(*ListNetworkServerClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v2.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUplinkRoutes",
			Handler:    _Routes_ListUplinkRoutes_Handler,
		},
		{
			MethodName: "ListJoinRequestRoutes",
			Handler:    _Routes_ListJoinRequestRoutes_Handler,
		},
		{
			MethodName: "ListNetworkServerClusters",
			Handler:    _Routes_ListNetworkServerClusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v2/service.proto",
}

const (
	Publisher_Subscribe_FullMethodName = "/org.packetbroker.routing.v2.Publisher/Subscribe"
)

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	// Subscribe to topics and receive messages.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Publisher_SubscribeClient, error)
}

type publisherClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherClient(cc grpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Publisher_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Publisher_ServiceDesc.Streams[0], Publisher_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherSubscribeClient{stream}
	return x, nil
}

type Publisher_SubscribeClient interface {
	Send(*TopicSubscriptionsChange) error
	Recv() (*TopicMessage, error)
	grpc.ClientStream
}

type publisherSubscribeClient struct {
	grpc.ClientStream
}

func (x *publisherSubscribeClient) Send(m *TopicSubscriptionsChange) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publisherSubscribeClient) Recv() (*TopicMessage, error) {
	m := new(TopicMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations must embed UnimplementedPublisherServer
// for forward compatibility
type PublisherServer interface {
	// Subscribe to topics and receive messages.
	Subscribe(Publisher_SubscribeServer) error
	mustEmbedUnimplementedPublisherServer()
}

// UnimplementedPublisherServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherServer struct {
}

func (UnimplementedPublisherServer) Subscribe(Publisher_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPublisherServer) mustEmbedUnimplementedPublisherServer() {}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s grpc.ServiceRegistrar, srv PublisherServer) {
	s.RegisterService(&Publisher_ServiceDesc, srv)
}

func _Publisher_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublisherServer).Subscribe(&publisherSubscribeServer{stream})
}

type Publisher_SubscribeServer interface {
	Send(*TopicMessage) error
	Recv() (*TopicSubscriptionsChange, error)
	grpc.ServerStream
}

type publisherSubscribeServer struct {
	grpc.ServerStream
}

func (x *publisherSubscribeServer) Send(m *TopicMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publisherSubscribeServer) Recv() (*TopicSubscriptionsChange, error) {
	m := new(TopicSubscriptionsChange)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Publisher_ServiceDesc is the grpc.ServiceDesc for Publisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v2.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Publisher_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "packetbroker/api/routing/v2/service.proto",
}
