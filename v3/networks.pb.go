// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v3/networks.proto

package packetbroker

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Network struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Name of the network.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr prefixes of the tenant.
	DevAddrBlocks []*DevAddrBlock `protobuf:"bytes,3,rep,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfo `protobuf:"bytes,4,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact *ContactInfo `protobuf:"bytes,5,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the network is listed in the catalog.
	Listed bool `protobuf:"varint,6,opt,name=listed,proto3" json:"listed,omitempty"`
	// Optional target information.
	Target               *Target  `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Network) Reset()      { *m = Network{} }
func (*Network) ProtoMessage() {}
func (*Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{0}
}
func (m *Network) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Network.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Network.Merge(m, src)
}
func (m *Network) XXX_Size() int {
	return m.Size()
}
func (m *Network) XXX_DiscardUnknown() {
	xxx_messageInfo_Network.DiscardUnknown(m)
}

var xxx_messageInfo_Network proto.InternalMessageInfo

func (m *Network) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Network) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Network) GetDevAddrBlocks() []*DevAddrBlock {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *Network) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *Network) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *Network) GetListed() bool {
	if m != nil {
		return m.Listed
	}
	return false
}

func (m *Network) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type Tenant struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Name of the tenant.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr prefixes of the tenant.
	DevAddrBlocks []*DevAddrBlock `protobuf:"bytes,5,rep,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfo `protobuf:"bytes,6,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact *ContactInfo `protobuf:"bytes,7,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the tenant is listed in the catalog.
	Listed bool `protobuf:"varint,8,opt,name=listed,proto3" json:"listed,omitempty"`
	// Optional target information.
	Target               *Target  `protobuf:"bytes,9,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tenant) Reset()      { *m = Tenant{} }
func (*Tenant) ProtoMessage() {}
func (*Tenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{1}
}
func (m *Tenant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tenant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenant.Merge(m, src)
}
func (m *Tenant) XXX_Size() int {
	return m.Size()
}
func (m *Tenant) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenant.DiscardUnknown(m)
}

var xxx_messageInfo_Tenant proto.InternalMessageInfo

func (m *Tenant) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Tenant) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Tenant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tenant) GetDevAddrBlocks() []*DevAddrBlock {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *Tenant) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *Tenant) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *Tenant) GetListed() bool {
	if m != nil {
		return m.Listed
	}
	return false
}

func (m *Tenant) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type NetworkOrTenant struct {
	// Types that are valid to be assigned to Value:
	//	*NetworkOrTenant_Network
	//	*NetworkOrTenant_Tenant
	Value                isNetworkOrTenant_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NetworkOrTenant) Reset()      { *m = NetworkOrTenant{} }
func (*NetworkOrTenant) ProtoMessage() {}
func (*NetworkOrTenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{2}
}
func (m *NetworkOrTenant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkOrTenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkOrTenant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkOrTenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkOrTenant.Merge(m, src)
}
func (m *NetworkOrTenant) XXX_Size() int {
	return m.Size()
}
func (m *NetworkOrTenant) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkOrTenant.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkOrTenant proto.InternalMessageInfo

type isNetworkOrTenant_Value interface {
	isNetworkOrTenant_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type NetworkOrTenant_Network struct {
	Network *Network `protobuf:"bytes,1,opt,name=network,proto3,oneof" json:"network,omitempty"`
}
type NetworkOrTenant_Tenant struct {
	Tenant *Tenant `protobuf:"bytes,2,opt,name=tenant,proto3,oneof" json:"tenant,omitempty"`
}

func (*NetworkOrTenant_Network) isNetworkOrTenant_Value() {}
func (*NetworkOrTenant_Tenant) isNetworkOrTenant_Value()  {}

func (m *NetworkOrTenant) GetValue() isNetworkOrTenant_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *NetworkOrTenant) GetNetwork() *Network {
	if x, ok := m.GetValue().(*NetworkOrTenant_Network); ok {
		return x.Network
	}
	return nil
}

func (m *NetworkOrTenant) GetTenant() *Tenant {
	if x, ok := m.GetValue().(*NetworkOrTenant_Tenant); ok {
		return x.Tenant
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NetworkOrTenant) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NetworkOrTenant_Network)(nil),
		(*NetworkOrTenant_Tenant)(nil),
	}
}

type DevAddrPrefix struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Significant bits of value.
	Length               uint32   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevAddrPrefix) Reset()      { *m = DevAddrPrefix{} }
func (*DevAddrPrefix) ProtoMessage() {}
func (*DevAddrPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{3}
}
func (m *DevAddrPrefix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevAddrPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevAddrPrefix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevAddrPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrPrefix.Merge(m, src)
}
func (m *DevAddrPrefix) XXX_Size() int {
	return m.Size()
}
func (m *DevAddrPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrPrefix proto.InternalMessageInfo

func (m *DevAddrPrefix) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DevAddrPrefix) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type DevAddrBlock struct {
	Prefix *DevAddrPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Cluster of the Home Network Member (optional).
	HomeNetworkClusterId string   `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevAddrBlock) Reset()      { *m = DevAddrBlock{} }
func (*DevAddrBlock) ProtoMessage() {}
func (*DevAddrBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{4}
}
func (m *DevAddrBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevAddrBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevAddrBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevAddrBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrBlock.Merge(m, src)
}
func (m *DevAddrBlock) XXX_Size() int {
	return m.Size()
}
func (m *DevAddrBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrBlock proto.InternalMessageInfo

func (m *DevAddrBlock) GetPrefix() *DevAddrPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *DevAddrBlock) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

type NetworkAPIKey struct {
	// Unique identifier of the API key.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member.
	ClusterId string `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Network rights.
	Rights []Right `protobuf:"varint,7,rep,packed,name=rights,proto3,enum=org.packetbroker.v3.Right" json:"rights,omitempty"`
	// Last authentication timestamp.
	AuthenticatedAt *types.Timestamp `protobuf:"bytes,5,opt,name=authenticated_at,json=authenticatedAt,proto3" json:"authenticated_at,omitempty"`
	// Secret key value.
	Key string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	// Key state.
	State                APIKeyState `protobuf:"varint,8,opt,name=state,proto3,enum=org.packetbroker.v3.APIKeyState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NetworkAPIKey) Reset()      { *m = NetworkAPIKey{} }
func (*NetworkAPIKey) ProtoMessage() {}
func (*NetworkAPIKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{5}
}
func (m *NetworkAPIKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkAPIKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkAPIKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkAPIKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkAPIKey.Merge(m, src)
}
func (m *NetworkAPIKey) XXX_Size() int {
	return m.Size()
}
func (m *NetworkAPIKey) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkAPIKey.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkAPIKey proto.InternalMessageInfo

func (m *NetworkAPIKey) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *NetworkAPIKey) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *NetworkAPIKey) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *NetworkAPIKey) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NetworkAPIKey) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func (m *NetworkAPIKey) GetAuthenticatedAt() *types.Timestamp {
	if m != nil {
		return m.AuthenticatedAt
	}
	return nil
}

func (m *NetworkAPIKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NetworkAPIKey) GetState() APIKeyState {
	if m != nil {
		return m.State
	}
	return APIKeyState_REQUESTED
}

type Target struct {
	// Protocol to use.
	Protocol TargetProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=org.packetbroker.v3.TargetProtocol" json:"protocol,omitempty"`
	// Address of the target.
	// When using an HTTP protocol, this can be a URL with scheme, host, port and path.
	// This value may be empty if the protocol supports service lookup (e.g. via DNS).
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// PEM encoded root CAs to verify the server certificate.
	// This value may be empty to use the default trusted root certificates.
	RootCas []byte `protobuf:"bytes,6,opt,name=root_cas,json=rootCas,proto3" json:"root_cas,omitempty"`
	// Types that are valid to be assigned to Authorization:
	//	*Target_BasicAuth_
	//	*Target_CustomAuth_
	//	*Target_TlsClientAuth
	Authorization        isTarget_Authorization `protobuf_oneof:"authorization"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Target) Reset()      { *m = Target{} }
func (*Target) ProtoMessage() {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{6}
}
func (m *Target) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return m.Size()
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

type isTarget_Authorization interface {
	isTarget_Authorization()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Target_BasicAuth_ struct {
	BasicAuth *Target_BasicAuth `protobuf:"bytes,3,opt,name=basic_auth,json=basicAuth,proto3,oneof" json:"basic_auth,omitempty"`
}
type Target_CustomAuth_ struct {
	CustomAuth *Target_CustomAuth `protobuf:"bytes,4,opt,name=custom_auth,json=customAuth,proto3,oneof" json:"custom_auth,omitempty"`
}
type Target_TlsClientAuth struct {
	TlsClientAuth *Target_TLSClientAuth `protobuf:"bytes,5,opt,name=tls_client_auth,json=tlsClientAuth,proto3,oneof" json:"tls_client_auth,omitempty"`
}

func (*Target_BasicAuth_) isTarget_Authorization()    {}
func (*Target_CustomAuth_) isTarget_Authorization()   {}
func (*Target_TlsClientAuth) isTarget_Authorization() {}

func (m *Target) GetAuthorization() isTarget_Authorization {
	if m != nil {
		return m.Authorization
	}
	return nil
}

func (m *Target) GetProtocol() TargetProtocol {
	if m != nil {
		return m.Protocol
	}
	return TargetProtocol_TS002_V1_0
}

func (m *Target) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Target) GetRootCas() []byte {
	if m != nil {
		return m.RootCas
	}
	return nil
}

func (m *Target) GetBasicAuth() *Target_BasicAuth {
	if x, ok := m.GetAuthorization().(*Target_BasicAuth_); ok {
		return x.BasicAuth
	}
	return nil
}

func (m *Target) GetCustomAuth() *Target_CustomAuth {
	if x, ok := m.GetAuthorization().(*Target_CustomAuth_); ok {
		return x.CustomAuth
	}
	return nil
}

func (m *Target) GetTlsClientAuth() *Target_TLSClientAuth {
	if x, ok := m.GetAuthorization().(*Target_TlsClientAuth); ok {
		return x.TlsClientAuth
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Target) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Target_BasicAuth_)(nil),
		(*Target_CustomAuth_)(nil),
		(*Target_TlsClientAuth)(nil),
	}
}

type Target_BasicAuth struct {
	// Username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password.
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target_BasicAuth) Reset()      { *m = Target_BasicAuth{} }
func (*Target_BasicAuth) ProtoMessage() {}
func (*Target_BasicAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{6, 0}
}
func (m *Target_BasicAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target_BasicAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target_BasicAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target_BasicAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target_BasicAuth.Merge(m, src)
}
func (m *Target_BasicAuth) XXX_Size() int {
	return m.Size()
}
func (m *Target_BasicAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_Target_BasicAuth.DiscardUnknown(m)
}

var xxx_messageInfo_Target_BasicAuth proto.InternalMessageInfo

func (m *Target_BasicAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Target_BasicAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Target_CustomAuth struct {
	// Custom authorization value.
	// When using an HTTP protocol, this is used as the raw Authorization header value. That is, it may include the
	// authorization type (Bearer, Basic, Key, etc).
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target_CustomAuth) Reset()      { *m = Target_CustomAuth{} }
func (*Target_CustomAuth) ProtoMessage() {}
func (*Target_CustomAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{6, 1}
}
func (m *Target_CustomAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target_CustomAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target_CustomAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target_CustomAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target_CustomAuth.Merge(m, src)
}
func (m *Target_CustomAuth) XXX_Size() int {
	return m.Size()
}
func (m *Target_CustomAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_Target_CustomAuth.DiscardUnknown(m)
}

var xxx_messageInfo_Target_CustomAuth proto.InternalMessageInfo

func (m *Target_CustomAuth) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Target_TLSClientAuth struct {
	// PEM encoded client certificate.
	Cert []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// PEM encoded private key.
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target_TLSClientAuth) Reset()      { *m = Target_TLSClientAuth{} }
func (*Target_TLSClientAuth) ProtoMessage() {}
func (*Target_TLSClientAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{6, 2}
}
func (m *Target_TLSClientAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Target_TLSClientAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Target_TLSClientAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Target_TLSClientAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target_TLSClientAuth.Merge(m, src)
}
func (m *Target_TLSClientAuth) XXX_Size() int {
	return m.Size()
}
func (m *Target_TLSClientAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_Target_TLSClientAuth.DiscardUnknown(m)
}

var xxx_messageInfo_Target_TLSClientAuth proto.InternalMessageInfo

func (m *Target_TLSClientAuth) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *Target_TLSClientAuth) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type NetworkTarget struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Tenant ID assigned by the Member (optional).
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Target information.
	Target               *Target  `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkTarget) Reset()      { *m = NetworkTarget{} }
func (*NetworkTarget) ProtoMessage() {}
func (*NetworkTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_9961a18bcd231dc0, []int{7}
}
func (m *NetworkTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTarget.Merge(m, src)
}
func (m *NetworkTarget) XXX_Size() int {
	return m.Size()
}
func (m *NetworkTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTarget.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTarget proto.InternalMessageInfo

func (m *NetworkTarget) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *NetworkTarget) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *NetworkTarget) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func init() {
	proto.RegisterType((*Network)(nil), "org.packetbroker.v3.Network")
	golang_proto.RegisterType((*Network)(nil), "org.packetbroker.v3.Network")
	proto.RegisterType((*Tenant)(nil), "org.packetbroker.v3.Tenant")
	golang_proto.RegisterType((*Tenant)(nil), "org.packetbroker.v3.Tenant")
	proto.RegisterType((*NetworkOrTenant)(nil), "org.packetbroker.v3.NetworkOrTenant")
	golang_proto.RegisterType((*NetworkOrTenant)(nil), "org.packetbroker.v3.NetworkOrTenant")
	proto.RegisterType((*DevAddrPrefix)(nil), "org.packetbroker.v3.DevAddrPrefix")
	golang_proto.RegisterType((*DevAddrPrefix)(nil), "org.packetbroker.v3.DevAddrPrefix")
	proto.RegisterType((*DevAddrBlock)(nil), "org.packetbroker.v3.DevAddrBlock")
	golang_proto.RegisterType((*DevAddrBlock)(nil), "org.packetbroker.v3.DevAddrBlock")
	proto.RegisterType((*NetworkAPIKey)(nil), "org.packetbroker.v3.NetworkAPIKey")
	golang_proto.RegisterType((*NetworkAPIKey)(nil), "org.packetbroker.v3.NetworkAPIKey")
	proto.RegisterType((*Target)(nil), "org.packetbroker.v3.Target")
	golang_proto.RegisterType((*Target)(nil), "org.packetbroker.v3.Target")
	proto.RegisterType((*Target_BasicAuth)(nil), "org.packetbroker.v3.Target.BasicAuth")
	golang_proto.RegisterType((*Target_BasicAuth)(nil), "org.packetbroker.v3.Target.BasicAuth")
	proto.RegisterType((*Target_CustomAuth)(nil), "org.packetbroker.v3.Target.CustomAuth")
	golang_proto.RegisterType((*Target_CustomAuth)(nil), "org.packetbroker.v3.Target.CustomAuth")
	proto.RegisterType((*Target_TLSClientAuth)(nil), "org.packetbroker.v3.Target.TLSClientAuth")
	golang_proto.RegisterType((*Target_TLSClientAuth)(nil), "org.packetbroker.v3.Target.TLSClientAuth")
	proto.RegisterType((*NetworkTarget)(nil), "org.packetbroker.v3.NetworkTarget")
	golang_proto.RegisterType((*NetworkTarget)(nil), "org.packetbroker.v3.NetworkTarget")
}

func init() {
	proto.RegisterFile("packetbroker/api/v3/networks.proto", fileDescriptor_9961a18bcd231dc0)
}
func init() {
	golang_proto.RegisterFile("packetbroker/api/v3/networks.proto", fileDescriptor_9961a18bcd231dc0)
}

var fileDescriptor_9961a18bcd231dc0 = []byte{
	// 1012 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x3d, 0x8c, 0x1b, 0x45,
	0x14, 0xde, 0x39, 0xdb, 0x6b, 0xfb, 0xdd, 0xf9, 0xee, 0x18, 0x92, 0x60, 0x1c, 0x98, 0x38, 0x8b,
	0x00, 0xd3, 0xf8, 0x24, 0x9f, 0x0e, 0x21, 0x10, 0x42, 0x77, 0x06, 0x74, 0xe6, 0xf7, 0xb4, 0x77,
	0x12, 0x12, 0x8d, 0x35, 0xde, 0x9d, 0xb3, 0x57, 0x5e, 0xef, 0x58, 0x3b, 0x63, 0x27, 0x47, 0x15,
	0xba, 0x48, 0x34, 0x54, 0x40, 0x83, 0x44, 0x99, 0x32, 0x65, 0x2a, 0x94, 0x32, 0x65, 0xca, 0x94,
	0xf1, 0xba, 0x49, 0x99, 0x82, 0x22, 0x25, 0xda, 0xd9, 0x59, 0x9f, 0x0f, 0xd9, 0xd6, 0x09, 0x25,
	0xdd, 0xbe, 0x99, 0xef, 0x7d, 0xf3, 0x66, 0xbe, 0xef, 0x3d, 0x1b, 0xac, 0x21, 0x75, 0xfa, 0x4c,
	0x76, 0x42, 0xde, 0x67, 0xe1, 0x0e, 0x1d, 0x7a, 0x3b, 0xe3, 0xdd, 0x9d, 0x80, 0xc9, 0x5b, 0x3c,
	0xec, 0x8b, 0xfa, 0x30, 0xe4, 0x92, 0xe3, 0xd7, 0x79, 0xd8, 0xad, 0xcf, 0xe3, 0xea, 0xe3, 0xdd,
	0xca, 0x8d, 0x2e, 0xe7, 0x5d, 0x9f, 0xed, 0x28, 0x48, 0x67, 0x74, 0xba, 0x23, 0xbd, 0x01, 0x13,
	0x92, 0x0e, 0x86, 0x49, 0x56, 0xe5, 0xe6, 0x22, 0x66, 0x87, 0x07, 0x92, 0x3a, 0x52, 0x43, 0x6e,
	0x2c, 0x82, 0xb0, 0x60, 0x34, 0xd0, 0x27, 0x5b, 0xff, 0xac, 0x41, 0xfe, 0xbb, 0xa4, 0x18, 0x7c,
	0x15, 0xcc, 0x80, 0xc9, 0xb6, 0xe7, 0x96, 0x51, 0x15, 0xd5, 0x4a, 0x76, 0x2e, 0x60, 0xb2, 0xe5,
	0x62, 0x0c, 0xd9, 0x80, 0x0e, 0x58, 0x79, 0xad, 0x8a, 0x6a, 0x45, 0x5b, 0x7d, 0xe3, 0x16, 0x6c,
	0xb9, 0x6c, 0xdc, 0xa6, 0xae, 0x1b, 0xb6, 0x3b, 0x3e, 0x77, 0xfa, 0xa2, 0x9c, 0xa9, 0x66, 0x6a,
	0xeb, 0x8d, 0x9b, 0xf5, 0x05, 0x57, 0xa9, 0x7f, 0xce, 0xc6, 0xfb, 0xae, 0x1b, 0x1e, 0xc4, 0x48,
	0xbb, 0xe4, 0xce, 0x45, 0x02, 0xff, 0x00, 0xd7, 0xa8, 0x3b, 0xf0, 0x02, 0x4f, 0xc8, 0x90, 0x4a,
	0x6f, 0xcc, 0xda, 0xfa, 0x0a, 0xe5, 0x6c, 0x15, 0xd5, 0xd6, 0x1b, 0xd5, 0x85, 0x8c, 0xcd, 0x04,
	0xd3, 0x0a, 0x4e, 0xb9, 0x7d, 0xf5, 0x62, 0xbe, 0xde, 0xc2, 0xdf, 0xc2, 0x6b, 0x92, 0x39, 0xbd,
	0xc0, 0x73, 0xa8, 0x3f, 0xe3, 0xcc, 0x5d, 0x92, 0x73, 0x7b, 0x96, 0x9a, 0xd2, 0x5d, 0x03, 0xd3,
	0xf7, 0x84, 0x64, 0x6e, 0xd9, 0xac, 0xa2, 0x5a, 0xc1, 0xd6, 0x11, 0xde, 0x05, 0x53, 0xd2, 0xb0,
	0xcb, 0x64, 0x39, 0xaf, 0xb8, 0xaf, 0x2f, 0xe4, 0x3e, 0x51, 0x10, 0x5b, 0x43, 0xad, 0xdf, 0x32,
	0x60, 0x9e, 0xb0, 0x80, 0x06, 0x72, 0xd9, 0xab, 0x5f, 0x87, 0xa2, 0x54, 0x80, 0x78, 0x27, 0x79,
	0xfa, 0x42, 0xb2, 0x30, 0x27, 0x49, 0x76, 0xb5, 0x24, 0xb9, 0x97, 0x2e, 0x89, 0xf9, 0x0a, 0x24,
	0xc9, 0xbf, 0x04, 0x49, 0x0a, 0x4b, 0x24, 0x29, 0x5e, 0x5a, 0x92, 0xaf, 0xb2, 0x85, 0xcc, 0x76,
	0xd6, 0xfa, 0x05, 0xc1, 0x96, 0xee, 0x87, 0xef, 0x43, 0xad, 0xd0, 0x47, 0x90, 0xd7, 0xfd, 0xaa,
	0x24, 0x5a, 0x6f, 0xbc, 0xb5, 0x90, 0x4f, 0xa7, 0x1d, 0x1a, 0x76, 0x0a, 0xc7, 0x7b, 0x60, 0x26,
	0x9a, 0x29, 0x05, 0x97, 0x16, 0xa2, 0x20, 0x87, 0x86, 0xad, 0xc1, 0x07, 0x79, 0xc8, 0x8d, 0xa9,
	0x3f, 0x62, 0xd6, 0xa7, 0x50, 0xd2, 0x3a, 0x1d, 0x85, 0xec, 0xd4, 0xbb, 0x8d, 0xaf, 0xe8, 0x9d,
	0xd4, 0x2b, 0x2a, 0x50, 0xef, 0xc0, 0x82, 0xae, 0xec, 0xa9, 0x63, 0x4a, 0xb6, 0x8e, 0xac, 0x9f,
	0x11, 0x6c, 0xcc, 0xeb, 0x8c, 0x3f, 0x06, 0x73, 0xa8, 0x88, 0xf4, 0x45, 0xac, 0x55, 0xd6, 0x48,
	0x8e, 0xb4, 0x75, 0x06, 0xde, 0x83, 0x37, 0x7a, 0x7c, 0xc0, 0xda, 0xfa, 0x6e, 0x6d, 0xc7, 0x1f,
	0x09, 0xc9, 0xc2, 0x73, 0x7b, 0x5e, 0x89, 0xb7, 0xf5, 0x23, 0x34, 0x93, 0xcd, 0x96, 0x6b, 0xfd,
	0xbd, 0x06, 0x25, 0xbd, 0xb8, 0x7f, 0xd4, 0xfa, 0x9a, 0x9d, 0xc5, 0x86, 0xef, 0xb3, 0xb3, 0xd4,
	0xf0, 0x45, 0x3b, 0xd7, 0x67, 0x67, 0x2d, 0x77, 0xae, 0x0f, 0xd6, 0x96, 0xf6, 0x41, 0xe6, 0x3f,
	0x7d, 0xf0, 0x36, 0xc0, 0x5c, 0x19, 0x49, 0x37, 0x14, 0x9d, 0xf4, 0x6c, 0xdc, 0x00, 0x33, 0xf4,
	0xba, 0x3d, 0x29, 0xca, 0xf9, 0x6a, 0xa6, 0xb6, 0xd9, 0xa8, 0x2c, 0xbc, 0xae, 0x1d, 0x43, 0x6c,
	0x8d, 0xc4, 0x5f, 0xc0, 0x36, 0x1d, 0xc9, 0x1e, 0x0b, 0xa4, 0xe7, 0x50, 0xc9, 0xdc, 0x36, 0x4d,
	0x87, 0x46, 0xa5, 0x9e, 0x0c, 0xe4, 0x7a, 0x3a, 0x90, 0xeb, 0x27, 0xe9, 0x40, 0xb6, 0xb7, 0x2e,
	0xe4, 0xec, 0x4b, 0xbc, 0x0d, 0x99, 0x3e, 0x3b, 0x53, 0xfd, 0x52, 0xb4, 0xe3, 0x4f, 0xfc, 0x21,
	0xe4, 0x84, 0xa4, 0x92, 0x29, 0xaf, 0x6e, 0x2e, 0xf1, 0x7b, 0xf2, 0x44, 0xc7, 0x31, 0xce, 0x4e,
	0xe0, 0xd6, 0xef, 0x59, 0x30, 0x13, 0xab, 0xe2, 0xcf, 0xa0, 0xa0, 0xce, 0x76, 0xb8, 0xaf, 0xde,
	0x6e, 0xb3, 0xf1, 0xce, 0x0a, 0x67, 0x1f, 0x69, 0xa8, 0x3d, 0x4b, 0xc2, 0x65, 0xc8, 0xc7, 0xf3,
	0x81, 0x09, 0xa1, 0x35, 0x4b, 0x43, 0xfc, 0x26, 0x14, 0x42, 0xce, 0x65, 0xdb, 0xa1, 0x42, 0x15,
	0xbd, 0x61, 0xe7, 0xe3, 0xb8, 0x49, 0x05, 0xfe, 0x12, 0xa0, 0x43, 0x85, 0xe7, 0xb4, 0xe3, 0x3b,
	0x2a, 0x09, 0xd6, 0x1b, 0xef, 0xae, 0x38, 0xb7, 0x7e, 0x10, 0xa3, 0xf7, 0x47, 0xb2, 0x77, 0x68,
	0xd8, 0xc5, 0x4e, 0x1a, 0xe0, 0x16, 0xac, 0x3b, 0x23, 0x21, 0xf9, 0x20, 0x21, 0x4a, 0xa6, 0xfb,
	0x7b, 0xab, 0x88, 0x9a, 0x0a, 0xae, 0x99, 0xc0, 0x99, 0x45, 0xf8, 0x18, 0xb6, 0xa4, 0x2f, 0xda,
	0x8e, 0xef, 0xb1, 0x40, 0x26, 0x74, 0x89, 0x46, 0x1f, 0xac, 0xa2, 0x3b, 0xf9, 0xe6, 0xb8, 0xa9,
	0x32, 0x34, 0x63, 0x49, 0xfa, 0xe2, 0x7c, 0xa1, 0xd2, 0x84, 0xe2, 0xac, 0x72, 0x5c, 0x81, 0xc2,
	0x48, 0xb0, 0x50, 0x4d, 0xd9, 0xc4, 0xa6, 0xb3, 0x38, 0xde, 0x1b, 0x52, 0x21, 0x6e, 0xf1, 0x70,
	0x36, 0x99, 0xd3, 0xb8, 0x62, 0x01, 0x9c, 0x57, 0x7d, 0xb1, 0x5d, 0x8b, 0xba, 0x5d, 0x2b, 0x7b,
	0x50, 0xba, 0x50, 0x4a, 0x3c, 0xce, 0x1d, 0x16, 0x4a, 0x85, 0xda, 0xb0, 0xd5, 0x77, 0x6a, 0xa0,
	0x35, 0xb5, 0x14, 0x7f, 0x1e, 0x6c, 0x41, 0x29, 0xbe, 0x29, 0x0f, 0xbd, 0x9f, 0xa8, 0xf4, 0x78,
	0x60, 0xdd, 0x9e, 0x75, 0x96, 0xf6, 0xc7, 0xff, 0xf9, 0x29, 0x39, 0x9f, 0x95, 0x99, 0x4b, 0xcf,
	0xca, 0x83, 0x3f, 0xd1, 0xa3, 0x09, 0x41, 0x8f, 0x27, 0x04, 0x3d, 0x99, 0x10, 0xe3, 0xe9, 0x84,
	0x18, 0xcf, 0x26, 0xc4, 0x78, 0x3e, 0x21, 0xc6, 0x8b, 0x09, 0x41, 0x77, 0x22, 0x82, 0xee, 0x46,
	0xc4, 0xb8, 0x17, 0x11, 0x74, 0x3f, 0x22, 0xc6, 0x83, 0x88, 0x18, 0x0f, 0x23, 0x62, 0x3c, 0x8a,
	0x08, 0x7a, 0x1c, 0x11, 0xf4, 0x24, 0x22, 0xc6, 0xd3, 0x88, 0xa0, 0x67, 0x11, 0x31, 0x9e, 0x47,
	0x04, 0xbd, 0x88, 0x88, 0x71, 0x67, 0x4a, 0x8c, 0xbb, 0x53, 0x82, 0x7e, 0x9d, 0x12, 0xe3, 0x8f,
	0x29, 0x41, 0x7f, 0x4d, 0x89, 0x71, 0x6f, 0x4a, 0x8c, 0xfb, 0x53, 0x82, 0x1e, 0x4c, 0x09, 0x7a,
	0x38, 0x25, 0xe8, 0xc7, 0xf7, 0xbb, 0xfc, 0x62, 0x65, 0x3c, 0xec, 0xea, 0x3f, 0x35, 0x9f, 0xcc,
	0xaf, 0x77, 0x4c, 0xe5, 0xf8, 0xdd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x5c, 0xf5, 0x80,
	0x7c, 0x09, 0x00, 0x00,
}

func (this *Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Network)
	if !ok {
		that2, ok := that.(Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.DevAddrBlocks) != len(that1.DevAddrBlocks) {
		return false
	}
	for i := range this.DevAddrBlocks {
		if !this.DevAddrBlocks[i].Equal(that1.DevAddrBlocks[i]) {
			return false
		}
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	if this.Listed != that1.Listed {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (this *Tenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tenant)
	if !ok {
		that2, ok := that.(Tenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.DevAddrBlocks) != len(that1.DevAddrBlocks) {
		return false
	}
	for i := range this.DevAddrBlocks {
		if !this.DevAddrBlocks[i].Equal(that1.DevAddrBlocks[i]) {
			return false
		}
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	if this.Listed != that1.Listed {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (this *NetworkOrTenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkOrTenant)
	if !ok {
		that2, ok := that.(NetworkOrTenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *NetworkOrTenant_Network) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkOrTenant_Network)
	if !ok {
		that2, ok := that.(NetworkOrTenant_Network)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Network.Equal(that1.Network) {
		return false
	}
	return true
}
func (this *NetworkOrTenant_Tenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkOrTenant_Tenant)
	if !ok {
		that2, ok := that.(NetworkOrTenant_Tenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tenant.Equal(that1.Tenant) {
		return false
	}
	return true
}
func (this *DevAddrPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevAddrPrefix)
	if !ok {
		that2, ok := that.(DevAddrPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	return true
}
func (this *DevAddrBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevAddrBlock)
	if !ok {
		that2, ok := that.(DevAddrBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	if this.HomeNetworkClusterId != that1.HomeNetworkClusterId {
		return false
	}
	return true
}
func (this *NetworkAPIKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkAPIKey)
	if !ok {
		that2, ok := that.(NetworkAPIKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	if !this.AuthenticatedAt.Equal(that1.AuthenticatedAt) {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *Target) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target)
	if !ok {
		that2, ok := that.(Target)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !bytes.Equal(this.RootCas, that1.RootCas) {
		return false
	}
	if that1.Authorization == nil {
		if this.Authorization != nil {
			return false
		}
	} else if this.Authorization == nil {
		return false
	} else if !this.Authorization.Equal(that1.Authorization) {
		return false
	}
	return true
}
func (this *Target_BasicAuth_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_BasicAuth_)
	if !ok {
		that2, ok := that.(Target_BasicAuth_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicAuth.Equal(that1.BasicAuth) {
		return false
	}
	return true
}
func (this *Target_CustomAuth_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_CustomAuth_)
	if !ok {
		that2, ok := that.(Target_CustomAuth_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CustomAuth.Equal(that1.CustomAuth) {
		return false
	}
	return true
}
func (this *Target_TlsClientAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_TlsClientAuth)
	if !ok {
		that2, ok := that.(Target_TlsClientAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TlsClientAuth.Equal(that1.TlsClientAuth) {
		return false
	}
	return true
}
func (this *Target_BasicAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_BasicAuth)
	if !ok {
		that2, ok := that.(Target_BasicAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *Target_CustomAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_CustomAuth)
	if !ok {
		that2, ok := that.(Target_CustomAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Target_TLSClientAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Target_TLSClientAuth)
	if !ok {
		that2, ok := that.(Target_TLSClientAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Cert, that1.Cert) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *NetworkTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkTarget)
	if !ok {
		that2, ok := that.(NetworkTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if !this.Target.Equal(that1.Target) {
		return false
	}
	return true
}
func (m *Network) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Listed {
		i--
		if m.Listed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DevAddrBlocks) > 0 {
		for iNdEx := len(m.DevAddrBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevAddrBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Listed {
		i--
		if m.Listed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DevAddrBlocks) > 0 {
		for iNdEx := len(m.DevAddrBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevAddrBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetworks(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkOrTenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkOrTenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkOrTenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *NetworkOrTenant_Network) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkOrTenant_Network) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Network != nil {
		{
			size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *NetworkOrTenant_Tenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkOrTenant_Tenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tenant != nil {
		{
			size, err := m.Tenant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DevAddrPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevAddrPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevAddrPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DevAddrBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevAddrBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevAddrBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HomeNetworkClusterId) > 0 {
		i -= len(m.HomeNetworkClusterId)
		copy(dAtA[i:], m.HomeNetworkClusterId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.HomeNetworkClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkAPIKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkAPIKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkAPIKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Rights) > 0 {
		dAtA11 := make([]byte, len(m.Rights)*10)
		var j10 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintNetworks(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x32
	}
	if m.AuthenticatedAt != nil {
		{
			size, err := m.AuthenticatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NetId != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Target) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootCas) > 0 {
		i -= len(m.RootCas)
		copy(dAtA[i:], m.RootCas)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.RootCas)))
		i--
		dAtA[i] = 0x32
	}
	if m.Authorization != nil {
		{
			size := m.Authorization.Size()
			i -= size
			if _, err := m.Authorization.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Target_BasicAuth_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_BasicAuth_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BasicAuth != nil {
		{
			size, err := m.BasicAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Target_CustomAuth_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_CustomAuth_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CustomAuth != nil {
		{
			size, err := m.CustomAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Target_TlsClientAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_TlsClientAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TlsClientAuth != nil {
		{
			size, err := m.TlsClientAuth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Target_BasicAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target_BasicAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_BasicAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Target_CustomAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target_CustomAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_CustomAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Target_TLSClientAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target_TLSClientAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Target_TLSClientAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworks(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintNetworks(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintNetworks(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworks(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedNetwork(r randyNetworks, easy bool) *Network {
	this := &Network{}
	this.NetId = uint32(r.Uint32())
	this.Name = string(randStringNetworks(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.DevAddrBlocks = make([]*DevAddrBlock, v1)
		for i := 0; i < v1; i++ {
			this.DevAddrBlocks[i] = NewPopulatedDevAddrBlock(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = NewPopulatedContactInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = NewPopulatedContactInfo(r, easy)
	}
	this.Listed = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTenant(r randyNetworks, easy bool) *Tenant {
	this := &Tenant{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringNetworks(r))
	this.Name = string(randStringNetworks(r))
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.DevAddrBlocks = make([]*DevAddrBlock, v2)
		for i := 0; i < v2; i++ {
			this.DevAddrBlocks[i] = NewPopulatedDevAddrBlock(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = NewPopulatedContactInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = NewPopulatedContactInfo(r, easy)
	}
	this.Listed = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkOrTenant(r randyNetworks, easy bool) *NetworkOrTenant {
	this := &NetworkOrTenant{}
	oneofNumber_Value := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_Value {
	case 1:
		this.Value = NewPopulatedNetworkOrTenant_Network(r, easy)
	case 2:
		this.Value = NewPopulatedNetworkOrTenant_Tenant(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkOrTenant_Network(r randyNetworks, easy bool) *NetworkOrTenant_Network {
	this := &NetworkOrTenant_Network{}
	this.Network = NewPopulatedNetwork(r, easy)
	return this
}
func NewPopulatedNetworkOrTenant_Tenant(r randyNetworks, easy bool) *NetworkOrTenant_Tenant {
	this := &NetworkOrTenant_Tenant{}
	this.Tenant = NewPopulatedTenant(r, easy)
	return this
}
func NewPopulatedDevAddrPrefix(r randyNetworks, easy bool) *DevAddrPrefix {
	this := &DevAddrPrefix{}
	this.Value = uint32(r.Uint32())
	this.Length = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDevAddrBlock(r randyNetworks, easy bool) *DevAddrBlock {
	this := &DevAddrBlock{}
	if r.Intn(5) != 0 {
		this.Prefix = NewPopulatedDevAddrPrefix(r, easy)
	}
	this.HomeNetworkClusterId = string(randStringNetworks(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkAPIKey(r randyNetworks, easy bool) *NetworkAPIKey {
	this := &NetworkAPIKey{}
	this.KeyId = string(randStringNetworks(r))
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringNetworks(r))
	this.ClusterId = string(randStringNetworks(r))
	if r.Intn(5) != 0 {
		this.AuthenticatedAt = types.NewPopulatedTimestamp(r, easy)
	}
	this.Key = string(randStringNetworks(r))
	v3 := r.Intn(10)
	this.Rights = make([]Right, v3)
	for i := 0; i < v3; i++ {
		this.Rights[i] = Right([]int32{0, 1, 5, 6, 4, 7, 8, 9, 10, 11}[r.Intn(10)])
	}
	this.State = APIKeyState([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTarget(r randyNetworks, easy bool) *Target {
	this := &Target{}
	this.Protocol = TargetProtocol([]int32{0, 1}[r.Intn(2)])
	this.Address = string(randStringNetworks(r))
	oneofNumber_Authorization := []int32{3, 4, 5}[r.Intn(3)]
	switch oneofNumber_Authorization {
	case 3:
		this.Authorization = NewPopulatedTarget_BasicAuth_(r, easy)
	case 4:
		this.Authorization = NewPopulatedTarget_CustomAuth_(r, easy)
	case 5:
		this.Authorization = NewPopulatedTarget_TlsClientAuth(r, easy)
	}
	v4 := r.Intn(100)
	this.RootCas = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.RootCas[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTarget_BasicAuth_(r randyNetworks, easy bool) *Target_BasicAuth_ {
	this := &Target_BasicAuth_{}
	this.BasicAuth = NewPopulatedTarget_BasicAuth(r, easy)
	return this
}
func NewPopulatedTarget_CustomAuth_(r randyNetworks, easy bool) *Target_CustomAuth_ {
	this := &Target_CustomAuth_{}
	this.CustomAuth = NewPopulatedTarget_CustomAuth(r, easy)
	return this
}
func NewPopulatedTarget_TlsClientAuth(r randyNetworks, easy bool) *Target_TlsClientAuth {
	this := &Target_TlsClientAuth{}
	this.TlsClientAuth = NewPopulatedTarget_TLSClientAuth(r, easy)
	return this
}
func NewPopulatedTarget_BasicAuth(r randyNetworks, easy bool) *Target_BasicAuth {
	this := &Target_BasicAuth{}
	this.Username = string(randStringNetworks(r))
	this.Password = string(randStringNetworks(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTarget_CustomAuth(r randyNetworks, easy bool) *Target_CustomAuth {
	this := &Target_CustomAuth{}
	this.Value = string(randStringNetworks(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTarget_TLSClientAuth(r randyNetworks, easy bool) *Target_TLSClientAuth {
	this := &Target_TLSClientAuth{}
	v5 := r.Intn(100)
	this.Cert = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Cert[i] = byte(r.Intn(256))
	}
	v6 := r.Intn(100)
	this.Key = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNetworkTarget(r randyNetworks, easy bool) *NetworkTarget {
	this := &NetworkTarget{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringNetworks(r))
	if r.Intn(5) != 0 {
		this.Target = NewPopulatedTarget(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyNetworks interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNetworks(r randyNetworks) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNetworks(r randyNetworks) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneNetworks(r)
	}
	return string(tmps)
}
func randUnrecognizedNetworks(r randyNetworks, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNetworks(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNetworks(dAtA []byte, r randyNetworks, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNetworks(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNetworks(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovNetworks(uint64(m.NetId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if len(m.DevAddrBlocks) > 0 {
		for _, e := range m.DevAddrBlocks {
			l = e.Size()
			n += 1 + l + sovNetworks(uint64(l))
		}
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.Listed {
		n += 2
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *Tenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovNetworks(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if len(m.DevAddrBlocks) > 0 {
		for _, e := range m.DevAddrBlocks {
			l = e.Size()
			n += 1 + l + sovNetworks(uint64(l))
		}
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.Listed {
		n += 2
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *NetworkOrTenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *NetworkOrTenant_Network) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Network != nil {
		l = m.Network.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}
func (m *NetworkOrTenant_Tenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenant != nil {
		l = m.Tenant.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}
func (m *DevAddrPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNetworks(uint64(m.Value))
	}
	if m.Length != 0 {
		n += 1 + sovNetworks(uint64(m.Length))
	}
	return n
}

func (m *DevAddrBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.HomeNetworkClusterId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *NetworkAPIKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.NetId != 0 {
		n += 1 + sovNetworks(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.AuthenticatedAt != nil {
		l = m.AuthenticatedAt.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovNetworks(uint64(e))
		}
		n += 1 + sovNetworks(uint64(l)) + l
	}
	if m.State != 0 {
		n += 1 + sovNetworks(uint64(m.State))
	}
	return n
}

func (m *Target) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovNetworks(uint64(m.Protocol))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.Authorization != nil {
		n += m.Authorization.Size()
	}
	l = len(m.RootCas)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *Target_BasicAuth_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicAuth != nil {
		l = m.BasicAuth.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}
func (m *Target_CustomAuth_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CustomAuth != nil {
		l = m.CustomAuth.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}
func (m *Target_TlsClientAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsClientAuth != nil {
		l = m.TlsClientAuth.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}
func (m *Target_BasicAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *Target_CustomAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *Target_TLSClientAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func (m *NetworkTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovNetworks(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovNetworks(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovNetworks(uint64(l))
	}
	return n
}

func sovNetworks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworks(x uint64) (n int) {
	return sovNetworks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Network) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevAddrBlocks := "[]*DevAddrBlock{"
	for _, f := range this.DevAddrBlocks {
		repeatedStringForDevAddrBlocks += strings.Replace(f.String(), "DevAddrBlock", "DevAddrBlock", 1) + ","
	}
	repeatedStringForDevAddrBlocks += "}"
	s := strings.Join([]string{`&Network{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DevAddrBlocks:` + repeatedStringForDevAddrBlocks + `,`,
		`AdministrativeContact:` + strings.Replace(fmt.Sprintf("%v", this.AdministrativeContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`TechnicalContact:` + strings.Replace(fmt.Sprintf("%v", this.TechnicalContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`Listed:` + fmt.Sprintf("%v", this.Listed) + `,`,
		`Target:` + strings.Replace(this.Target.String(), "Target", "Target", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tenant) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDevAddrBlocks := "[]*DevAddrBlock{"
	for _, f := range this.DevAddrBlocks {
		repeatedStringForDevAddrBlocks += strings.Replace(f.String(), "DevAddrBlock", "DevAddrBlock", 1) + ","
	}
	repeatedStringForDevAddrBlocks += "}"
	s := strings.Join([]string{`&Tenant{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DevAddrBlocks:` + repeatedStringForDevAddrBlocks + `,`,
		`AdministrativeContact:` + strings.Replace(fmt.Sprintf("%v", this.AdministrativeContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`TechnicalContact:` + strings.Replace(fmt.Sprintf("%v", this.TechnicalContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`Listed:` + fmt.Sprintf("%v", this.Listed) + `,`,
		`Target:` + strings.Replace(this.Target.String(), "Target", "Target", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkOrTenant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkOrTenant{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkOrTenant_Network) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkOrTenant_Network{`,
		`Network:` + strings.Replace(fmt.Sprintf("%v", this.Network), "Network", "Network", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkOrTenant_Tenant) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkOrTenant_Tenant{`,
		`Tenant:` + strings.Replace(fmt.Sprintf("%v", this.Tenant), "Tenant", "Tenant", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevAddrPrefix) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevAddrPrefix{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevAddrBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevAddrBlock{`,
		`Prefix:` + strings.Replace(this.Prefix.String(), "DevAddrPrefix", "DevAddrPrefix", 1) + `,`,
		`HomeNetworkClusterId:` + fmt.Sprintf("%v", this.HomeNetworkClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkAPIKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkAPIKey{`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`AuthenticatedAt:` + strings.Replace(fmt.Sprintf("%v", this.AuthenticatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target{`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Authorization:` + fmt.Sprintf("%v", this.Authorization) + `,`,
		`RootCas:` + fmt.Sprintf("%v", this.RootCas) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_BasicAuth_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_BasicAuth_{`,
		`BasicAuth:` + strings.Replace(fmt.Sprintf("%v", this.BasicAuth), "Target_BasicAuth", "Target_BasicAuth", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_CustomAuth_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_CustomAuth_{`,
		`CustomAuth:` + strings.Replace(fmt.Sprintf("%v", this.CustomAuth), "Target_CustomAuth", "Target_CustomAuth", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_TlsClientAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_TlsClientAuth{`,
		`TlsClientAuth:` + strings.Replace(fmt.Sprintf("%v", this.TlsClientAuth), "Target_TLSClientAuth", "Target_TLSClientAuth", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_BasicAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_BasicAuth{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_CustomAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_CustomAuth{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Target_TLSClientAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Target_TLSClientAuth{`,
		`Cert:` + fmt.Sprintf("%v", this.Cert) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkTarget{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`Target:` + strings.Replace(this.Target.String(), "Target", "Target", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNetworks(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Network) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddrBlocks = append(m.DevAddrBlocks, &DevAddrBlock{})
			if err := m.DevAddrBlocks[len(m.DevAddrBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &ContactInfo{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &ContactInfo{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Listed = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddrBlocks = append(m.DevAddrBlocks, &DevAddrBlock{})
			if err := m.DevAddrBlocks[len(m.DevAddrBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &ContactInfo{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &ContactInfo{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Listed = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkOrTenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkOrTenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkOrTenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Network{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &NetworkOrTenant_Network{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Tenant{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &NetworkOrTenant_Tenant{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevAddrPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevAddrBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &DevAddrPrefix{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkAPIKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkAPIKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkAPIKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthenticatedAt == nil {
				m.AuthenticatedAt = &types.Timestamp{}
			}
			if err := m.AuthenticatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Right(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNetworks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNetworks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthNetworks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Rights) == 0 {
					m.Rights = make([]Right, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNetworks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Right(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= APIKeyState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= TargetProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Target_BasicAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Authorization = &Target_BasicAuth_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Target_CustomAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Authorization = &Target_CustomAuth_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsClientAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Target_TLSClientAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Authorization = &Target_TlsClientAuth{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootCas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootCas = append(m.RootCas[:0], dAtA[iNdEx:postIndex]...)
			if m.RootCas == nil {
				m.RootCas = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target_BasicAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target_CustomAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Target_TLSClientAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSClientAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSClientAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetworks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworks = fmt.Errorf("proto: unexpected end of group")
)
