// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/iam/v2/service.proto

package iampb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListNetworkAPIKeysRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId *types.UInt32Value `protobuf:"bytes,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId *types.StringValue `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member.
	ClusterId            *types.StringValue `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListNetworkAPIKeysRequest) Reset()         { *m = ListNetworkAPIKeysRequest{} }
func (m *ListNetworkAPIKeysRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworkAPIKeysRequest) ProtoMessage()    {}
func (*ListNetworkAPIKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{0}
}
func (m *ListNetworkAPIKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkAPIKeysRequest.Unmarshal(m, b)
}
func (m *ListNetworkAPIKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkAPIKeysRequest.Marshal(b, m, deterministic)
}
func (m *ListNetworkAPIKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkAPIKeysRequest.Merge(m, src)
}
func (m *ListNetworkAPIKeysRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworkAPIKeysRequest.Size(m)
}
func (m *ListNetworkAPIKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkAPIKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkAPIKeysRequest proto.InternalMessageInfo

func (m *ListNetworkAPIKeysRequest) GetNetId() *types.UInt32Value {
	if m != nil {
		return m.NetId
	}
	return nil
}

func (m *ListNetworkAPIKeysRequest) GetTenantId() *types.StringValue {
	if m != nil {
		return m.TenantId
	}
	return nil
}

func (m *ListNetworkAPIKeysRequest) GetClusterId() *types.StringValue {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

type ListNetworkAPIKeysResponse struct {
	Keys                 []*v3.NetworkAPIKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListNetworkAPIKeysResponse) Reset()         { *m = ListNetworkAPIKeysResponse{} }
func (m *ListNetworkAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworkAPIKeysResponse) ProtoMessage()    {}
func (*ListNetworkAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{1}
}
func (m *ListNetworkAPIKeysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworkAPIKeysResponse.Unmarshal(m, b)
}
func (m *ListNetworkAPIKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworkAPIKeysResponse.Marshal(b, m, deterministic)
}
func (m *ListNetworkAPIKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkAPIKeysResponse.Merge(m, src)
}
func (m *ListNetworkAPIKeysResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworkAPIKeysResponse.Size(m)
}
func (m *ListNetworkAPIKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkAPIKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkAPIKeysResponse proto.InternalMessageInfo

func (m *ListNetworkAPIKeysResponse) GetKeys() []*v3.NetworkAPIKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CreateNetworkAPIKeyRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Network rights.
	Rights []v3.Right `protobuf:"varint,4,rep,packed,name=rights,proto3,enum=org.packetbroker.v3.Right" json:"rights,omitempty"`
	// Secret key value. Leave empty to generate one.
	Key                  string   `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateNetworkAPIKeyRequest) Reset()         { *m = CreateNetworkAPIKeyRequest{} }
func (m *CreateNetworkAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNetworkAPIKeyRequest) ProtoMessage()    {}
func (*CreateNetworkAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{2}
}
func (m *CreateNetworkAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNetworkAPIKeyRequest.Unmarshal(m, b)
}
func (m *CreateNetworkAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNetworkAPIKeyRequest.Marshal(b, m, deterministic)
}
func (m *CreateNetworkAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkAPIKeyRequest.Merge(m, src)
}
func (m *CreateNetworkAPIKeyRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNetworkAPIKeyRequest.Size(m)
}
func (m *CreateNetworkAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkAPIKeyRequest proto.InternalMessageInfo

func (m *CreateNetworkAPIKeyRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *CreateNetworkAPIKeyRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *CreateNetworkAPIKeyRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreateNetworkAPIKeyRequest) GetRights() []v3.Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func (m *CreateNetworkAPIKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type APIKeyRequest struct {
	KeyId                string   `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIKeyRequest) Reset()         { *m = APIKeyRequest{} }
func (m *APIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*APIKeyRequest) ProtoMessage()    {}
func (*APIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{3}
}
func (m *APIKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIKeyRequest.Unmarshal(m, b)
}
func (m *APIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIKeyRequest.Marshal(b, m, deterministic)
}
func (m *APIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKeyRequest.Merge(m, src)
}
func (m *APIKeyRequest) XXX_Size() int {
	return xxx_messageInfo_APIKeyRequest.Size(m)
}
func (m *APIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_APIKeyRequest proto.InternalMessageInfo

func (m *APIKeyRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

type CreateNetworkAPIKeyResponse struct {
	Key                  *v3.NetworkAPIKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateNetworkAPIKeyResponse) Reset()         { *m = CreateNetworkAPIKeyResponse{} }
func (m *CreateNetworkAPIKeyResponse) String() string { return proto.CompactTextString(m) }
func (*CreateNetworkAPIKeyResponse) ProtoMessage()    {}
func (*CreateNetworkAPIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{4}
}
func (m *CreateNetworkAPIKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNetworkAPIKeyResponse.Unmarshal(m, b)
}
func (m *CreateNetworkAPIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNetworkAPIKeyResponse.Marshal(b, m, deterministic)
}
func (m *CreateNetworkAPIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkAPIKeyResponse.Merge(m, src)
}
func (m *CreateNetworkAPIKeyResponse) XXX_Size() int {
	return xxx_messageInfo_CreateNetworkAPIKeyResponse.Size(m)
}
func (m *CreateNetworkAPIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkAPIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkAPIKeyResponse proto.InternalMessageInfo

func (m *CreateNetworkAPIKeyResponse) GetKey() *v3.NetworkAPIKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type UpdateAPIKeyStateRequest struct {
	KeyId                string         `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	State                v3.APIKeyState `protobuf:"varint,2,opt,name=state,proto3,enum=org.packetbroker.v3.APIKeyState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateAPIKeyStateRequest) Reset()         { *m = UpdateAPIKeyStateRequest{} }
func (m *UpdateAPIKeyStateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAPIKeyStateRequest) ProtoMessage()    {}
func (*UpdateAPIKeyStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{5}
}
func (m *UpdateAPIKeyStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAPIKeyStateRequest.Unmarshal(m, b)
}
func (m *UpdateAPIKeyStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAPIKeyStateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateAPIKeyStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAPIKeyStateRequest.Merge(m, src)
}
func (m *UpdateAPIKeyStateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateAPIKeyStateRequest.Size(m)
}
func (m *UpdateAPIKeyStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAPIKeyStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAPIKeyStateRequest proto.InternalMessageInfo

func (m *UpdateAPIKeyStateRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *UpdateAPIKeyStateRequest) GetState() v3.APIKeyState {
	if m != nil {
		return m.State
	}
	return v3.APIKeyState_REQUESTED
}

type ListClusterAPIKeysRequest struct {
	// Cluster identifier.
	ClusterId            *types.StringValue `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListClusterAPIKeysRequest) Reset()         { *m = ListClusterAPIKeysRequest{} }
func (m *ListClusterAPIKeysRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterAPIKeysRequest) ProtoMessage()    {}
func (*ListClusterAPIKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{6}
}
func (m *ListClusterAPIKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterAPIKeysRequest.Unmarshal(m, b)
}
func (m *ListClusterAPIKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterAPIKeysRequest.Marshal(b, m, deterministic)
}
func (m *ListClusterAPIKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterAPIKeysRequest.Merge(m, src)
}
func (m *ListClusterAPIKeysRequest) XXX_Size() int {
	return xxx_messageInfo_ListClusterAPIKeysRequest.Size(m)
}
func (m *ListClusterAPIKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterAPIKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterAPIKeysRequest proto.InternalMessageInfo

func (m *ListClusterAPIKeysRequest) GetClusterId() *types.StringValue {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

type ListClusterAPIKeysResponse struct {
	Keys                 []*v3.ClusterAPIKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListClusterAPIKeysResponse) Reset()         { *m = ListClusterAPIKeysResponse{} }
func (m *ListClusterAPIKeysResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterAPIKeysResponse) ProtoMessage()    {}
func (*ListClusterAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{7}
}
func (m *ListClusterAPIKeysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClusterAPIKeysResponse.Unmarshal(m, b)
}
func (m *ListClusterAPIKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClusterAPIKeysResponse.Marshal(b, m, deterministic)
}
func (m *ListClusterAPIKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterAPIKeysResponse.Merge(m, src)
}
func (m *ListClusterAPIKeysResponse) XXX_Size() int {
	return xxx_messageInfo_ListClusterAPIKeysResponse.Size(m)
}
func (m *ListClusterAPIKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterAPIKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterAPIKeysResponse proto.InternalMessageInfo

func (m *ListClusterAPIKeysResponse) GetKeys() []*v3.ClusterAPIKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CreateClusterAPIKeyRequest struct {
	// Cluster identifier.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Network rights.
	Rights []v3.Right `protobuf:"varint,2,rep,packed,name=rights,proto3,enum=org.packetbroker.v3.Right" json:"rights,omitempty"`
	// Secret key value. Leave empty to generate one.
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterAPIKeyRequest) Reset()         { *m = CreateClusterAPIKeyRequest{} }
func (m *CreateClusterAPIKeyRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAPIKeyRequest) ProtoMessage()    {}
func (*CreateClusterAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{8}
}
func (m *CreateClusterAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAPIKeyRequest.Unmarshal(m, b)
}
func (m *CreateClusterAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAPIKeyRequest.Marshal(b, m, deterministic)
}
func (m *CreateClusterAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAPIKeyRequest.Merge(m, src)
}
func (m *CreateClusterAPIKeyRequest) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAPIKeyRequest.Size(m)
}
func (m *CreateClusterAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAPIKeyRequest proto.InternalMessageInfo

func (m *CreateClusterAPIKeyRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreateClusterAPIKeyRequest) GetRights() []v3.Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func (m *CreateClusterAPIKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type CreateClusterAPIKeyResponse struct {
	Key                  *v3.ClusterAPIKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateClusterAPIKeyResponse) Reset()         { *m = CreateClusterAPIKeyResponse{} }
func (m *CreateClusterAPIKeyResponse) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAPIKeyResponse) ProtoMessage()    {}
func (*CreateClusterAPIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{9}
}
func (m *CreateClusterAPIKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAPIKeyResponse.Unmarshal(m, b)
}
func (m *CreateClusterAPIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAPIKeyResponse.Marshal(b, m, deterministic)
}
func (m *CreateClusterAPIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAPIKeyResponse.Merge(m, src)
}
func (m *CreateClusterAPIKeyResponse) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAPIKeyResponse.Size(m)
}
func (m *CreateClusterAPIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAPIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAPIKeyResponse proto.InternalMessageInfo

func (m *CreateClusterAPIKeyResponse) GetKey() *v3.ClusterAPIKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type ListNetworksRequest struct {
	// Number of items to skip.
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filter tenants by ID.
	TenantIdContains string `protobuf:"bytes,3,opt,name=tenant_id_contains,json=tenantIdContains,proto3" json:"tenant_id_contains,omitempty"`
	// Filter networks by name.
	NameContains string `protobuf:"bytes,4,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	// Include networks with which a policy is defined. The policy reference defines the Forwarder or Home Network with
	// which a routing policy has been defined.
	PolicyReference      *ListNetworksRequest_PolicyReference `protobuf:"bytes,5,opt,name=policy_reference,json=policyReference,proto3" json:"policy_reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ListNetworksRequest) Reset()         { *m = ListNetworksRequest{} }
func (m *ListNetworksRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworksRequest) ProtoMessage()    {}
func (*ListNetworksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{10}
}
func (m *ListNetworksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworksRequest.Unmarshal(m, b)
}
func (m *ListNetworksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworksRequest.Marshal(b, m, deterministic)
}
func (m *ListNetworksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksRequest.Merge(m, src)
}
func (m *ListNetworksRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworksRequest.Size(m)
}
func (m *ListNetworksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksRequest proto.InternalMessageInfo

func (m *ListNetworksRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListNetworksRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListNetworksRequest) GetTenantIdContains() string {
	if m != nil {
		return m.TenantIdContains
	}
	return ""
}

func (m *ListNetworksRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

func (m *ListNetworksRequest) GetPolicyReference() *ListNetworksRequest_PolicyReference {
	if m != nil {
		return m.PolicyReference
	}
	return nil
}

type ListNetworksRequest_PolicyReference struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId             string   `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksRequest_PolicyReference) Reset()         { *m = ListNetworksRequest_PolicyReference{} }
func (m *ListNetworksRequest_PolicyReference) String() string { return proto.CompactTextString(m) }
func (*ListNetworksRequest_PolicyReference) ProtoMessage()    {}
func (*ListNetworksRequest_PolicyReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{10, 0}
}
func (m *ListNetworksRequest_PolicyReference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworksRequest_PolicyReference.Unmarshal(m, b)
}
func (m *ListNetworksRequest_PolicyReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworksRequest_PolicyReference.Marshal(b, m, deterministic)
}
func (m *ListNetworksRequest_PolicyReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksRequest_PolicyReference.Merge(m, src)
}
func (m *ListNetworksRequest_PolicyReference) XXX_Size() int {
	return xxx_messageInfo_ListNetworksRequest_PolicyReference.Size(m)
}
func (m *ListNetworksRequest_PolicyReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksRequest_PolicyReference.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksRequest_PolicyReference proto.InternalMessageInfo

func (m *ListNetworksRequest_PolicyReference) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *ListNetworksRequest_PolicyReference) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

type ListNetworksResponse struct {
	Networks []*v3.NetworkOrTenant `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Total number of networks.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksResponse) Reset()         { *m = ListNetworksResponse{} }
func (m *ListNetworksResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworksResponse) ProtoMessage()    {}
func (*ListNetworksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{11}
}
func (m *ListNetworksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworksResponse.Unmarshal(m, b)
}
func (m *ListNetworksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworksResponse.Marshal(b, m, deterministic)
}
func (m *ListNetworksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksResponse.Merge(m, src)
}
func (m *ListNetworksResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworksResponse.Size(m)
}
func (m *ListNetworksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksResponse proto.InternalMessageInfo

func (m *ListNetworksResponse) GetNetworks() []*v3.NetworkOrTenant {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *ListNetworksResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*ListNetworkAPIKeysRequest)(nil), "org.packetbroker.iam.v2.ListNetworkAPIKeysRequest")
	proto.RegisterType((*ListNetworkAPIKeysResponse)(nil), "org.packetbroker.iam.v2.ListNetworkAPIKeysResponse")
	proto.RegisterType((*CreateNetworkAPIKeyRequest)(nil), "org.packetbroker.iam.v2.CreateNetworkAPIKeyRequest")
	proto.RegisterType((*APIKeyRequest)(nil), "org.packetbroker.iam.v2.APIKeyRequest")
	proto.RegisterType((*CreateNetworkAPIKeyResponse)(nil), "org.packetbroker.iam.v2.CreateNetworkAPIKeyResponse")
	proto.RegisterType((*UpdateAPIKeyStateRequest)(nil), "org.packetbroker.iam.v2.UpdateAPIKeyStateRequest")
	proto.RegisterType((*ListClusterAPIKeysRequest)(nil), "org.packetbroker.iam.v2.ListClusterAPIKeysRequest")
	proto.RegisterType((*ListClusterAPIKeysResponse)(nil), "org.packetbroker.iam.v2.ListClusterAPIKeysResponse")
	proto.RegisterType((*CreateClusterAPIKeyRequest)(nil), "org.packetbroker.iam.v2.CreateClusterAPIKeyRequest")
	proto.RegisterType((*CreateClusterAPIKeyResponse)(nil), "org.packetbroker.iam.v2.CreateClusterAPIKeyResponse")
	proto.RegisterType((*ListNetworksRequest)(nil), "org.packetbroker.iam.v2.ListNetworksRequest")
	proto.RegisterType((*ListNetworksRequest_PolicyReference)(nil), "org.packetbroker.iam.v2.ListNetworksRequest.PolicyReference")
	proto.RegisterType((*ListNetworksResponse)(nil), "org.packetbroker.iam.v2.ListNetworksResponse")
}

func init() {
	proto.RegisterFile("packetbroker/api/iam/v2/service.proto", fileDescriptor_04cdaf08feadd3d4)
}

var fileDescriptor_04cdaf08feadd3d4 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xdb, 0x6e, 0xc3, 0x44,
	0x10, 0x55, 0x9a, 0x26, 0x34, 0x93, 0xa4, 0x0d, 0x4b, 0x29, 0xc1, 0xe5, 0x12, 0x4c, 0xa9, 0xfa,
	0x50, 0x1c, 0xe1, 0x54, 0x95, 0x50, 0x79, 0x00, 0x42, 0x25, 0x22, 0x50, 0xa9, 0xdc, 0x8b, 0x10,
	0x0f, 0x54, 0x9b, 0x64, 0x62, 0x2c, 0x5f, 0xd6, 0xac, 0x37, 0xa9, 0xfc, 0xc8, 0x47, 0x21, 0xfe,
	0x00, 0xf1, 0x27, 0xfc, 0x06, 0xb2, 0xbd, 0x4e, 0xe3, 0xc4, 0x6e, 0x93, 0x0a, 0x21, 0xf1, 0x56,
	0xcf, 0x9e, 0xb9, 0x9e, 0x33, 0xd3, 0xc0, 0x27, 0x3e, 0x1d, 0xd9, 0x28, 0x86, 0x9c, 0xd9, 0xc8,
	0xbb, 0xd4, 0xb7, 0xba, 0x16, 0x75, 0xbb, 0x33, 0xbd, 0x1b, 0x20, 0x9f, 0x59, 0x23, 0xd4, 0x7c,
	0xce, 0x04, 0x23, 0xef, 0x30, 0x6e, 0x6a, 0x8b, 0x50, 0xcd, 0xa2, 0xae, 0x36, 0xd3, 0x95, 0x43,
	0x93, 0x31, 0xd3, 0xc1, 0x6e, 0x0c, 0x1b, 0x4e, 0x27, 0x5d, 0x74, 0x7d, 0x11, 0x26, 0x5e, 0xca,
	0x07, 0xcb, 0x8f, 0x8f, 0x9c, 0xfa, 0x3e, 0xf2, 0x40, 0xbe, 0x7f, 0xb8, 0x92, 0x7c, 0xd6, 0xeb,
	0xa2, 0x37, 0x75, 0x53, 0xc0, 0x47, 0x79, 0x80, 0x91, 0x33, 0x0d, 0x04, 0x72, 0x09, 0x51, 0xf3,
	0x20, 0x1e, 0x8a, 0x47, 0xc6, 0x6d, 0x19, 0x46, 0xfd, 0xab, 0x04, 0xef, 0x7e, 0x6f, 0x05, 0xe2,
	0x2a, 0x31, 0x7f, 0x75, 0x3d, 0xf8, 0x0e, 0xc3, 0xc0, 0xc0, 0x5f, 0xa7, 0x18, 0x08, 0xd2, 0x83,
	0xaa, 0x87, 0xe2, 0xc1, 0x1a, 0xb7, 0x4b, 0x9d, 0xd2, 0x49, 0x5d, 0x7f, 0x4f, 0x4b, 0xca, 0xd6,
	0xd2, 0xb2, 0xb5, 0xbb, 0x81, 0x27, 0x7a, 0xfa, 0x3d, 0x75, 0xa6, 0x68, 0x54, 0x3c, 0x14, 0x83,
	0x31, 0xf9, 0x1c, 0x6a, 0x02, 0x3d, 0xea, 0xc5, 0x7e, 0x5b, 0x05, 0x7e, 0x37, 0x82, 0x5b, 0x9e,
	0x99, 0xf8, 0xed, 0x24, 0xf0, 0xc1, 0x98, 0x5c, 0x00, 0xc8, 0x16, 0x22, 0xdf, 0xf2, 0x1a, 0xbe,
	0x35, 0x89, 0x1f, 0x8c, 0xd5, 0x5b, 0x50, 0xf2, 0x3a, 0x09, 0x7c, 0xe6, 0x05, 0x48, 0xce, 0x61,
	0xdb, 0xc6, 0x30, 0x68, 0x97, 0x3a, 0xe5, 0x93, 0xba, 0xae, 0x6a, 0x2b, 0xac, 0xcd, 0x7a, 0x5a,
	0xc6, 0xd5, 0x88, 0xf1, 0xea, 0xef, 0x25, 0x50, 0xfa, 0x1c, 0xa9, 0xc0, 0xec, 0xab, 0x9c, 0xd0,
	0xdb, 0x99, 0x09, 0x35, 0xd3, 0x19, 0x1c, 0x2e, 0xcf, 0xa0, 0xb6, 0xd0, 0xe5, 0xfb, 0x2b, 0x5d,
	0xd6, 0x16, 0xfa, 0x20, 0x3a, 0x54, 0xb9, 0x65, 0xfe, 0x22, 0x82, 0xf6, 0x76, 0xa7, 0x7c, 0xb2,
	0xab, 0x2b, 0xb9, 0xb5, 0x1a, 0x11, 0xc4, 0x90, 0x48, 0xd2, 0x82, 0xb2, 0x8d, 0x61, 0xbb, 0x12,
	0xc7, 0x8a, 0xfe, 0x54, 0x8f, 0xa1, 0xb9, 0x52, 0xa9, 0x8d, 0x61, 0x5a, 0x69, 0xcd, 0xa8, 0xd8,
	0x18, 0x0e, 0xc6, 0xea, 0x0d, 0x1c, 0xe6, 0xb6, 0x27, 0xc7, 0x76, 0x96, 0x04, 0x4e, 0xe8, 0x5f,
	0x67, 0x6a, 0x71, 0x72, 0x0b, 0xda, 0x77, 0xfe, 0x98, 0x0a, 0x4c, 0x8c, 0x37, 0x82, 0x0a, 0x7c,
	0xbe, 0x0e, 0x72, 0x0e, 0x95, 0x20, 0x82, 0xc5, 0xd3, 0xda, 0xd5, 0x3b, 0xb9, 0xa9, 0x16, 0xc3,
	0x25, 0x70, 0xf5, 0xc7, 0x44, 0xbf, 0xfd, 0x64, 0x7c, 0x4b, 0xfa, 0xfd, 0x37, 0xf4, 0xb4, 0x1c,
	0x79, 0x03, 0x3d, 0x65, 0x5c, 0xa5, 0x9e, 0x7e, 0x9b, 0xeb, 0x29, 0xfb, 0x2a, 0x2b, 0xce, 0x6a,
	0xa3, 0x54, 0xac, 0x8d, 0xad, 0x4d, 0xb5, 0x51, 0x7e, 0xd2, 0xc6, 0x9c, 0xf3, 0xa5, 0x12, 0xd6,
	0xe7, 0x3c, 0xeb, 0x18, 0x07, 0xfd, 0x73, 0x0b, 0xde, 0x5a, 0xd8, 0xbf, 0x39, 0x07, 0x07, 0x50,
	0x65, 0x93, 0x49, 0x80, 0x42, 0x6e, 0x88, 0xfc, 0x22, 0xfb, 0x50, 0x71, 0x2c, 0xd7, 0x12, 0x31,
	0xe1, 0x4d, 0x23, 0xf9, 0x20, 0xa7, 0x40, 0xe6, 0x8b, 0xf3, 0x30, 0x62, 0x9e, 0xa0, 0x96, 0x17,
	0xc8, 0xda, 0x5b, 0xe9, 0x06, 0xf5, 0xa5, 0x9d, 0x7c, 0x0c, 0x4d, 0x8f, 0xba, 0xf8, 0x04, 0xdc,
	0x8e, 0x81, 0x8d, 0xc8, 0x38, 0x07, 0x99, 0xd0, 0xf2, 0x99, 0x63, 0x8d, 0xc2, 0x07, 0x8e, 0x13,
	0xe4, 0xe8, 0x8d, 0x30, 0x5e, 0x94, 0xba, 0xfe, 0x85, 0x56, 0x70, 0xbb, 0xb5, 0x9c, 0x46, 0xb4,
	0xeb, 0x38, 0x88, 0x91, 0xc6, 0x30, 0xf6, 0xfc, 0xac, 0x41, 0xb9, 0x84, 0xbd, 0x25, 0xcc, 0x6b,
	0xce, 0x83, 0xea, 0xc1, 0x7e, 0x36, 0xbd, 0xa4, 0xe5, 0x4b, 0xd8, 0x49, 0x8f, 0xb7, 0x54, 0xdd,
	0xd1, 0x73, 0xfb, 0xf8, 0x03, 0xbf, 0x8d, 0x23, 0x1a, 0x73, 0xaf, 0x68, 0xe4, 0x82, 0x09, 0xea,
	0xa4, 0x23, 0x8f, 0x3f, 0xf4, 0x3f, 0xca, 0x40, 0x32, 0x3b, 0x7c, 0x4f, 0xa7, 0x8e, 0x20, 0x33,
	0xa8, 0x47, 0x65, 0x48, 0xdd, 0x13, 0x7d, 0x9d, 0x59, 0x65, 0xd7, 0x4f, 0xe9, 0x6d, 0xe4, 0x23,
	0xdb, 0x0c, 0xa1, 0x91, 0x88, 0x33, 0x79, 0x20, 0xc5, 0x41, 0x8a, 0xcf, 0xb2, 0x72, 0xb6, 0x99,
	0x93, 0x4c, 0x7d, 0x05, 0x8d, 0x6f, 0xd0, 0xc1, 0x79, 0xea, 0xe3, 0xc2, 0x28, 0xd9, 0x6c, 0x07,
	0x2b, 0x27, 0xe5, 0x32, 0xfa, 0x57, 0x4f, 0x7e, 0x86, 0x37, 0x57, 0xce, 0x20, 0xf9, 0xac, 0x30,
	0x68, 0xd1, 0xc9, 0x2c, 0x8a, 0x1f, 0x33, 0x97, 0xd9, 0xc4, 0x57, 0x30, 0x97, 0x7b, 0x38, 0x5f,
	0x60, 0xae, 0xe0, 0x24, 0x6e, 0xca, 0x5c, 0xde, 0x01, 0x7c, 0x91, 0xb9, 0xfc, 0x93, 0xf5, 0x7f,
	0x63, 0xee, 0xef, 0x12, 0xbc, 0xd1, 0xa7, 0x82, 0x3a, 0xcc, 0x24, 0x36, 0x34, 0x16, 0xf7, 0x9d,
	0x9c, 0x6e, 0x72, 0x95, 0x94, 0x4f, 0xd7, 0x44, 0xcb, 0x41, 0x31, 0x68, 0x45, 0xf6, 0x6f, 0x99,
	0x8b, 0xff, 0x49, 0xc2, 0xaf, 0x8f, 0x7f, 0x3a, 0x32, 0x59, 0x16, 0xce, 0xb8, 0xb9, 0xf0, 0x73,
	0xfa, 0xc2, 0xa2, 0xae, 0x3f, 0x1c, 0x56, 0xe3, 0x09, 0xf5, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xac, 0x16, 0x4a, 0x79, 0x76, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkAPIKeyVaultClient is the client API for NetworkAPIKeyVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkAPIKeyVaultClient interface {
	// List API keys.
	ListAPIKeys(ctx context.Context, in *ListNetworkAPIKeysRequest, opts ...grpc.CallOption) (*ListNetworkAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(ctx context.Context, in *CreateNetworkAPIKeyRequest, opts ...grpc.CallOption) (*CreateNetworkAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type networkAPIKeyVaultClient struct {
	cc *grpc.ClientConn
}

func NewNetworkAPIKeyVaultClient(cc *grpc.ClientConn) NetworkAPIKeyVaultClient {
	return &networkAPIKeyVaultClient{cc}
}

func (c *networkAPIKeyVaultClient) ListAPIKeys(ctx context.Context, in *ListNetworkAPIKeysRequest, opts ...grpc.CallOption) (*ListNetworkAPIKeysResponse, error) {
	out := new(ListNetworkAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) CreateAPIKey(ctx context.Context, in *CreateNetworkAPIKeyRequest, opts ...grpc.CallOption) (*CreateNetworkAPIKeyResponse, error) {
	out := new(CreateNetworkAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/UpdateAPIKeyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAPIKeyVaultServer is the server API for NetworkAPIKeyVault service.
type NetworkAPIKeyVaultServer interface {
	// List API keys.
	ListAPIKeys(context.Context, *ListNetworkAPIKeysRequest) (*ListNetworkAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(context.Context, *CreateNetworkAPIKeyRequest) (*CreateNetworkAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(context.Context, *APIKeyRequest) (*types.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(context.Context, *UpdateAPIKeyStateRequest) (*types.Empty, error)
}

// UnimplementedNetworkAPIKeyVaultServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkAPIKeyVaultServer struct {
}

func (*UnimplementedNetworkAPIKeyVaultServer) ListAPIKeys(ctx context.Context, req *ListNetworkAPIKeysRequest) (*ListNetworkAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedNetworkAPIKeyVaultServer) CreateAPIKey(ctx context.Context, req *CreateNetworkAPIKeyRequest) (*CreateNetworkAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedNetworkAPIKeyVaultServer) DeleteAPIKey(ctx context.Context, req *APIKeyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (*UnimplementedNetworkAPIKeyVaultServer) UpdateAPIKeyState(ctx context.Context, req *UpdateAPIKeyStateRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKeyState not implemented")
}

func RegisterNetworkAPIKeyVaultServer(s *grpc.Server, srv NetworkAPIKeyVaultServer) {
	s.RegisterService(&_NetworkAPIKeyVault_serviceDesc, srv)
}

func _NetworkAPIKeyVault_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).ListAPIKeys(ctx, req.(*ListNetworkAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).CreateAPIKey(ctx, req.(*CreateNetworkAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).DeleteAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_UpdateAPIKeyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIKeyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).UpdateAPIKeyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/UpdateAPIKeyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).UpdateAPIKeyState(ctx, req.(*UpdateAPIKeyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkAPIKeyVault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.NetworkAPIKeyVault",
	HandlerType: (*NetworkAPIKeyVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeys",
			Handler:    _NetworkAPIKeyVault_ListAPIKeys_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _NetworkAPIKeyVault_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _NetworkAPIKeyVault_DeleteAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKeyState",
			Handler:    _NetworkAPIKeyVault_UpdateAPIKeyState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

// ClusterAPIKeyVaultClient is the client API for ClusterAPIKeyVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterAPIKeyVaultClient interface {
	// List API keys.
	ListAPIKeys(ctx context.Context, in *ListClusterAPIKeysRequest, opts ...grpc.CallOption) (*ListClusterAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(ctx context.Context, in *CreateClusterAPIKeyRequest, opts ...grpc.CallOption) (*CreateClusterAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type clusterAPIKeyVaultClient struct {
	cc *grpc.ClientConn
}

func NewClusterAPIKeyVaultClient(cc *grpc.ClientConn) ClusterAPIKeyVaultClient {
	return &clusterAPIKeyVaultClient{cc}
}

func (c *clusterAPIKeyVaultClient) ListAPIKeys(ctx context.Context, in *ListClusterAPIKeysRequest, opts ...grpc.CallOption) (*ListClusterAPIKeysResponse, error) {
	out := new(ListClusterAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) CreateAPIKey(ctx context.Context, in *CreateClusterAPIKeyRequest, opts ...grpc.CallOption) (*CreateClusterAPIKeyResponse, error) {
	out := new(CreateClusterAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/UpdateAPIKeyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterAPIKeyVaultServer is the server API for ClusterAPIKeyVault service.
type ClusterAPIKeyVaultServer interface {
	// List API keys.
	ListAPIKeys(context.Context, *ListClusterAPIKeysRequest) (*ListClusterAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(context.Context, *CreateClusterAPIKeyRequest) (*CreateClusterAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(context.Context, *APIKeyRequest) (*types.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(context.Context, *UpdateAPIKeyStateRequest) (*types.Empty, error)
}

// UnimplementedClusterAPIKeyVaultServer can be embedded to have forward compatible implementations.
type UnimplementedClusterAPIKeyVaultServer struct {
}

func (*UnimplementedClusterAPIKeyVaultServer) ListAPIKeys(ctx context.Context, req *ListClusterAPIKeysRequest) (*ListClusterAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedClusterAPIKeyVaultServer) CreateAPIKey(ctx context.Context, req *CreateClusterAPIKeyRequest) (*CreateClusterAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedClusterAPIKeyVaultServer) DeleteAPIKey(ctx context.Context, req *APIKeyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (*UnimplementedClusterAPIKeyVaultServer) UpdateAPIKeyState(ctx context.Context, req *UpdateAPIKeyStateRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKeyState not implemented")
}

func RegisterClusterAPIKeyVaultServer(s *grpc.Server, srv ClusterAPIKeyVaultServer) {
	s.RegisterService(&_ClusterAPIKeyVault_serviceDesc, srv)
}

func _ClusterAPIKeyVault_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).ListAPIKeys(ctx, req.(*ListClusterAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).CreateAPIKey(ctx, req.(*CreateClusterAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).DeleteAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_UpdateAPIKeyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIKeyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).UpdateAPIKeyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/UpdateAPIKeyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).UpdateAPIKeyState(ctx, req.(*UpdateAPIKeyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterAPIKeyVault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.ClusterAPIKeyVault",
	HandlerType: (*ClusterAPIKeyVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeys",
			Handler:    _ClusterAPIKeyVault_ListAPIKeys_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _ClusterAPIKeyVault_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _ClusterAPIKeyVault_DeleteAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKeyState",
			Handler:    _ClusterAPIKeyVault_UpdateAPIKeyState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatalogClient interface {
	// List networks and tenants.
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// List networks and tenants that are Home Networks, i.e. those with DevAddr blocks assigned.
	ListHomeNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
}

type catalogClient struct {
	cc *grpc.ClientConn
}

func NewCatalogClient(cc *grpc.ClientConn) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.Catalog/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ListHomeNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.Catalog/ListHomeNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
type CatalogServer interface {
	// List networks and tenants.
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// List networks and tenants that are Home Networks, i.e. those with DevAddr blocks assigned.
	ListHomeNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
}

// UnimplementedCatalogServer can be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (*UnimplementedCatalogServer) ListNetworks(ctx context.Context, req *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedCatalogServer) ListHomeNetworks(ctx context.Context, req *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworks not implemented")
}

func RegisterCatalogServer(s *grpc.Server, srv CatalogServer) {
	s.RegisterService(&_Catalog_serviceDesc, srv)
}

func _Catalog_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.Catalog/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ListHomeNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListHomeNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.Catalog/ListHomeNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListHomeNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Catalog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworks",
			Handler:    _Catalog_ListNetworks_Handler,
		},
		{
			MethodName: "ListHomeNetworks",
			Handler:    _Catalog_ListHomeNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}
