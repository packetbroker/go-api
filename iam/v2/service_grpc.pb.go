// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: packetbroker/api/iam/v2/service.proto

package iampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkAPIKeyVaultClient is the client API for NetworkAPIKeyVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkAPIKeyVaultClient interface {
	// List API keys.
	ListAPIKeys(ctx context.Context, in *ListNetworkAPIKeysRequest, opts ...grpc.CallOption) (*ListNetworkAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(ctx context.Context, in *CreateNetworkAPIKeyRequest, opts ...grpc.CallOption) (*CreateNetworkAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type networkAPIKeyVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkAPIKeyVaultClient(cc grpc.ClientConnInterface) NetworkAPIKeyVaultClient {
	return &networkAPIKeyVaultClient{cc}
}

func (c *networkAPIKeyVaultClient) ListAPIKeys(ctx context.Context, in *ListNetworkAPIKeysRequest, opts ...grpc.CallOption) (*ListNetworkAPIKeysResponse, error) {
	out := new(ListNetworkAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) CreateAPIKey(ctx context.Context, in *CreateNetworkAPIKeyRequest, opts ...grpc.CallOption) (*CreateNetworkAPIKeyResponse, error) {
	out := new(CreateNetworkAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/UpdateAPIKeyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAPIKeyVaultServer is the server API for NetworkAPIKeyVault service.
// All implementations must embed UnimplementedNetworkAPIKeyVaultServer
// for forward compatibility
type NetworkAPIKeyVaultServer interface {
	// List API keys.
	ListAPIKeys(context.Context, *ListNetworkAPIKeysRequest) (*ListNetworkAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(context.Context, *CreateNetworkAPIKeyRequest) (*CreateNetworkAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(context.Context, *APIKeyRequest) (*emptypb.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(context.Context, *UpdateAPIKeyStateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedNetworkAPIKeyVaultServer()
}

// UnimplementedNetworkAPIKeyVaultServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkAPIKeyVaultServer struct {
}

func (UnimplementedNetworkAPIKeyVaultServer) ListAPIKeys(context.Context, *ListNetworkAPIKeysRequest) (*ListNetworkAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedNetworkAPIKeyVaultServer) CreateAPIKey(context.Context, *CreateNetworkAPIKeyRequest) (*CreateNetworkAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedNetworkAPIKeyVaultServer) DeleteAPIKey(context.Context, *APIKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedNetworkAPIKeyVaultServer) UpdateAPIKeyState(context.Context, *UpdateAPIKeyStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKeyState not implemented")
}
func (UnimplementedNetworkAPIKeyVaultServer) mustEmbedUnimplementedNetworkAPIKeyVaultServer() {}

// UnsafeNetworkAPIKeyVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkAPIKeyVaultServer will
// result in compilation errors.
type UnsafeNetworkAPIKeyVaultServer interface {
	mustEmbedUnimplementedNetworkAPIKeyVaultServer()
}

func RegisterNetworkAPIKeyVaultServer(s grpc.ServiceRegistrar, srv NetworkAPIKeyVaultServer) {
	s.RegisterService(&NetworkAPIKeyVault_ServiceDesc, srv)
}

func _NetworkAPIKeyVault_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).ListAPIKeys(ctx, req.(*ListNetworkAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).CreateAPIKey(ctx, req.(*CreateNetworkAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).DeleteAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_UpdateAPIKeyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIKeyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).UpdateAPIKeyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/UpdateAPIKeyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).UpdateAPIKeyState(ctx, req.(*UpdateAPIKeyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkAPIKeyVault_ServiceDesc is the grpc.ServiceDesc for NetworkAPIKeyVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkAPIKeyVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.NetworkAPIKeyVault",
	HandlerType: (*NetworkAPIKeyVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeys",
			Handler:    _NetworkAPIKeyVault_ListAPIKeys_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _NetworkAPIKeyVault_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _NetworkAPIKeyVault_DeleteAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKeyState",
			Handler:    _NetworkAPIKeyVault_UpdateAPIKeyState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

// ClusterAPIKeyVaultClient is the client API for ClusterAPIKeyVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterAPIKeyVaultClient interface {
	// List API keys.
	ListAPIKeys(ctx context.Context, in *ListClusterAPIKeysRequest, opts ...grpc.CallOption) (*ListClusterAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(ctx context.Context, in *CreateClusterAPIKeyRequest, opts ...grpc.CallOption) (*CreateClusterAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type clusterAPIKeyVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterAPIKeyVaultClient(cc grpc.ClientConnInterface) ClusterAPIKeyVaultClient {
	return &clusterAPIKeyVaultClient{cc}
}

func (c *clusterAPIKeyVaultClient) ListAPIKeys(ctx context.Context, in *ListClusterAPIKeysRequest, opts ...grpc.CallOption) (*ListClusterAPIKeysResponse, error) {
	out := new(ListClusterAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) CreateAPIKey(ctx context.Context, in *CreateClusterAPIKeyRequest, opts ...grpc.CallOption) (*CreateClusterAPIKeyResponse, error) {
	out := new(CreateClusterAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) UpdateAPIKeyState(ctx context.Context, in *UpdateAPIKeyStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/UpdateAPIKeyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterAPIKeyVaultServer is the server API for ClusterAPIKeyVault service.
// All implementations must embed UnimplementedClusterAPIKeyVaultServer
// for forward compatibility
type ClusterAPIKeyVaultServer interface {
	// List API keys.
	ListAPIKeys(context.Context, *ListClusterAPIKeysRequest) (*ListClusterAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(context.Context, *CreateClusterAPIKeyRequest) (*CreateClusterAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(context.Context, *APIKeyRequest) (*emptypb.Empty, error)
	// Update API key state.
	UpdateAPIKeyState(context.Context, *UpdateAPIKeyStateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedClusterAPIKeyVaultServer()
}

// UnimplementedClusterAPIKeyVaultServer must be embedded to have forward compatible implementations.
type UnimplementedClusterAPIKeyVaultServer struct {
}

func (UnimplementedClusterAPIKeyVaultServer) ListAPIKeys(context.Context, *ListClusterAPIKeysRequest) (*ListClusterAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedClusterAPIKeyVaultServer) CreateAPIKey(context.Context, *CreateClusterAPIKeyRequest) (*CreateClusterAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedClusterAPIKeyVaultServer) DeleteAPIKey(context.Context, *APIKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}
func (UnimplementedClusterAPIKeyVaultServer) UpdateAPIKeyState(context.Context, *UpdateAPIKeyStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKeyState not implemented")
}
func (UnimplementedClusterAPIKeyVaultServer) mustEmbedUnimplementedClusterAPIKeyVaultServer() {}

// UnsafeClusterAPIKeyVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterAPIKeyVaultServer will
// result in compilation errors.
type UnsafeClusterAPIKeyVaultServer interface {
	mustEmbedUnimplementedClusterAPIKeyVaultServer()
}

func RegisterClusterAPIKeyVaultServer(s grpc.ServiceRegistrar, srv ClusterAPIKeyVaultServer) {
	s.RegisterService(&ClusterAPIKeyVault_ServiceDesc, srv)
}

func _ClusterAPIKeyVault_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).ListAPIKeys(ctx, req.(*ListClusterAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).CreateAPIKey(ctx, req.(*CreateClusterAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).DeleteAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_UpdateAPIKeyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIKeyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).UpdateAPIKeyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/UpdateAPIKeyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).UpdateAPIKeyState(ctx, req.(*UpdateAPIKeyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterAPIKeyVault_ServiceDesc is the grpc.ServiceDesc for ClusterAPIKeyVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterAPIKeyVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.ClusterAPIKeyVault",
	HandlerType: (*ClusterAPIKeyVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeys",
			Handler:    _ClusterAPIKeyVault_ListAPIKeys_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _ClusterAPIKeyVault_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _ClusterAPIKeyVault_DeleteAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKeyState",
			Handler:    _ClusterAPIKeyVault_UpdateAPIKeyState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	// List networks and tenants.
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// List networks and tenants that are Home Networks, i.e. those with DevAddr blocks assigned.
	ListHomeNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// List Join Servers.
	ListJoinServers(ctx context.Context, in *ListJoinServersRequest, opts ...grpc.CallOption) (*ListJoinServersResponse, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.Catalog/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ListHomeNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.Catalog/ListHomeNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ListJoinServers(ctx context.Context, in *ListJoinServersRequest, opts ...grpc.CallOption) (*ListJoinServersResponse, error) {
	out := new(ListJoinServersResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.Catalog/ListJoinServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	// List networks and tenants.
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// List networks and tenants that are Home Networks, i.e. those with DevAddr blocks assigned.
	ListHomeNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// List Join Servers.
	ListJoinServers(context.Context, *ListJoinServersRequest) (*ListJoinServersResponse, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedCatalogServer) ListHomeNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworks not implemented")
}
func (UnimplementedCatalogServer) ListJoinServers(context.Context, *ListJoinServersRequest) (*ListJoinServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJoinServers not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.Catalog/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ListHomeNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListHomeNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.Catalog/ListHomeNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListHomeNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ListJoinServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJoinServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListJoinServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.Catalog/ListJoinServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListJoinServers(ctx, req.(*ListJoinServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworks",
			Handler:    _Catalog_ListNetworks_Handler,
		},
		{
			MethodName: "ListHomeNetworks",
			Handler:    _Catalog_ListHomeNetworks_Handler,
		},
		{
			MethodName: "ListJoinServers",
			Handler:    _Catalog_ListJoinServers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

// JoinServerRegistryClient is the client API for JoinServerRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoinServerRegistryClient interface {
	// List networks.
	ListJoinServers(ctx context.Context, in *ListJoinServersRequest, opts ...grpc.CallOption) (*ListJoinServersResponse, error)
	// Create a network.
	CreateJoinServer(ctx context.Context, in *CreateJoinServerRequest, opts ...grpc.CallOption) (*CreateJoinServerResponse, error)
	// Get a network.
	GetJoinServer(ctx context.Context, in *JoinServerRequest, opts ...grpc.CallOption) (*GetJoinServerResponse, error)
	// Update a network.
	UpdateJoinServer(ctx context.Context, in *UpdateJoinServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a network.
	DeleteJoinServer(ctx context.Context, in *JoinServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type joinServerRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinServerRegistryClient(cc grpc.ClientConnInterface) JoinServerRegistryClient {
	return &joinServerRegistryClient{cc}
}

func (c *joinServerRegistryClient) ListJoinServers(ctx context.Context, in *ListJoinServersRequest, opts ...grpc.CallOption) (*ListJoinServersResponse, error) {
	out := new(ListJoinServersResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.JoinServerRegistry/ListJoinServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinServerRegistryClient) CreateJoinServer(ctx context.Context, in *CreateJoinServerRequest, opts ...grpc.CallOption) (*CreateJoinServerResponse, error) {
	out := new(CreateJoinServerResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.JoinServerRegistry/CreateJoinServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinServerRegistryClient) GetJoinServer(ctx context.Context, in *JoinServerRequest, opts ...grpc.CallOption) (*GetJoinServerResponse, error) {
	out := new(GetJoinServerResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.JoinServerRegistry/GetJoinServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinServerRegistryClient) UpdateJoinServer(ctx context.Context, in *UpdateJoinServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.JoinServerRegistry/UpdateJoinServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinServerRegistryClient) DeleteJoinServer(ctx context.Context, in *JoinServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.JoinServerRegistry/DeleteJoinServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoinServerRegistryServer is the server API for JoinServerRegistry service.
// All implementations must embed UnimplementedJoinServerRegistryServer
// for forward compatibility
type JoinServerRegistryServer interface {
	// List networks.
	ListJoinServers(context.Context, *ListJoinServersRequest) (*ListJoinServersResponse, error)
	// Create a network.
	CreateJoinServer(context.Context, *CreateJoinServerRequest) (*CreateJoinServerResponse, error)
	// Get a network.
	GetJoinServer(context.Context, *JoinServerRequest) (*GetJoinServerResponse, error)
	// Update a network.
	UpdateJoinServer(context.Context, *UpdateJoinServerRequest) (*emptypb.Empty, error)
	// Delete a network.
	DeleteJoinServer(context.Context, *JoinServerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedJoinServerRegistryServer()
}

// UnimplementedJoinServerRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedJoinServerRegistryServer struct {
}

func (UnimplementedJoinServerRegistryServer) ListJoinServers(context.Context, *ListJoinServersRequest) (*ListJoinServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJoinServers not implemented")
}
func (UnimplementedJoinServerRegistryServer) CreateJoinServer(context.Context, *CreateJoinServerRequest) (*CreateJoinServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJoinServer not implemented")
}
func (UnimplementedJoinServerRegistryServer) GetJoinServer(context.Context, *JoinServerRequest) (*GetJoinServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinServer not implemented")
}
func (UnimplementedJoinServerRegistryServer) UpdateJoinServer(context.Context, *UpdateJoinServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJoinServer not implemented")
}
func (UnimplementedJoinServerRegistryServer) DeleteJoinServer(context.Context, *JoinServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJoinServer not implemented")
}
func (UnimplementedJoinServerRegistryServer) mustEmbedUnimplementedJoinServerRegistryServer() {}

// UnsafeJoinServerRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServerRegistryServer will
// result in compilation errors.
type UnsafeJoinServerRegistryServer interface {
	mustEmbedUnimplementedJoinServerRegistryServer()
}

func RegisterJoinServerRegistryServer(s grpc.ServiceRegistrar, srv JoinServerRegistryServer) {
	s.RegisterService(&JoinServerRegistry_ServiceDesc, srv)
}

func _JoinServerRegistry_ListJoinServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJoinServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServerRegistryServer).ListJoinServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.JoinServerRegistry/ListJoinServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServerRegistryServer).ListJoinServers(ctx, req.(*ListJoinServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinServerRegistry_CreateJoinServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJoinServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServerRegistryServer).CreateJoinServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.JoinServerRegistry/CreateJoinServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServerRegistryServer).CreateJoinServer(ctx, req.(*CreateJoinServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinServerRegistry_GetJoinServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServerRegistryServer).GetJoinServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.JoinServerRegistry/GetJoinServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServerRegistryServer).GetJoinServer(ctx, req.(*JoinServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinServerRegistry_UpdateJoinServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJoinServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServerRegistryServer).UpdateJoinServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.JoinServerRegistry/UpdateJoinServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServerRegistryServer).UpdateJoinServer(ctx, req.(*UpdateJoinServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoinServerRegistry_DeleteJoinServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServerRegistryServer).DeleteJoinServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.JoinServerRegistry/DeleteJoinServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServerRegistryServer).DeleteJoinServer(ctx, req.(*JoinServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JoinServerRegistry_ServiceDesc is the grpc.ServiceDesc for JoinServerRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoinServerRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.JoinServerRegistry",
	HandlerType: (*JoinServerRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJoinServers",
			Handler:    _JoinServerRegistry_ListJoinServers_Handler,
		},
		{
			MethodName: "CreateJoinServer",
			Handler:    _JoinServerRegistry_CreateJoinServer_Handler,
		},
		{
			MethodName: "GetJoinServer",
			Handler:    _JoinServerRegistry_GetJoinServer_Handler,
		},
		{
			MethodName: "UpdateJoinServer",
			Handler:    _JoinServerRegistry_UpdateJoinServer_Handler,
		},
		{
			MethodName: "DeleteJoinServer",
			Handler:    _JoinServerRegistry_DeleteJoinServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}
