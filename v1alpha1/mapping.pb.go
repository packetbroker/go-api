// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v1alpha1/mapping.proto

package packetbroker

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GatewayVisibility struct {
	// Show location.
	Location bool `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
	// Show antenna placement (indoor/outdoor).
	AntennaPlacement bool `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3" json:"antenna_placement,omitempty"`
	// Show antenna count.
	AntennaCount bool `protobuf:"varint,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Show whether the gateway produces fine timestamps.
	FineTimestamps bool `protobuf:"varint,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
	// Show contact information.
	ContactInformation bool `protobuf:"varint,5,opt,name=contact_information,json=contactInformation,proto3" json:"contact_information,omitempty"`
	// Show status (online/offline).
	Status bool `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// Show receive and transmission counters.
	Counters bool `protobuf:"varint,7,opt,name=counters,proto3" json:"counters,omitempty"`
	// Show frequency plan.
	FrequencyPlan bool `protobuf:"varint,8,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
}

func (m *GatewayVisibility) Reset()         { *m = GatewayVisibility{} }
func (m *GatewayVisibility) String() string { return proto.CompactTextString(m) }
func (*GatewayVisibility) ProtoMessage()    {}
func (*GatewayVisibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa01a765a1ee4eb, []int{0}
}
func (m *GatewayVisibility) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayVisibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayVisibility.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayVisibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayVisibility.Merge(m, src)
}
func (m *GatewayVisibility) XXX_Size() int {
	return m.Size()
}
func (m *GatewayVisibility) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayVisibility.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayVisibility proto.InternalMessageInfo

func (m *GatewayVisibility) GetLocation() bool {
	if m != nil {
		return m.Location
	}
	return false
}

func (m *GatewayVisibility) GetAntennaPlacement() bool {
	if m != nil {
		return m.AntennaPlacement
	}
	return false
}

func (m *GatewayVisibility) GetAntennaCount() bool {
	if m != nil {
		return m.AntennaCount
	}
	return false
}

func (m *GatewayVisibility) GetFineTimestamps() bool {
	if m != nil {
		return m.FineTimestamps
	}
	return false
}

func (m *GatewayVisibility) GetContactInformation() bool {
	if m != nil {
		return m.ContactInformation
	}
	return false
}

func (m *GatewayVisibility) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *GatewayVisibility) GetCounters() bool {
	if m != nil {
		return m.Counters
	}
	return false
}

func (m *GatewayVisibility) GetFrequencyPlan() bool {
	if m != nil {
		return m.FrequencyPlan
	}
	return false
}

type GatewayFrequencyPlan struct {
	// Region of the frequency plan.
	Region         Region                          `protobuf:"varint,1,opt,name=region,proto3,enum=org.packetbroker.v1alpha1.Region" json:"region,omitempty"`
	UplinkChannels []*GatewayFrequencyPlan_Channel `protobuf:"bytes,2,rep,name=uplink_channels,json=uplinkChannels,proto3" json:"uplink_channels,omitempty"`
}

func (m *GatewayFrequencyPlan) Reset()         { *m = GatewayFrequencyPlan{} }
func (m *GatewayFrequencyPlan) String() string { return proto.CompactTextString(m) }
func (*GatewayFrequencyPlan) ProtoMessage()    {}
func (*GatewayFrequencyPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa01a765a1ee4eb, []int{1}
}
func (m *GatewayFrequencyPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayFrequencyPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayFrequencyPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayFrequencyPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayFrequencyPlan.Merge(m, src)
}
func (m *GatewayFrequencyPlan) XXX_Size() int {
	return m.Size()
}
func (m *GatewayFrequencyPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayFrequencyPlan.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayFrequencyPlan proto.InternalMessageInfo

func (m *GatewayFrequencyPlan) GetRegion() Region {
	if m != nil {
		return m.Region
	}
	return Region_UNKNOWN_REGION
}

func (m *GatewayFrequencyPlan) GetUplinkChannels() []*GatewayFrequencyPlan_Channel {
	if m != nil {
		return m.UplinkChannels
	}
	return nil
}

type GatewayFrequencyPlan_Channel struct {
	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Minimum data rate.
	MinDataRate uint32 `protobuf:"varint,2,opt,name=min_data_rate,json=minDataRate,proto3" json:"min_data_rate,omitempty"`
	// Maximum data rate.
	MaxDataRate uint32 `protobuf:"varint,3,opt,name=max_data_rate,json=maxDataRate,proto3" json:"max_data_rate,omitempty"`
	// Modulation.
	Modulation Modulation `protobuf:"varint,4,opt,name=modulation,proto3,enum=org.packetbroker.v1alpha1.Modulation" json:"modulation,omitempty"`
}

func (m *GatewayFrequencyPlan_Channel) Reset()         { *m = GatewayFrequencyPlan_Channel{} }
func (m *GatewayFrequencyPlan_Channel) String() string { return proto.CompactTextString(m) }
func (*GatewayFrequencyPlan_Channel) ProtoMessage()    {}
func (*GatewayFrequencyPlan_Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa01a765a1ee4eb, []int{1, 0}
}
func (m *GatewayFrequencyPlan_Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayFrequencyPlan_Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayFrequencyPlan_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayFrequencyPlan_Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayFrequencyPlan_Channel.Merge(m, src)
}
func (m *GatewayFrequencyPlan_Channel) XXX_Size() int {
	return m.Size()
}
func (m *GatewayFrequencyPlan_Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayFrequencyPlan_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayFrequencyPlan_Channel proto.InternalMessageInfo

func (m *GatewayFrequencyPlan_Channel) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayFrequencyPlan_Channel) GetMinDataRate() uint32 {
	if m != nil {
		return m.MinDataRate
	}
	return 0
}

func (m *GatewayFrequencyPlan_Channel) GetMaxDataRate() uint32 {
	if m != nil {
		return m.MaxDataRate
	}
	return 0
}

func (m *GatewayFrequencyPlan_Channel) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

type Gateway struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,2,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// Unique identifier of the gateway.
	Eui uint64 `protobuf:"fixed64,3,opt,name=eui,proto3" json:"eui,omitempty"`
	// Timestamp when the gateway was last updated.
	UpdatedAt *types.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Types that are valid to be assigned to Location:
	//	*Gateway_Terrestrial_
	//	*Gateway_Satellite_
	Location isGateway_Location `protobuf_oneof:"location"`
	// Contact name.
	// Subscribing Home Networks receive this value if the Gateway Visibility has contact_information set.
	ContactName string `protobuf:"bytes,7,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	// Contact email address.
	// Subscribing Home Networks receive this value if the Gateway Visibility has contact_information set.
	ContactEmail string `protobuf:"bytes,8,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	// Contact URL.
	// Subscribing Home Networks receive this value if the Gateway Visibility has contact_information set.
	ContactUrl string `protobuf:"bytes,9,opt,name=contact_url,json=contactUrl,proto3" json:"contact_url,omitempty"`
	// Indicates whether the gateway is online.
	// Subscribing Home Networks receive this value if the Gateway Visibility has status set.
	Online *types.BoolValue `protobuf:"bytes,10,opt,name=online,proto3" json:"online,omitempty"`
	// Total number of received messages.
	// Subscribing Home Networks receive this value if the Gateway Visibility has counters set.
	RxCount *types.UInt64Value `protobuf:"bytes,11,opt,name=rx_count,json=rxCount,proto3" json:"rx_count,omitempty"`
	// Number of transmitted messages.
	// Subscribing Home Networks receive this value if the Gateway Visibility has counters set.
	TxCount *types.UInt64Value `protobuf:"bytes,12,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	// Frequency plan of the gateway.
	// Subscribing Home Networks receive this value if the Gateway Visibility has frequency_plan set.
	FrequencyPlan *GatewayFrequencyPlan `protobuf:"bytes,13,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
}

func (m *Gateway) Reset()         { *m = Gateway{} }
func (m *Gateway) String() string { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()    {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa01a765a1ee4eb, []int{2}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(m, src)
}
func (m *Gateway) XXX_Size() int {
	return m.Size()
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

type isGateway_Location interface {
	isGateway_Location()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Gateway_Terrestrial_ struct {
	Terrestrial *Gateway_Terrestrial `protobuf:"bytes,5,opt,name=terrestrial,proto3,oneof" json:"terrestrial,omitempty"`
}
type Gateway_Satellite_ struct {
	Satellite *Gateway_Satellite `protobuf:"bytes,6,opt,name=satellite,proto3,oneof" json:"satellite,omitempty"`
}

func (*Gateway_Terrestrial_) isGateway_Location() {}
func (*Gateway_Satellite_) isGateway_Location()   {}

func (m *Gateway) GetLocation() isGateway_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Gateway) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *Gateway) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *Gateway) GetEui() uint64 {
	if m != nil {
		return m.Eui
	}
	return 0
}

func (m *Gateway) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Gateway) GetTerrestrial() *Gateway_Terrestrial {
	if x, ok := m.GetLocation().(*Gateway_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (m *Gateway) GetSatellite() *Gateway_Satellite {
	if x, ok := m.GetLocation().(*Gateway_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

func (m *Gateway) GetContactName() string {
	if m != nil {
		return m.ContactName
	}
	return ""
}

func (m *Gateway) GetContactEmail() string {
	if m != nil {
		return m.ContactEmail
	}
	return ""
}

func (m *Gateway) GetContactUrl() string {
	if m != nil {
		return m.ContactUrl
	}
	return ""
}

func (m *Gateway) GetOnline() *types.BoolValue {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *Gateway) GetRxCount() *types.UInt64Value {
	if m != nil {
		return m.RxCount
	}
	return nil
}

func (m *Gateway) GetTxCount() *types.UInt64Value {
	if m != nil {
		return m.TxCount
	}
	return nil
}

func (m *Gateway) GetFrequencyPlan() *GatewayFrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Gateway) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Gateway_Terrestrial_)(nil),
		(*Gateway_Satellite_)(nil),
	}
}

type Gateway_Terrestrial struct {
	// Location of the (first) antenna.
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Antenna placement (indoor/outdoor).
	// Subscribing Home Networks receive this value if the Gateway Visibility has antenna_placement set.
	AntennaPlacement TerrestrialAntennaPlacement `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3,enum=org.packetbroker.v1alpha1.TerrestrialAntennaPlacement" json:"antenna_placement,omitempty"`
	// Number of antennas.
	// Subscribing Home Networks receive this value if the Gateway Visibility has antenna_count set.
	AntennaCount *types.UInt32Value `protobuf:"bytes,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Indicates whether the gateway produces fine timestamps.
	// Subscribing Home Networks receive this value if the Gateway Visibility has fine_timestamps set.
	FineTimestamps *types.BoolValue `protobuf:"bytes,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
}

func (m *Gateway_Terrestrial) Reset()         { *m = Gateway_Terrestrial{} }
func (m *Gateway_Terrestrial) String() string { return proto.CompactTextString(m) }
func (*Gateway_Terrestrial) ProtoMessage()    {}
func (*Gateway_Terrestrial) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa01a765a1ee4eb, []int{2, 0}
}
func (m *Gateway_Terrestrial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateway_Terrestrial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateway_Terrestrial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gateway_Terrestrial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway_Terrestrial.Merge(m, src)
}
func (m *Gateway_Terrestrial) XXX_Size() int {
	return m.Size()
}
func (m *Gateway_Terrestrial) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway_Terrestrial.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway_Terrestrial proto.InternalMessageInfo

func (m *Gateway_Terrestrial) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Gateway_Terrestrial) GetAntennaPlacement() TerrestrialAntennaPlacement {
	if m != nil {
		return m.AntennaPlacement
	}
	return TerrestrialAntennaPlacement_UNKNOWN_PLACEMENT
}

func (m *Gateway_Terrestrial) GetAntennaCount() *types.UInt32Value {
	if m != nil {
		return m.AntennaCount
	}
	return nil
}

func (m *Gateway_Terrestrial) GetFineTimestamps() *types.BoolValue {
	if m != nil {
		return m.FineTimestamps
	}
	return nil
}

type Gateway_Satellite struct {
	// Satellite location.
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Field of view (meters).
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	FieldOfView float64 `protobuf:"fixed64,2,opt,name=field_of_view,json=fieldOfView,proto3" json:"field_of_view,omitempty"`
	// Trajectory, typically containing the recent past and projected path.
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	Trajectory []*TimedLocation `protobuf:"bytes,3,rep,name=trajectory,proto3" json:"trajectory,omitempty"`
}

func (m *Gateway_Satellite) Reset()         { *m = Gateway_Satellite{} }
func (m *Gateway_Satellite) String() string { return proto.CompactTextString(m) }
func (*Gateway_Satellite) ProtoMessage()    {}
func (*Gateway_Satellite) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa01a765a1ee4eb, []int{2, 1}
}
func (m *Gateway_Satellite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateway_Satellite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateway_Satellite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gateway_Satellite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway_Satellite.Merge(m, src)
}
func (m *Gateway_Satellite) XXX_Size() int {
	return m.Size()
}
func (m *Gateway_Satellite) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway_Satellite.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway_Satellite proto.InternalMessageInfo

func (m *Gateway_Satellite) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Gateway_Satellite) GetFieldOfView() float64 {
	if m != nil {
		return m.FieldOfView
	}
	return 0
}

func (m *Gateway_Satellite) GetTrajectory() []*TimedLocation {
	if m != nil {
		return m.Trajectory
	}
	return nil
}

type Gateways struct {
	Gateways []*Gateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
}

func (m *Gateways) Reset()         { *m = Gateways{} }
func (m *Gateways) String() string { return proto.CompactTextString(m) }
func (*Gateways) ProtoMessage()    {}
func (*Gateways) Descriptor() ([]byte, []int) {
	return fileDescriptor_baa01a765a1ee4eb, []int{3}
}
func (m *Gateways) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateways) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateways.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gateways) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateways.Merge(m, src)
}
func (m *Gateways) XXX_Size() int {
	return m.Size()
}
func (m *Gateways) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateways.DiscardUnknown(m)
}

var xxx_messageInfo_Gateways proto.InternalMessageInfo

func (m *Gateways) GetGateways() []*Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayVisibility)(nil), "org.packetbroker.v1alpha1.GatewayVisibility")
	proto.RegisterType((*GatewayFrequencyPlan)(nil), "org.packetbroker.v1alpha1.GatewayFrequencyPlan")
	proto.RegisterType((*GatewayFrequencyPlan_Channel)(nil), "org.packetbroker.v1alpha1.GatewayFrequencyPlan.Channel")
	proto.RegisterType((*Gateway)(nil), "org.packetbroker.v1alpha1.Gateway")
	proto.RegisterType((*Gateway_Terrestrial)(nil), "org.packetbroker.v1alpha1.Gateway.Terrestrial")
	proto.RegisterType((*Gateway_Satellite)(nil), "org.packetbroker.v1alpha1.Gateway.Satellite")
	proto.RegisterType((*Gateways)(nil), "org.packetbroker.v1alpha1.Gateways")
}

func init() {
	proto.RegisterFile("packetbroker/api/v1alpha1/mapping.proto", fileDescriptor_baa01a765a1ee4eb)
}

var fileDescriptor_baa01a765a1ee4eb = []byte{
	// 917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xdf, 0x6e, 0x1b, 0x45,
	0x14, 0xc6, 0xfd, 0x27, 0x38, 0xf6, 0xd9, 0xd8, 0x4d, 0x07, 0x84, 0x16, 0xab, 0x72, 0x5b, 0x57,
	0x51, 0x2d, 0x01, 0x6b, 0xd5, 0x45, 0x8d, 0x2a, 0x24, 0x50, 0x12, 0x4a, 0x13, 0x54, 0x4a, 0x35,
	0xb4, 0xb9, 0xe0, 0x66, 0x99, 0xec, 0x8e, 0xdd, 0x21, 0xb3, 0x33, 0xcb, 0xec, 0x6c, 0x9d, 0xbc,
	0x05, 0xef, 0x82, 0xd4, 0x0b, 0x78, 0x01, 0x2e, 0x7b, 0xc9, 0x25, 0x4a, 0x6e, 0x79, 0x08, 0xe4,
	0xd9, 0xd9, 0xf5, 0xc6, 0x8d, 0xdd, 0xa0, 0xde, 0x79, 0xce, 0xfc, 0xbe, 0xb3, 0x67, 0xce, 0x9c,
	0xf9, 0x0c, 0x77, 0x63, 0x12, 0x1c, 0x53, 0x7d, 0xa4, 0xe4, 0x31, 0x55, 0x43, 0x12, 0xb3, 0xe1,
	0xab, 0x7b, 0x84, 0xc7, 0x2f, 0xc9, 0xbd, 0x61, 0x44, 0xe2, 0x98, 0x89, 0x89, 0x17, 0x2b, 0xa9,
	0x25, 0xfa, 0x44, 0xaa, 0x89, 0x57, 0x86, 0xbd, 0x1c, 0xec, 0xde, 0x9c, 0x48, 0x39, 0xe1, 0x74,
	0x68, 0xc0, 0xa3, 0x74, 0x3c, 0xd4, 0x2c, 0xa2, 0x89, 0x26, 0x51, 0x9c, 0x69, 0xbb, 0xbd, 0x45,
	0x60, 0xaa, 0x48, 0x1c, 0x53, 0x95, 0xd8, 0xfd, 0xad, 0xe5, 0x45, 0x50, 0x91, 0x46, 0x39, 0x36,
	0x58, 0x8e, 0x71, 0x19, 0x10, 0xcd, 0xa4, 0xc8, 0xc8, 0xfe, 0xeb, 0x1a, 0x5c, 0x7f, 0x4c, 0x34,
	0x9d, 0x92, 0xd3, 0x43, 0x96, 0xb0, 0x23, 0xc6, 0x99, 0x3e, 0x45, 0x5d, 0x68, 0xe6, 0x9c, 0x5b,
	0xbd, 0x55, 0x1d, 0x34, 0x71, 0xb1, 0x46, 0x9f, 0xc2, 0x75, 0x22, 0x34, 0x15, 0x82, 0xf8, 0x31,
	0x27, 0x01, 0x8d, 0xa8, 0xd0, 0x6e, 0xcd, 0x40, 0x9b, 0x76, 0xe3, 0x59, 0x1e, 0x47, 0x77, 0xa0,
	0x9d, 0xc3, 0x81, 0x4c, 0x85, 0x76, 0xeb, 0x06, 0xdc, 0xb0, 0xc1, 0xbd, 0x59, 0x0c, 0xdd, 0x85,
	0x6b, 0x63, 0x26, 0xa8, 0x5f, 0x34, 0x23, 0x71, 0xd7, 0x0c, 0xd6, 0x99, 0x85, 0x9f, 0x17, 0x51,
	0x34, 0x84, 0x0f, 0x03, 0x29, 0x34, 0x09, 0xb4, 0xcf, 0xc4, 0x58, 0xaa, 0x28, 0xab, 0xf0, 0x03,
	0x03, 0x23, 0xbb, 0x75, 0x30, 0xdf, 0x41, 0x1f, 0x43, 0x23, 0xd1, 0x44, 0xa7, 0x89, 0xdb, 0x30,
	0x8c, 0x5d, 0xcd, 0xce, 0x67, 0xca, 0xa1, 0x2a, 0x71, 0xd7, 0xb3, 0xf3, 0xe5, 0x6b, 0xb4, 0x05,
	0x9d, 0xb1, 0xa2, 0xbf, 0xa6, 0x54, 0x04, 0xa7, 0xb3, 0x13, 0x0a, 0xb7, 0x69, 0x88, 0x76, 0x11,
	0x7d, 0xc6, 0x89, 0xe8, 0xff, 0x5b, 0x83, 0x8f, 0x6c, 0xe3, 0xbe, 0x2d, 0x6f, 0xa0, 0x87, 0xd0,
	0x50, 0x74, 0x92, 0x77, 0xae, 0x33, 0xba, 0xed, 0x2d, 0x9d, 0x07, 0x0f, 0x1b, 0x10, 0x5b, 0x01,
	0xfa, 0x19, 0xae, 0xa5, 0x31, 0x67, 0xe2, 0xd8, 0x0f, 0x5e, 0x12, 0x21, 0x28, 0x4f, 0xdc, 0xda,
	0xad, 0xfa, 0xc0, 0x19, 0x6d, 0xaf, 0xc8, 0x71, 0x59, 0x11, 0xde, 0x5e, 0xa6, 0xc7, 0x9d, 0x2c,
	0x9f, 0x5d, 0x26, 0xdd, 0xd7, 0x55, 0x58, 0xb7, 0x0b, 0x74, 0x03, 0x5a, 0xc5, 0x91, 0x4c, 0xad,
	0x6b, 0x78, 0x1e, 0x40, 0x7d, 0x68, 0x47, 0x4c, 0xf8, 0x21, 0xd1, 0xc4, 0x57, 0x44, 0x53, 0x73,
	0xc5, 0x6d, 0xec, 0x44, 0x4c, 0x7c, 0x43, 0x34, 0xc1, 0x44, 0x53, 0xc3, 0x90, 0x93, 0x12, 0x53,
	0xb7, 0x0c, 0x39, 0x29, 0x98, 0x47, 0x00, 0x91, 0x0c, 0x53, 0x9e, 0x5d, 0xd5, 0x9a, 0x69, 0xc9,
	0xd6, 0x8a, 0xe3, 0x7c, 0x5f, 0xc0, 0xb8, 0x24, 0xec, 0xff, 0xde, 0x82, 0x75, 0x7b, 0x52, 0x34,
	0x80, 0xcd, 0xb1, 0x54, 0x53, 0xa2, 0x42, 0xaa, 0x7c, 0x41, 0xb5, 0xcf, 0x42, 0x53, 0x7f, 0x1b,
	0x77, 0x8a, 0xf8, 0x53, 0xaa, 0x0f, 0x42, 0x74, 0x1b, 0x36, 0xe6, 0x24, 0x0b, 0xcd, 0x19, 0x5a,
	0xd8, 0x29, 0x62, 0x07, 0x21, 0xda, 0x84, 0x3a, 0x4d, 0x99, 0xa9, 0xbc, 0x81, 0x67, 0x3f, 0xd1,
	0x43, 0x80, 0x34, 0x0e, 0x89, 0xa6, 0xa1, 0x4f, 0xb4, 0xa9, 0xd8, 0x19, 0x75, 0xbd, 0xec, 0x61,
	0x7a, 0xf9, 0xc3, 0xf4, 0x8a, 0xb1, 0xc4, 0x2d, 0x4b, 0xef, 0x68, 0x84, 0xc1, 0xd1, 0x54, 0x29,
	0x9a, 0x68, 0xc5, 0x08, 0x37, 0x83, 0xe9, 0x8c, 0xbc, 0x77, 0x5f, 0x9e, 0xf7, 0x7c, 0xae, 0xda,
	0xaf, 0xe0, 0x72, 0x12, 0xf4, 0x04, 0x5a, 0x09, 0xd1, 0x94, 0x73, 0xa6, 0xa9, 0x19, 0x63, 0x67,
	0xf4, 0xd9, 0x15, 0x32, 0xfe, 0x98, 0x6b, 0xf6, 0x2b, 0x78, 0x9e, 0x60, 0xd6, 0x91, 0xfc, 0x09,
	0x09, 0x12, 0x51, 0x33, 0xfd, 0x2d, 0xec, 0xd8, 0xd8, 0x53, 0x12, 0xd1, 0xd9, 0x9b, 0xcd, 0x11,
	0x1a, 0x11, 0xc6, 0xcd, 0xfc, 0xb7, 0x70, 0xae, 0x7b, 0x34, 0x8b, 0xa1, 0x9b, 0x90, 0x6b, 0xfc,
	0x54, 0x71, 0xb7, 0x65, 0x10, 0xb0, 0xa1, 0x17, 0x8a, 0xa3, 0x11, 0x34, 0xa4, 0xe0, 0x4c, 0x50,
	0x17, 0x96, 0x74, 0x70, 0x57, 0x4a, 0x7e, 0x48, 0x78, 0x4a, 0xb1, 0x25, 0xd1, 0x36, 0x34, 0xd5,
	0x89, 0x35, 0x0a, 0xc7, 0xa8, 0x6e, 0xbc, 0xa5, 0x7a, 0x71, 0x20, 0xf4, 0x83, 0x2f, 0x32, 0xdd,
	0xba, 0x3a, 0xc9, 0x1c, 0x64, 0x1b, 0x9a, 0x3a, 0x17, 0x6e, 0x5c, 0x45, 0xa8, 0xad, 0xf0, 0xf0,
	0xad, 0xc7, 0xde, 0x36, 0xf2, 0xe1, 0xff, 0x7c, 0x70, 0x0b, 0xee, 0xd0, 0xfd, 0xb3, 0x06, 0x4e,
	0xe9, 0x4e, 0xd1, 0xd7, 0x0b, 0x86, 0xea, 0x8c, 0xee, 0xac, 0xf8, 0xc2, 0x13, 0x8b, 0x96, 0x5c,
	0x37, 0x58, 0xe6, 0xba, 0x9d, 0xd1, 0x83, 0x15, 0x99, 0x4a, 0x35, 0xec, 0x2c, 0x78, 0xf3, 0x25,
	0x6e, 0xbd, 0x73, 0x99, 0x5b, 0x2f, 0xeb, 0xe5, 0xfd, 0x51, 0xd6, 0xcb, 0x8b, 0x5e, 0xbe, 0x77,
	0xb9, 0x97, 0xaf, 0xbe, 0xff, 0x05, 0x9f, 0xef, 0xfe, 0x51, 0x85, 0x56, 0x31, 0xbf, 0xef, 0xdf,
	0xbb, 0x3e, 0xb4, 0xc7, 0x8c, 0xf2, 0xd0, 0x97, 0x63, 0xff, 0x15, 0xa3, 0x53, 0xd3, 0xb7, 0x2a,
	0x76, 0x4c, 0xf0, 0x87, 0xf1, 0x21, 0xa3, 0x53, 0xb4, 0x0f, 0xa0, 0x15, 0xf9, 0x85, 0x06, 0x5a,
	0xaa, 0x53, 0xb7, 0x6e, 0x5c, 0x77, 0xb0, 0xaa, 0xb1, 0x2c, 0xa2, 0x61, 0xf1, 0xad, 0x92, 0x76,
	0x17, 0xe6, 0xe5, 0xf6, 0xbf, 0x83, 0xa6, 0x9d, 0x96, 0x04, 0x7d, 0x05, 0xcd, 0x89, 0xfd, 0xed,
	0x56, 0x4d, 0xfe, 0xfe, 0xbb, 0x87, 0x0c, 0x17, 0x9a, 0xdd, 0xc7, 0x7f, 0x9d, 0xf5, 0xaa, 0x6f,
	0xce, 0x7a, 0xd5, 0x7f, 0xce, 0x7a, 0xd5, 0xdf, 0xce, 0x7b, 0x95, 0x37, 0xe7, 0xbd, 0xca, 0xdf,
	0xe7, 0xbd, 0xca, 0x4f, 0x9f, 0x4f, 0xe4, 0xc5, 0x2c, 0x52, 0x4d, 0x2e, 0xfc, 0xe9, 0x7f, 0x59,
	0xde, 0x3d, 0x6a, 0x98, 0x1b, 0xb8, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x6a, 0x36,
	0x7b, 0xd1, 0x08, 0x00, 0x00,
}

func (m *GatewayVisibility) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayVisibility) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayVisibility) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyPlan {
		i--
		if m.FrequencyPlan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Counters {
		i--
		if m.Counters {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ContactInformation {
		i--
		if m.ContactInformation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FineTimestamps {
		i--
		if m.FineTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AntennaCount {
		i--
		if m.AntennaCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AntennaPlacement {
		i--
		if m.AntennaPlacement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Location {
		i--
		if m.Location {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayFrequencyPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayFrequencyPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayFrequencyPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UplinkChannels) > 0 {
		for iNdEx := len(m.UplinkChannels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UplinkChannels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapping(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Region != 0 {
		i = encodeVarintMapping(dAtA, i, uint64(m.Region))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayFrequencyPlan_Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayFrequencyPlan_Channel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayFrequencyPlan_Channel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Modulation != 0 {
		i = encodeVarintMapping(dAtA, i, uint64(m.Modulation))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxDataRate != 0 {
		i = encodeVarintMapping(dAtA, i, uint64(m.MaxDataRate))
		i--
		dAtA[i] = 0x18
	}
	if m.MinDataRate != 0 {
		i = encodeVarintMapping(dAtA, i, uint64(m.MinDataRate))
		i--
		dAtA[i] = 0x10
	}
	if m.Frequency != 0 {
		i = encodeVarintMapping(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyPlan != nil {
		{
			size, err := m.FrequencyPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.TxCount != nil {
		{
			size, err := m.TxCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RxCount != nil {
		{
			size, err := m.RxCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Online != nil {
		{
			size, err := m.Online.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.ContactUrl) > 0 {
		i -= len(m.ContactUrl)
		copy(dAtA[i:], m.ContactUrl)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.ContactUrl)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ContactEmail) > 0 {
		i -= len(m.ContactEmail)
		copy(dAtA[i:], m.ContactEmail)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.ContactEmail)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ContactName) > 0 {
		i -= len(m.ContactName)
		copy(dAtA[i:], m.ContactName)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.ContactName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Location != nil {
		{
			size := m.Location.Size()
			i -= size
			if _, err := m.Location.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Eui != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Eui))
		i--
		dAtA[i] = 0x19
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMapping(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMapping(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Gateway_Terrestrial_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateway_Terrestrial_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Terrestrial != nil {
		{
			size, err := m.Terrestrial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Gateway_Satellite_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateway_Satellite_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Satellite != nil {
		{
			size, err := m.Satellite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Gateway_Terrestrial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway_Terrestrial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateway_Terrestrial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FineTimestamps != nil {
		{
			size, err := m.FineTimestamps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AntennaCount != nil {
		{
			size, err := m.AntennaCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AntennaPlacement != 0 {
		i = encodeVarintMapping(dAtA, i, uint64(m.AntennaPlacement))
		i--
		dAtA[i] = 0x10
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gateway_Satellite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway_Satellite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateway_Satellite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trajectory) > 0 {
		for iNdEx := len(m.Trajectory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trajectory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapping(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.FieldOfView != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FieldOfView))))
		i--
		dAtA[i] = 0x11
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMapping(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gateways) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateways) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateways) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMapping(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMapping(dAtA []byte, offset int, v uint64) int {
	offset -= sovMapping(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GatewayVisibility) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location {
		n += 2
	}
	if m.AntennaPlacement {
		n += 2
	}
	if m.AntennaCount {
		n += 2
	}
	if m.FineTimestamps {
		n += 2
	}
	if m.ContactInformation {
		n += 2
	}
	if m.Status {
		n += 2
	}
	if m.Counters {
		n += 2
	}
	if m.FrequencyPlan {
		n += 2
	}
	return n
}

func (m *GatewayFrequencyPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != 0 {
		n += 1 + sovMapping(uint64(m.Region))
	}
	if len(m.UplinkChannels) > 0 {
		for _, e := range m.UplinkChannels {
			l = e.Size()
			n += 1 + l + sovMapping(uint64(l))
		}
	}
	return n
}

func (m *GatewayFrequencyPlan_Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovMapping(uint64(m.Frequency))
	}
	if m.MinDataRate != 0 {
		n += 1 + sovMapping(uint64(m.MinDataRate))
	}
	if m.MaxDataRate != 0 {
		n += 1 + sovMapping(uint64(m.MaxDataRate))
	}
	if m.Modulation != 0 {
		n += 1 + sovMapping(uint64(m.Modulation))
	}
	return n
}

func (m *Gateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovMapping(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.Eui != 0 {
		n += 9
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.Location != nil {
		n += m.Location.Size()
	}
	l = len(m.ContactName)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	l = len(m.ContactEmail)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	l = len(m.ContactUrl)
	if l > 0 {
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.Online != nil {
		l = m.Online.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.RxCount != nil {
		l = m.RxCount.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.TxCount != nil {
		l = m.TxCount.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.FrequencyPlan != nil {
		l = m.FrequencyPlan.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	return n
}

func (m *Gateway_Terrestrial_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terrestrial != nil {
		l = m.Terrestrial.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	return n
}
func (m *Gateway_Satellite_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Satellite != nil {
		l = m.Satellite.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	return n
}
func (m *Gateway_Terrestrial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.AntennaPlacement != 0 {
		n += 1 + sovMapping(uint64(m.AntennaPlacement))
	}
	if m.AntennaCount != nil {
		l = m.AntennaCount.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.FineTimestamps != nil {
		l = m.FineTimestamps.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	return n
}

func (m *Gateway_Satellite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovMapping(uint64(l))
	}
	if m.FieldOfView != 0 {
		n += 9
	}
	if len(m.Trajectory) > 0 {
		for _, e := range m.Trajectory {
			l = e.Size()
			n += 1 + l + sovMapping(uint64(l))
		}
	}
	return n
}

func (m *Gateways) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovMapping(uint64(l))
		}
	}
	return n
}

func sovMapping(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMapping(x uint64) (n int) {
	return sovMapping(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GatewayVisibility) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayVisibility: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayVisibility: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaPlacement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AntennaPlacement = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AntennaCount = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FineTimestamps = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInformation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContactInformation = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Counters = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyPlan = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayFrequencyPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayFrequencyPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayFrequencyPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= Region(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkChannels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UplinkChannels = append(m.UplinkChannels, &GatewayFrequencyPlan_Channel{})
			if err := m.UplinkChannels[len(m.UplinkChannels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayFrequencyPlan_Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDataRate", wireType)
			}
			m.MinDataRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDataRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDataRate", wireType)
			}
			m.MaxDataRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDataRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modulation", wireType)
			}
			m.Modulation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Modulation |= Modulation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eui", wireType)
			}
			m.Eui = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Eui = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terrestrial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Gateway_Terrestrial{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Location = &Gateway_Terrestrial_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Satellite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Gateway_Satellite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Location = &Gateway_Satellite_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Online == nil {
				m.Online = &types.BoolValue{}
			}
			if err := m.Online.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxCount == nil {
				m.RxCount = &types.UInt64Value{}
			}
			if err := m.RxCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxCount == nil {
				m.TxCount = &types.UInt64Value{}
			}
			if err := m.TxCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrequencyPlan == nil {
				m.FrequencyPlan = &GatewayFrequencyPlan{}
			}
			if err := m.FrequencyPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateway_Terrestrial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Terrestrial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Terrestrial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaPlacement", wireType)
			}
			m.AntennaPlacement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AntennaPlacement |= TerrestrialAntennaPlacement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AntennaCount == nil {
				m.AntennaCount = &types.UInt32Value{}
			}
			if err := m.AntennaCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FineTimestamps == nil {
				m.FineTimestamps = &types.BoolValue{}
			}
			if err := m.FineTimestamps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateway_Satellite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Satellite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Satellite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldOfView", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FieldOfView = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trajectory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trajectory = append(m.Trajectory, &TimedLocation{})
			if err := m.Trajectory[len(m.Trajectory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateways) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateways: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateways: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMapping
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMapping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMapping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMapping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMapping(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMapping
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMapping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMapping
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMapping
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMapping
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMapping        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMapping          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMapping = fmt.Errorf("proto: unexpected end of group")
)
