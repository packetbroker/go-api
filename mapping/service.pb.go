// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/mapping/v1/service.proto

package mappingpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDefaultGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId   string   `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultGatewayVisibilityRequest) Reset()      { *m = GetDefaultGatewayVisibilityRequest{} }
func (*GetDefaultGatewayVisibilityRequest) ProtoMessage() {}
func (*GetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{0}
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

type SetDefaultGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// New default Gateway Visibility.
	Visibility           *v3.GatewayVisibility `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SetDefaultGatewayVisibilityRequest) Reset()      { *m = SetDefaultGatewayVisibilityRequest{} }
func (*SetDefaultGatewayVisibilityRequest) ProtoMessage() {}
func (*SetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{1}
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDefaultGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDefaultGatewayVisibilityRequest.Merge(m, src)
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDefaultGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDefaultGatewayVisibilityRequest proto.InternalMessageInfo

func (m *SetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SetDefaultGatewayVisibilityRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *SetDefaultGatewayVisibilityRequest) GetVisibility() *v3.GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type GetHomeNetworkGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId     uint32   `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Reset() {
	*m = GetHomeNetworkGatewayVisibilityRequest{}
}
func (*GetHomeNetworkGatewayVisibilityRequest) ProtoMessage() {}
func (*GetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{2}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

type SetHomeNetworkGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// New Gateway Visibility for the Home Network Member.
	Visibility           *v3.GatewayVisibility `protobuf:"bytes,4,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SetHomeNetworkGatewayVisibilityRequest) Reset() {
	*m = SetHomeNetworkGatewayVisibilityRequest{}
}
func (*SetHomeNetworkGatewayVisibilityRequest) ProtoMessage() {}
func (*SetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{3}
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest.Merge(m, src)
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest proto.InternalMessageInfo

func (m *SetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SetHomeNetworkGatewayVisibilityRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *SetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *SetHomeNetworkGatewayVisibilityRequest) GetVisibility() *v3.GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type GetGatewayVisibilityResponse struct {
	Visibility           *v3.GatewayVisibility `protobuf:"bytes,1,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetGatewayVisibilityResponse) Reset()      { *m = GetGatewayVisibilityResponse{} }
func (*GetGatewayVisibilityResponse) ProtoMessage() {}
func (*GetGatewayVisibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{4}
}
func (m *GetGatewayVisibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGatewayVisibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGatewayVisibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGatewayVisibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayVisibilityResponse.Merge(m, src)
}
func (m *GetGatewayVisibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGatewayVisibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayVisibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayVisibilityResponse proto.InternalMessageInfo

func (m *GetGatewayVisibilityResponse) GetVisibility() *v3.GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type UpdateForwarderGatewayRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Gateway to update.
	Gateway              *v3.Gateway `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateForwarderGatewayRequest) Reset()      { *m = UpdateForwarderGatewayRequest{} }
func (*UpdateForwarderGatewayRequest) ProtoMessage() {}
func (*UpdateForwarderGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{5}
}
func (m *UpdateForwarderGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateForwarderGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateForwarderGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateForwarderGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateForwarderGatewayRequest.Merge(m, src)
}
func (m *UpdateForwarderGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateForwarderGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateForwarderGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateForwarderGatewayRequest proto.InternalMessageInfo

func (m *UpdateForwarderGatewayRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *UpdateForwarderGatewayRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *UpdateForwarderGatewayRequest) GetGateway() *v3.Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

type ListHomeNetworkGatewaysRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Number of items to skip for pagination.
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit number items for pagination.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHomeNetworkGatewaysRequest) Reset()      { *m = ListHomeNetworkGatewaysRequest{} }
func (*ListHomeNetworkGatewaysRequest) ProtoMessage() {}
func (*ListHomeNetworkGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{6}
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHomeNetworkGatewaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHomeNetworkGatewaysRequest.Merge(m, src)
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHomeNetworkGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHomeNetworkGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHomeNetworkGatewaysRequest proto.InternalMessageInfo

func (m *ListHomeNetworkGatewaysRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *ListHomeNetworkGatewaysRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListHomeNetworkGatewaysRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListGatewaysResponse struct {
	Gateways []*v3.Gateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Total number of items.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGatewaysResponse) Reset()      { *m = ListGatewaysResponse{} }
func (*ListGatewaysResponse) ProtoMessage() {}
func (*ListGatewaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{7}
}
func (m *ListGatewaysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGatewaysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGatewaysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGatewaysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGatewaysResponse.Merge(m, src)
}
func (m *ListGatewaysResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListGatewaysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGatewaysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGatewaysResponse proto.InternalMessageInfo

func (m *ListGatewaysResponse) GetGateways() []*v3.Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *ListGatewaysResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetHomeNetworkGatewayRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,2,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,3,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Unique identifier of the gateway.
	Eui                  uint64   `protobuf:"varint,4,opt,name=eui,proto3" json:"eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHomeNetworkGatewayRequest) Reset()      { *m = GetHomeNetworkGatewayRequest{} }
func (*GetHomeNetworkGatewayRequest) ProtoMessage() {}
func (*GetHomeNetworkGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{8}
}
func (m *GetHomeNetworkGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHomeNetworkGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHomeNetworkGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHomeNetworkGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkGatewayRequest.Merge(m, src)
}
func (m *GetHomeNetworkGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHomeNetworkGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkGatewayRequest proto.InternalMessageInfo

func (m *GetHomeNetworkGatewayRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *GetHomeNetworkGatewayRequest) GetEui() uint64 {
	if m != nil {
		return m.Eui
	}
	return 0
}

type GetHomeNetworkGatewayResponse struct {
	Gateway              *v3.Gateway `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetHomeNetworkGatewayResponse) Reset()      { *m = GetHomeNetworkGatewayResponse{} }
func (*GetHomeNetworkGatewayResponse) ProtoMessage() {}
func (*GetHomeNetworkGatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{9}
}
func (m *GetHomeNetworkGatewayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHomeNetworkGatewayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHomeNetworkGatewayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHomeNetworkGatewayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkGatewayResponse.Merge(m, src)
}
func (m *GetHomeNetworkGatewayResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHomeNetworkGatewayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkGatewayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkGatewayResponse proto.InternalMessageInfo

func (m *GetHomeNetworkGatewayResponse) GetGateway() *v3.Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

type SubscribeHomeNetworkGatewaysRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Set of gateways to subscribe to.
	// Leave empty to subscribe to all gateways.
	Gateways []*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs `protobuf:"bytes,2,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Shared subscription group (optional).
	// Queue durability depends on the Mapper configuration.
	Group                string   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeHomeNetworkGatewaysRequest) Reset()      { *m = SubscribeHomeNetworkGatewaysRequest{} }
func (*SubscribeHomeNetworkGatewaysRequest) ProtoMessage() {}
func (*SubscribeHomeNetworkGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{10}
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest.Merge(m, src)
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest proto.InternalMessageInfo

func (m *SubscribeHomeNetworkGatewaysRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *SubscribeHomeNetworkGatewaysRequest) GetGateways() []*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *SubscribeHomeNetworkGatewaysRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Set of unique identifiers of gateways.
	// Leave empty to subscribe to all gateways of the Forwarder Member.
	Euis                 []uint64 `protobuf:"varint,3,rep,packed,name=euis,proto3" json:"euis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Reset() {
	*m = SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{}
}
func (*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) ProtoMessage() {}
func (*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5c53a99ca6e6b0e, []int{10, 0}
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs.Merge(m, src)
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs proto.InternalMessageInfo

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetEuis() []uint64 {
	if m != nil {
		return m.Euis
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.GetDefaultGatewayVisibilityRequest")
	golang_proto.RegisterType((*GetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.GetDefaultGatewayVisibilityRequest")
	proto.RegisterType((*SetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.SetDefaultGatewayVisibilityRequest")
	golang_proto.RegisterType((*SetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.SetDefaultGatewayVisibilityRequest")
	proto.RegisterType((*GetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.GetHomeNetworkGatewayVisibilityRequest")
	golang_proto.RegisterType((*GetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.GetHomeNetworkGatewayVisibilityRequest")
	proto.RegisterType((*SetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.SetHomeNetworkGatewayVisibilityRequest")
	golang_proto.RegisterType((*SetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v1.SetHomeNetworkGatewayVisibilityRequest")
	proto.RegisterType((*GetGatewayVisibilityResponse)(nil), "org.packetbroker.mapping.v1.GetGatewayVisibilityResponse")
	golang_proto.RegisterType((*GetGatewayVisibilityResponse)(nil), "org.packetbroker.mapping.v1.GetGatewayVisibilityResponse")
	proto.RegisterType((*UpdateForwarderGatewayRequest)(nil), "org.packetbroker.mapping.v1.UpdateForwarderGatewayRequest")
	golang_proto.RegisterType((*UpdateForwarderGatewayRequest)(nil), "org.packetbroker.mapping.v1.UpdateForwarderGatewayRequest")
	proto.RegisterType((*ListHomeNetworkGatewaysRequest)(nil), "org.packetbroker.mapping.v1.ListHomeNetworkGatewaysRequest")
	golang_proto.RegisterType((*ListHomeNetworkGatewaysRequest)(nil), "org.packetbroker.mapping.v1.ListHomeNetworkGatewaysRequest")
	proto.RegisterType((*ListGatewaysResponse)(nil), "org.packetbroker.mapping.v1.ListGatewaysResponse")
	golang_proto.RegisterType((*ListGatewaysResponse)(nil), "org.packetbroker.mapping.v1.ListGatewaysResponse")
	proto.RegisterType((*GetHomeNetworkGatewayRequest)(nil), "org.packetbroker.mapping.v1.GetHomeNetworkGatewayRequest")
	golang_proto.RegisterType((*GetHomeNetworkGatewayRequest)(nil), "org.packetbroker.mapping.v1.GetHomeNetworkGatewayRequest")
	proto.RegisterType((*GetHomeNetworkGatewayResponse)(nil), "org.packetbroker.mapping.v1.GetHomeNetworkGatewayResponse")
	golang_proto.RegisterType((*GetHomeNetworkGatewayResponse)(nil), "org.packetbroker.mapping.v1.GetHomeNetworkGatewayResponse")
	proto.RegisterType((*SubscribeHomeNetworkGatewaysRequest)(nil), "org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest")
	golang_proto.RegisterType((*SubscribeHomeNetworkGatewaysRequest)(nil), "org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest")
	proto.RegisterType((*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs)(nil), "org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest.ForwarderEUIs")
	golang_proto.RegisterType((*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs)(nil), "org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest.ForwarderEUIs")
}

func init() {
	proto.RegisterFile("packetbroker/api/mapping/v1/service.proto", fileDescriptor_c5c53a99ca6e6b0e)
}
func init() {
	golang_proto.RegisterFile("packetbroker/api/mapping/v1/service.proto", fileDescriptor_c5c53a99ca6e6b0e)
}

var fileDescriptor_c5c53a99ca6e6b0e = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x3d, 0x6c, 0x23, 0x55,
	0x10, 0xde, 0xf1, 0x9a, 0x03, 0x06, 0x0c, 0x66, 0xb1, 0x4e, 0x96, 0xef, 0xee, 0xc9, 0x2c, 0x52,
	0xe4, 0x2b, 0x58, 0x5f, 0x12, 0x09, 0x71, 0x77, 0x05, 0x88, 0xe3, 0xce, 0x44, 0xe2, 0x52, 0xd8,
	0x0a, 0x48, 0x34, 0xd1, 0xda, 0x7e, 0xde, 0x2c, 0xb1, 0xfd, 0x96, 0xdd, 0xb7, 0xb6, 0x52, 0x00,
	0x91, 0x68, 0xd2, 0x81, 0xa8, 0x10, 0x0d, 0x94, 0x29, 0x23, 0x21, 0xa1, 0x48, 0x34, 0x29, 0x53,
	0xa6, 0x23, 0x65, 0xbc, 0xdb, 0xa4, 0x4c, 0x19, 0x89, 0x06, 0x79, 0x7f, 0xec, 0x75, 0x1c, 0xaf,
	0x63, 0x07, 0x88, 0xae, 0xf2, 0x3e, 0xbf, 0x99, 0xf7, 0x7d, 0x33, 0xdf, 0xec, 0xcc, 0x5b, 0xbc,
	0x6f, 0xa8, 0xb5, 0x4d, 0xca, 0xab, 0x26, 0xdb, 0xa4, 0x66, 0x51, 0x35, 0xf4, 0x62, 0x4b, 0x35,
	0x0c, 0xbd, 0xad, 0x15, 0x3b, 0x8b, 0x45, 0x8b, 0x9a, 0x1d, 0xbd, 0x46, 0x15, 0xc3, 0x64, 0x9c,
	0x49, 0x77, 0x98, 0xa9, 0x29, 0x51, 0x73, 0x25, 0x30, 0x55, 0x3a, 0x8b, 0xb9, 0x3b, 0x1a, 0x63,
	0x5a, 0x93, 0x16, 0x3d, 0xd3, 0xaa, 0xdd, 0x28, 0xd2, 0x96, 0xc1, 0xb7, 0x7c, 0xcf, 0xdc, 0x3b,
	0x63, 0x20, 0x9d, 0xe5, 0x10, 0xc7, 0x37, 0x91, 0xb7, 0x01, 0xe5, 0x12, 0xe5, 0x9f, 0xd0, 0x86,
	0x6a, 0x37, 0x79, 0x49, 0xe5, 0xb4, 0xab, 0x6e, 0x7d, 0xae, 0x5b, 0x7a, 0x55, 0x6f, 0xea, 0x7c,
	0xab, 0x4c, 0xbf, 0xb6, 0xa9, 0xc5, 0xa5, 0x02, 0xa6, 0x1b, 0xcc, 0xec, 0xaa, 0x66, 0x9d, 0x9a,
	0xeb, 0x6d, 0xca, 0xd7, 0xf5, 0x7a, 0x16, 0xf2, 0x50, 0x48, 0x95, 0xdf, 0x18, 0xfc, 0xbf, 0x4a,
	0xf9, 0x4a, 0x5d, 0x7a, 0x80, 0x99, 0xa1, 0x65, 0xad, 0x69, 0x5b, 0x9c, 0x9a, 0x7d, 0xeb, 0x44,
	0x1e, 0x0a, 0xaf, 0x96, 0xa5, 0xc1, 0xde, 0x13, 0x7f, 0x6b, 0xa5, 0x2e, 0x1f, 0x02, 0xca, 0x95,
	0x1b, 0xa5, 0x20, 0x3d, 0x43, 0xec, 0x0c, 0x00, 0xb3, 0x62, 0x1e, 0x0a, 0xaf, 0x2d, 0x2d, 0x28,
	0x63, 0x79, 0xef, 0x2c, 0x2b, 0xe3, 0xf4, 0x22, 0x9e, 0xf2, 0xef, 0x80, 0x0b, 0x25, 0xca, 0x3f,
	0x65, 0x2d, 0xba, 0x4a, 0x79, 0x97, 0x99, 0x9b, 0x37, 0x12, 0xce, 0x7b, 0xf8, 0xf6, 0x06, 0x6b,
	0xd1, 0xfe, 0xb1, 0x7d, 0x0e, 0xe1, 0xf1, 0xa2, 0x77, 0x7c, 0x7a, 0x63, 0xc8, 0xce, 0x03, 0x90,
	0xff, 0x06, 0x5c, 0xa8, 0xbc, 0x68, 0xac, 0x2f, 0x68, 0x96, 0x9c, 0x5b, 0xb3, 0x06, 0xde, 0x2d,
	0xd1, 0xcb, 0xca, 0xce, 0x32, 0x58, 0xdb, 0xa2, 0x17, 0x70, 0xe0, 0x3a, 0xb5, 0x71, 0x6f, 0xcd,
	0xa8, 0xab, 0x9c, 0x3e, 0x0b, 0x63, 0x0f, 0x1c, 0xfe, 0x8f, 0xe4, 0xbe, 0x8f, 0x2f, 0x6b, 0x3e,
	0x5a, 0x50, 0xde, 0x77, 0xe3, 0x42, 0x28, 0x87, 0xc6, 0xf2, 0x37, 0x48, 0x3e, 0xd3, 0xad, 0x4b,
	0x6a, 0xc3, 0x0a, 0x59, 0x4f, 0x90, 0x0d, 0x26, 0xc8, 0x76, 0x1b, 0x6f, 0xb1, 0x46, 0xc3, 0xa2,
	0xdc, 0x23, 0x9b, 0x2a, 0x07, 0x2b, 0x29, 0x83, 0x2f, 0x35, 0xf5, 0x96, 0xce, 0x03, 0xbd, 0xfd,
	0x85, 0xdc, 0xc0, 0x4c, 0x1f, 0x7e, 0x88, 0x19, 0x88, 0xf2, 0x01, 0xbe, 0x12, 0x30, 0xb4, 0xb2,
	0x90, 0x17, 0xa7, 0xc6, 0x33, 0xb0, 0xee, 0xe3, 0x70, 0xc6, 0xd5, 0x66, 0x00, 0xef, 0x2f, 0xe4,
	0x3f, 0xc1, 0xab, 0x82, 0xf1, 0x30, 0xe7, 0x8c, 0xf2, 0x32, 0x29, 0x13, 0x33, 0x49, 0x29, 0x4e,
	0x94, 0x32, 0x8d, 0x22, 0xb5, 0x75, 0xaf, 0xe2, 0x93, 0xe5, 0xfe, 0xa3, 0xfc, 0x05, 0xde, 0x9b,
	0x40, 0x3e, 0x48, 0x57, 0x44, 0x7d, 0x98, 0x45, 0xfd, 0xbf, 0x12, 0xf8, 0x6e, 0xc5, 0xae, 0x5a,
	0x35, 0x53, 0xaf, 0xd2, 0x7f, 0xaf, 0x06, 0xbe, 0x8a, 0xa8, 0x97, 0xf0, 0xd4, 0x5b, 0x55, 0x62,
	0x86, 0x9c, 0x72, 0x05, 0x0a, 0xca, 0xe0, 0xa5, 0x7a, 0xba, 0xb6, 0x62, 0x8d, 0xea, 0xad, 0x99,
	0xcc, 0x36, 0x82, 0x84, 0xfa, 0x8b, 0xdc, 0x77, 0x98, 0x1a, 0x71, 0xf8, 0x4f, 0xdf, 0x3d, 0x09,
	0x93, 0xd4, 0xd6, 0xad, 0xac, 0x98, 0x17, 0x0b, 0xc9, 0xb2, 0xf7, 0xbc, 0xf4, 0x47, 0x12, 0xb3,
	0x63, 0xfd, 0xe2, 0xb9, 0xda, 0x56, 0x35, 0x6a, 0x4a, 0x3f, 0x01, 0x66, 0x86, 0x43, 0x79, 0xb8,
	0x2f, 0x7d, 0x18, 0x9b, 0xa6, 0xe9, 0x73, 0x3c, 0xf7, 0x70, 0xda, 0x01, 0x93, 0xfb, 0x20, 0xc3,
	0x4c, 0x65, 0x76, 0x4e, 0xd3, 0x07, 0x7b, 0xee, 0xb6, 0xe2, 0xdf, 0x61, 0x94, 0xf0, 0x0e, 0xa3,
	0x3c, 0xed, 0xdf, 0x61, 0xa4, 0x5f, 0x00, 0xb3, 0xa3, 0x65, 0x1d, 0x41, 0x7d, 0x32, 0x2d, 0x90,
	0x2b, 0x4c, 0xb3, 0xeb, 0x64, 0xa3, 0x8b, 0xd9, 0xca, 0x7c, 0xdc, 0xae, 0x36, 0x69, 0x27, 0x65,
	0x65, 0xa9, 0x83, 0x6f, 0x0e, 0x2a, 0xf7, 0xb9, 0x6a, 0x18, 0xd4, 0x94, 0x6a, 0x98, 0xf2, 0x07,
	0x4b, 0x70, 0x98, 0xf4, 0x28, 0x96, 0x40, 0xec, 0x10, 0x9a, 0x88, 0xfb, 0x83, 0x88, 0x6f, 0x45,
	0x78, 0x07, 0xd0, 0xdf, 0xe2, 0xeb, 0xd1, 0xfe, 0x2c, 0x3d, 0x8e, 0x45, 0x8e, 0x9f, 0x24, 0xb9,
	0xc5, 0xa9, 0xce, 0x63, 0x73, 0xe0, 0x7b, 0x40, 0x1c, 0xea, 0x24, 0x3d, 0x9c, 0xbd, 0x2a, 0x42,
	0xf0, 0x47, 0xf3, 0xb8, 0x06, 0x2c, 0x38, 0xa6, 0x07, 0x2d, 0x2a, 0xa4, 0xf2, 0xd1, 0x75, 0x3b,
	0x5a, 0x2e, 0xb6, 0x47, 0x3f, 0x80, 0x8f, 0x7f, 0x85, 0xc3, 0x1e, 0x81, 0xa3, 0x1e, 0x81, 0xe3,
	0x1e, 0x11, 0x4e, 0x7a, 0x44, 0x38, 0xed, 0x11, 0xe1, 0xac, 0x47, 0x84, 0xf3, 0x1e, 0x81, 0x6d,
	0x87, 0xc0, 0x8e, 0x43, 0x84, 0x5d, 0x87, 0xc0, 0x9e, 0x43, 0x84, 0x7d, 0x87, 0x08, 0x07, 0x0e,
	0x11, 0x0e, 0x1d, 0x02, 0x47, 0x0e, 0x81, 0x63, 0x87, 0x08, 0x27, 0x0e, 0x81, 0x53, 0x87, 0x08,
	0x67, 0x0e, 0x81, 0x73, 0x87, 0x08, 0xdb, 0x2e, 0x11, 0x76, 0x5c, 0x02, 0x3f, 0xba, 0x44, 0xf8,
	0xd9, 0x25, 0xf0, 0x9b, 0x4b, 0x84, 0x5d, 0x97, 0x08, 0x7b, 0x2e, 0x81, 0x7d, 0x97, 0xc0, 0x81,
	0x4b, 0xe0, 0xcb, 0xfb, 0x1a, 0x1b, 0x25, 0xc5, 0x4c, 0x2d, 0xfa, 0x01, 0xf3, 0x38, 0xf8, 0x35,
	0xaa, 0xd5, 0x5b, 0x5e, 0x0d, 0x2d, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x92, 0xec, 0x0c, 0xb6,
	0xed, 0x0c, 0x00, 0x00,
}

func (this *GetDefaultGatewayVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDefaultGatewayVisibilityRequest)
	if !ok {
		that2, ok := that.(GetDefaultGatewayVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	return true
}
func (this *SetDefaultGatewayVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetDefaultGatewayVisibilityRequest)
	if !ok {
		that2, ok := that.(SetDefaultGatewayVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if !this.Visibility.Equal(that1.Visibility) {
		return false
	}
	return true
}
func (this *GetHomeNetworkGatewayVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHomeNetworkGatewayVisibilityRequest)
	if !ok {
		that2, ok := that.(GetHomeNetworkGatewayVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	return true
}
func (this *SetHomeNetworkGatewayVisibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetHomeNetworkGatewayVisibilityRequest)
	if !ok {
		that2, ok := that.(SetHomeNetworkGatewayVisibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if !this.Visibility.Equal(that1.Visibility) {
		return false
	}
	return true
}
func (this *GetGatewayVisibilityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayVisibilityResponse)
	if !ok {
		that2, ok := that.(GetGatewayVisibilityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Visibility.Equal(that1.Visibility) {
		return false
	}
	return true
}
func (this *UpdateForwarderGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateForwarderGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateForwarderGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if !this.Gateway.Equal(that1.Gateway) {
		return false
	}
	return true
}
func (this *ListHomeNetworkGatewaysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHomeNetworkGatewaysRequest)
	if !ok {
		that2, ok := that.(ListHomeNetworkGatewaysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ListGatewaysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewaysResponse)
	if !ok {
		that2, ok := that.(ListGatewaysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *GetHomeNetworkGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHomeNetworkGatewayRequest)
	if !ok {
		that2, ok := that.(GetHomeNetworkGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if this.Eui != that1.Eui {
		return false
	}
	return true
}
func (this *GetHomeNetworkGatewayResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHomeNetworkGatewayResponse)
	if !ok {
		that2, ok := that.(GetHomeNetworkGatewayResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(that1.Gateway) {
		return false
	}
	return true
}
func (this *SubscribeHomeNetworkGatewaysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeHomeNetworkGatewaysRequest)
	if !ok {
		that2, ok := that.(SubscribeHomeNetworkGatewaysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return false
		}
	}
	if this.Group != that1.Group {
		return false
	}
	return true
}
func (this *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs)
	if !ok {
		that2, ok := that.(SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if len(this.Euis) != len(that1.Euis) {
		return false
	}
	for i := range this.Euis {
		if this.Euis[i] != that1.Euis[i] {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayVisibilityManagerClient is the client API for GatewayVisibilityManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayVisibilityManagerClient interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(ctx context.Context, in *SetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(ctx context.Context, in *SetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type gatewayVisibilityManagerClient struct {
	cc *grpc.ClientConn
}

func NewGatewayVisibilityManagerClient(cc *grpc.ClientConn) GatewayVisibilityManagerClient {
	return &gatewayVisibilityManagerClient{cc}
}

func (c *gatewayVisibilityManagerClient) GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetDefaultVisibility(ctx context.Context, in *SetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetHomeNetworkVisibility(ctx context.Context, in *SetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayVisibilityManagerServer is the server API for GatewayVisibilityManager service.
type GatewayVisibilityManagerServer interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(context.Context, *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(context.Context, *SetDefaultGatewayVisibilityRequest) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(context.Context, *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(context.Context, *SetHomeNetworkGatewayVisibilityRequest) (*types.Empty, error)
}

// UnimplementedGatewayVisibilityManagerServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayVisibilityManagerServer struct {
}

func (*UnimplementedGatewayVisibilityManagerServer) GetDefaultVisibility(ctx context.Context, req *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetDefaultVisibility(ctx context.Context, req *SetDefaultGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) GetHomeNetworkVisibility(ctx context.Context, req *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetHomeNetworkVisibility(ctx context.Context, req *SetHomeNetworkGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkVisibility not implemented")
}

func RegisterGatewayVisibilityManagerServer(s *grpc.Server, srv GatewayVisibilityManagerServer) {
	s.RegisterService(&_GatewayVisibilityManager_serviceDesc, srv)
}

func _GatewayVisibilityManager_GetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, req.(*GetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, req.(*SetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/GetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, req.(*GetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.GatewayVisibilityManager/SetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, req.(*SetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayVisibilityManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v1.GatewayVisibilityManager",
	HandlerType: (*GatewayVisibilityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_GetDefaultVisibility_Handler,
		},
		{
			MethodName: "SetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_SetDefaultVisibility_Handler,
		},
		{
			MethodName: "GetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler,
		},
		{
			MethodName: "SetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v1/service.proto",
}

// ForwarderMapperClient is the client API for ForwarderMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForwarderMapperClient interface {
	// Update a gateway.
	UpdateGateway(ctx context.Context, in *UpdateForwarderGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type forwarderMapperClient struct {
	cc *grpc.ClientConn
}

func NewForwarderMapperClient(cc *grpc.ClientConn) ForwarderMapperClient {
	return &forwarderMapperClient{cc}
}

func (c *forwarderMapperClient) UpdateGateway(ctx context.Context, in *UpdateForwarderGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.ForwarderMapper/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwarderMapperServer is the server API for ForwarderMapper service.
type ForwarderMapperServer interface {
	// Update a gateway.
	UpdateGateway(context.Context, *UpdateForwarderGatewayRequest) (*types.Empty, error)
}

// UnimplementedForwarderMapperServer can be embedded to have forward compatible implementations.
type UnimplementedForwarderMapperServer struct {
}

func (*UnimplementedForwarderMapperServer) UpdateGateway(ctx context.Context, req *UpdateForwarderGatewayRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}

func RegisterForwarderMapperServer(s *grpc.Server, srv ForwarderMapperServer) {
	s.RegisterService(&_ForwarderMapper_serviceDesc, srv)
}

func _ForwarderMapper_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForwarderGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderMapperServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.ForwarderMapper/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderMapperServer).UpdateGateway(ctx, req.(*UpdateForwarderGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForwarderMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v1.ForwarderMapper",
	HandlerType: (*ForwarderMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGateway",
			Handler:    _ForwarderMapper_UpdateGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v1/service.proto",
}

// HomeNetworkMapperClient is the client API for HomeNetworkMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeNetworkMapperClient interface {
	// List gateways.
	ListGateways(ctx context.Context, in *ListHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// Get a gateway.
	GetGateway(ctx context.Context, in *GetHomeNetworkGatewayRequest, opts ...grpc.CallOption) (*GetHomeNetworkGatewayResponse, error)
	// Subscribe to gateway updates.
	SubscribeGateway(ctx context.Context, in *SubscribeHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (HomeNetworkMapper_SubscribeGatewayClient, error)
}

type homeNetworkMapperClient struct {
	cc *grpc.ClientConn
}

func NewHomeNetworkMapperClient(cc *grpc.ClientConn) HomeNetworkMapperClient {
	return &homeNetworkMapperClient{cc}
}

func (c *homeNetworkMapperClient) ListGateways(ctx context.Context, in *ListHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.HomeNetworkMapper/ListGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkMapperClient) GetGateway(ctx context.Context, in *GetHomeNetworkGatewayRequest, opts ...grpc.CallOption) (*GetHomeNetworkGatewayResponse, error) {
	out := new(GetHomeNetworkGatewayResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v1.HomeNetworkMapper/GetGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkMapperClient) SubscribeGateway(ctx context.Context, in *SubscribeHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (HomeNetworkMapper_SubscribeGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HomeNetworkMapper_serviceDesc.Streams[0], "/org.packetbroker.mapping.v1.HomeNetworkMapper/SubscribeGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeNetworkMapperSubscribeGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HomeNetworkMapper_SubscribeGatewayClient interface {
	Recv() (*v3.Gateway, error)
	grpc.ClientStream
}

type homeNetworkMapperSubscribeGatewayClient struct {
	grpc.ClientStream
}

func (x *homeNetworkMapperSubscribeGatewayClient) Recv() (*v3.Gateway, error) {
	m := new(v3.Gateway)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeNetworkMapperServer is the server API for HomeNetworkMapper service.
type HomeNetworkMapperServer interface {
	// List gateways.
	ListGateways(context.Context, *ListHomeNetworkGatewaysRequest) (*ListGatewaysResponse, error)
	// Get a gateway.
	GetGateway(context.Context, *GetHomeNetworkGatewayRequest) (*GetHomeNetworkGatewayResponse, error)
	// Subscribe to gateway updates.
	SubscribeGateway(*SubscribeHomeNetworkGatewaysRequest, HomeNetworkMapper_SubscribeGatewayServer) error
}

// UnimplementedHomeNetworkMapperServer can be embedded to have forward compatible implementations.
type UnimplementedHomeNetworkMapperServer struct {
}

func (*UnimplementedHomeNetworkMapperServer) ListGateways(ctx context.Context, req *ListHomeNetworkGatewaysRequest) (*ListGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateways not implemented")
}
func (*UnimplementedHomeNetworkMapperServer) GetGateway(ctx context.Context, req *GetHomeNetworkGatewayRequest) (*GetHomeNetworkGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (*UnimplementedHomeNetworkMapperServer) SubscribeGateway(req *SubscribeHomeNetworkGatewaysRequest, srv HomeNetworkMapper_SubscribeGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGateway not implemented")
}

func RegisterHomeNetworkMapperServer(s *grpc.Server, srv HomeNetworkMapperServer) {
	s.RegisterService(&_HomeNetworkMapper_serviceDesc, srv)
}

func _HomeNetworkMapper_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeNetworkGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkMapperServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.HomeNetworkMapper/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkMapperServer).ListGateways(ctx, req.(*ListHomeNetworkGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkMapper_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkMapperServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v1.HomeNetworkMapper/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkMapperServer).GetGateway(ctx, req.(*GetHomeNetworkGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkMapper_SubscribeGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeNetworkGatewaysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HomeNetworkMapperServer).SubscribeGateway(m, &homeNetworkMapperSubscribeGatewayServer{stream})
}

type HomeNetworkMapper_SubscribeGatewayServer interface {
	Send(*v3.Gateway) error
	grpc.ServerStream
}

type homeNetworkMapperSubscribeGatewayServer struct {
	grpc.ServerStream
}

func (x *homeNetworkMapperSubscribeGatewayServer) Send(m *v3.Gateway) error {
	return x.ServerStream.SendMsg(m)
}

var _HomeNetworkMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v1.HomeNetworkMapper",
	HandlerType: (*HomeNetworkMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGateways",
			Handler:    _HomeNetworkMapper_ListGateways_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _HomeNetworkMapper_GetGateway_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeGateway",
			Handler:       _HomeNetworkMapper_SubscribeGateway_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/mapping/v1/service.proto",
}

func (m *GetDefaultGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDefaultGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDefaultGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetDefaultGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDefaultGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDefaultGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHomeNetworkGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHomeNetworkGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetHomeNetworkGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetHomeNetworkGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetHomeNetworkGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGatewayVisibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayVisibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGatewayVisibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateForwarderGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateForwarderGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateForwarderGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gateway != nil {
		{
			size, err := m.Gateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHomeNetworkGatewaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHomeNetworkGatewaysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHomeNetworkGatewaysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListGatewaysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewaysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListGatewaysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetHomeNetworkGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHomeNetworkGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHomeNetworkGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Eui != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Eui))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x10
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHomeNetworkGatewayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHomeNetworkGatewayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHomeNetworkGatewayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gateway != nil {
		{
			size, err := m.Gateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeHomeNetworkGatewaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeHomeNetworkGatewaysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeHomeNetworkGatewaysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintService(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Euis) > 0 {
		dAtA7 := make([]byte, len(m.Euis)*10)
		var j6 int
		for _, num := range m.Euis {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintService(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGetDefaultGatewayVisibilityRequest(r randyService, easy bool) *GetDefaultGatewayVisibilityRequest {
	this := &GetDefaultGatewayVisibilityRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetDefaultGatewayVisibilityRequest(r randyService, easy bool) *SetDefaultGatewayVisibilityRequest {
	this := &SetDefaultGatewayVisibilityRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	if r.Intn(5) != 0 {
		this.Visibility = v3.NewPopulatedGatewayVisibility(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetHomeNetworkGatewayVisibilityRequest(r randyService, easy bool) *GetHomeNetworkGatewayVisibilityRequest {
	this := &GetHomeNetworkGatewayVisibilityRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	this.HomeNetworkNetId = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetHomeNetworkGatewayVisibilityRequest(r randyService, easy bool) *SetHomeNetworkGatewayVisibilityRequest {
	this := &SetHomeNetworkGatewayVisibilityRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	this.HomeNetworkNetId = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.Visibility = v3.NewPopulatedGatewayVisibility(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetGatewayVisibilityResponse(r randyService, easy bool) *GetGatewayVisibilityResponse {
	this := &GetGatewayVisibilityResponse{}
	if r.Intn(5) != 0 {
		this.Visibility = v3.NewPopulatedGatewayVisibility(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateForwarderGatewayRequest(r randyService, easy bool) *UpdateForwarderGatewayRequest {
	this := &UpdateForwarderGatewayRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	if r.Intn(5) != 0 {
		this.Gateway = v3.NewPopulatedGateway(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListHomeNetworkGatewaysRequest(r randyService, easy bool) *ListHomeNetworkGatewaysRequest {
	this := &ListHomeNetworkGatewaysRequest{}
	this.HomeNetworkNetId = uint32(r.Uint32())
	this.Offset = uint32(r.Uint32())
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListGatewaysResponse(r randyService, easy bool) *ListGatewaysResponse {
	this := &ListGatewaysResponse{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Gateways = make([]*v3.Gateway, v1)
		for i := 0; i < v1; i++ {
			this.Gateways[i] = v3.NewPopulatedGateway(r, easy)
		}
	}
	this.Total = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetHomeNetworkGatewayRequest(r randyService, easy bool) *GetHomeNetworkGatewayRequest {
	this := &GetHomeNetworkGatewayRequest{}
	this.HomeNetworkNetId = uint32(r.Uint32())
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	this.Eui = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetHomeNetworkGatewayResponse(r randyService, easy bool) *GetHomeNetworkGatewayResponse {
	this := &GetHomeNetworkGatewayResponse{}
	if r.Intn(5) != 0 {
		this.Gateway = v3.NewPopulatedGateway(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubscribeHomeNetworkGatewaysRequest(r randyService, easy bool) *SubscribeHomeNetworkGatewaysRequest {
	this := &SubscribeHomeNetworkGatewaysRequest{}
	this.HomeNetworkNetId = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Gateways = make([]*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs, v2)
		for i := 0; i < v2; i++ {
			this.Gateways[i] = NewPopulatedSubscribeHomeNetworkGatewaysRequest_ForwarderEUIs(r, easy)
		}
	}
	this.Group = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubscribeHomeNetworkGatewaysRequest_ForwarderEUIs(r randyService, easy bool) *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs {
	this := &SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	v3 := r.Intn(10)
	this.Euis = make([]uint64, v3)
	for i := 0; i < v3; i++ {
		this.Euis[i] = uint64(uint64(r.Uint32()))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneService(r randyService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringService(r randyService) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneService(r)
	}
	return string(tmps)
}
func randUnrecognizedService(r randyService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldService(dAtA []byte, r randyService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateService(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetDefaultGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SetDefaultGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	return n
}

func (m *SetHomeNetworkGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetGatewayVisibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *UpdateForwarderGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Gateway != nil {
		l = m.Gateway.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListHomeNetworkGatewaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	if m.Offset != 0 {
		n += 1 + sovService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	return n
}

func (m *ListGatewaysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	return n
}

func (m *GetHomeNetworkGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Eui != 0 {
		n += 1 + sovService(uint64(m.Eui))
	}
	return n
}

func (m *GetHomeNetworkGatewayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gateway != nil {
		l = m.Gateway.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SubscribeHomeNetworkGatewaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Euis) > 0 {
		l = 0
		for _, e := range m.Euis {
			l += sovService(uint64(e))
		}
		n += 1 + sovService(uint64(l)) + l
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDefaultGatewayVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDefaultGatewayVisibilityRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetDefaultGatewayVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetDefaultGatewayVisibilityRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`Visibility:` + strings.Replace(fmt.Sprintf("%v", this.Visibility), "GatewayVisibility", "v3.GatewayVisibility", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHomeNetworkGatewayVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHomeNetworkGatewayVisibilityRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetHomeNetworkGatewayVisibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetHomeNetworkGatewayVisibilityRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`Visibility:` + strings.Replace(fmt.Sprintf("%v", this.Visibility), "GatewayVisibility", "v3.GatewayVisibility", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayVisibilityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayVisibilityResponse{`,
		`Visibility:` + strings.Replace(fmt.Sprintf("%v", this.Visibility), "GatewayVisibility", "v3.GatewayVisibility", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateForwarderGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateForwarderGatewayRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`Gateway:` + strings.Replace(fmt.Sprintf("%v", this.Gateway), "Gateway", "v3.Gateway", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHomeNetworkGatewaysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListHomeNetworkGatewaysRequest{`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewaysResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGateways := "[]*Gateway{"
	for _, f := range this.Gateways {
		repeatedStringForGateways += strings.Replace(fmt.Sprintf("%v", f), "Gateway", "v3.Gateway", 1) + ","
	}
	repeatedStringForGateways += "}"
	s := strings.Join([]string{`&ListGatewaysResponse{`,
		`Gateways:` + repeatedStringForGateways + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHomeNetworkGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHomeNetworkGatewayRequest{`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`Eui:` + fmt.Sprintf("%v", this.Eui) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHomeNetworkGatewayResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHomeNetworkGatewayResponse{`,
		`Gateway:` + strings.Replace(fmt.Sprintf("%v", this.Gateway), "Gateway", "v3.Gateway", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeHomeNetworkGatewaysRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGateways := "[]*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{"
	for _, f := range this.Gateways {
		repeatedStringForGateways += strings.Replace(fmt.Sprintf("%v", f), "SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs", "SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs", 1) + ","
	}
	repeatedStringForGateways += "}"
	s := strings.Join([]string{`&SubscribeHomeNetworkGatewaysRequest{`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`Gateways:` + repeatedStringForGateways + `,`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`Euis:` + fmt.Sprintf("%v", this.Euis) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDefaultGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDefaultGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDefaultGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDefaultGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &v3.GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHomeNetworkGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetHomeNetworkGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetHomeNetworkGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetHomeNetworkGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &v3.GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayVisibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayVisibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayVisibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &v3.GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateForwarderGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateForwarderGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateForwarderGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateway == nil {
				m.Gateway = &v3.Gateway{}
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHomeNetworkGatewaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHomeNetworkGatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHomeNetworkGatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewaysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &v3.Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHomeNetworkGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eui", wireType)
			}
			m.Eui = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eui |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHomeNetworkGatewayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateway == nil {
				m.Gateway = &v3.Gateway{}
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeHomeNetworkGatewaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeHomeNetworkGatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeHomeNetworkGatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwarderEUIs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwarderEUIs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Euis = append(m.Euis, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Euis) == 0 {
					m.Euis = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Euis = append(m.Euis, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Euis", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
