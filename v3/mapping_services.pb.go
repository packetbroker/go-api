// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v3/mapping_services.proto

package packetbroker

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDefaultGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,2,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
}

func (m *GetDefaultGatewayVisibilityRequest) Reset()         { *m = GetDefaultGatewayVisibilityRequest{} }
func (m *GetDefaultGatewayVisibilityRequest) String() string { return proto.CompactTextString(m) }
func (*GetDefaultGatewayVisibilityRequest) ProtoMessage()    {}
func (*GetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{0}
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

type SetDefaultGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,2,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// New default Gateway Visibility.
	Visibility *GatewayVisibility `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (m *SetDefaultGatewayVisibilityRequest) Reset()         { *m = SetDefaultGatewayVisibilityRequest{} }
func (m *SetDefaultGatewayVisibilityRequest) String() string { return proto.CompactTextString(m) }
func (*SetDefaultGatewayVisibilityRequest) ProtoMessage()    {}
func (*SetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{1}
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDefaultGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDefaultGatewayVisibilityRequest.Merge(m, src)
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDefaultGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDefaultGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDefaultGatewayVisibilityRequest proto.InternalMessageInfo

func (m *SetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SetDefaultGatewayVisibilityRequest) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *SetDefaultGatewayVisibilityRequest) GetVisibility() *GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type GetHomeNetworkGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,2,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Reset() {
	*m = GetHomeNetworkGatewayVisibilityRequest{}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) String() string { return proto.CompactTextString(m) }
func (*GetHomeNetworkGatewayVisibilityRequest) ProtoMessage()    {}
func (*GetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{2}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

type SetHomeNetworkGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,2,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// New Gateway Visibility for the Home Network Member.
	Visibility *GatewayVisibility `protobuf:"bytes,4,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (m *SetHomeNetworkGatewayVisibilityRequest) Reset() {
	*m = SetHomeNetworkGatewayVisibilityRequest{}
}
func (m *SetHomeNetworkGatewayVisibilityRequest) String() string { return proto.CompactTextString(m) }
func (*SetHomeNetworkGatewayVisibilityRequest) ProtoMessage()    {}
func (*SetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{3}
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest.Merge(m, src)
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetHomeNetworkGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetHomeNetworkGatewayVisibilityRequest proto.InternalMessageInfo

func (m *SetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SetHomeNetworkGatewayVisibilityRequest) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *SetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *SetHomeNetworkGatewayVisibilityRequest) GetVisibility() *GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type GetGatewayVisibilityResponse struct {
	Visibility *GatewayVisibility `protobuf:"bytes,1,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (m *GetGatewayVisibilityResponse) Reset()         { *m = GetGatewayVisibilityResponse{} }
func (m *GetGatewayVisibilityResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayVisibilityResponse) ProtoMessage()    {}
func (*GetGatewayVisibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{4}
}
func (m *GetGatewayVisibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetGatewayVisibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetGatewayVisibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetGatewayVisibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayVisibilityResponse.Merge(m, src)
}
func (m *GetGatewayVisibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetGatewayVisibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayVisibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayVisibilityResponse proto.InternalMessageInfo

func (m *GetGatewayVisibilityResponse) GetVisibility() *GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type UpdateForwarderGatewayRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,2,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// Gateway to update.
	Gateway *Gateway `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (m *UpdateForwarderGatewayRequest) Reset()         { *m = UpdateForwarderGatewayRequest{} }
func (m *UpdateForwarderGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateForwarderGatewayRequest) ProtoMessage()    {}
func (*UpdateForwarderGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{5}
}
func (m *UpdateForwarderGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateForwarderGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateForwarderGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateForwarderGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateForwarderGatewayRequest.Merge(m, src)
}
func (m *UpdateForwarderGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateForwarderGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateForwarderGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateForwarderGatewayRequest proto.InternalMessageInfo

func (m *UpdateForwarderGatewayRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *UpdateForwarderGatewayRequest) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *UpdateForwarderGatewayRequest) GetGateway() *Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

type ListHomeNetworkGatewaysRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Number of items to skip for pagination.
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit number items for pagination.
	// If 0, use the server's default.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ListHomeNetworkGatewaysRequest) Reset()         { *m = ListHomeNetworkGatewaysRequest{} }
func (m *ListHomeNetworkGatewaysRequest) String() string { return proto.CompactTextString(m) }
func (*ListHomeNetworkGatewaysRequest) ProtoMessage()    {}
func (*ListHomeNetworkGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{6}
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHomeNetworkGatewaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHomeNetworkGatewaysRequest.Merge(m, src)
}
func (m *ListHomeNetworkGatewaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHomeNetworkGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHomeNetworkGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHomeNetworkGatewaysRequest proto.InternalMessageInfo

func (m *ListHomeNetworkGatewaysRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *ListHomeNetworkGatewaysRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListHomeNetworkGatewaysRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListGatewaysResponse struct {
	Gateways []*Gateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Total number of items.
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *ListGatewaysResponse) Reset()         { *m = ListGatewaysResponse{} }
func (m *ListGatewaysResponse) String() string { return proto.CompactTextString(m) }
func (*ListGatewaysResponse) ProtoMessage()    {}
func (*ListGatewaysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{7}
}
func (m *ListGatewaysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListGatewaysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListGatewaysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListGatewaysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGatewaysResponse.Merge(m, src)
}
func (m *ListGatewaysResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListGatewaysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGatewaysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGatewaysResponse proto.InternalMessageInfo

func (m *ListGatewaysResponse) GetGateways() []*Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *ListGatewaysResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetHomeNetworkGatewayRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,2,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,3,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// Unique identifier of the gateway.
	Eui uint64 `protobuf:"varint,4,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (m *GetHomeNetworkGatewayRequest) Reset()         { *m = GetHomeNetworkGatewayRequest{} }
func (m *GetHomeNetworkGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*GetHomeNetworkGatewayRequest) ProtoMessage()    {}
func (*GetHomeNetworkGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{8}
}
func (m *GetHomeNetworkGatewayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHomeNetworkGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHomeNetworkGatewayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHomeNetworkGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkGatewayRequest.Merge(m, src)
}
func (m *GetHomeNetworkGatewayRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHomeNetworkGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkGatewayRequest proto.InternalMessageInfo

func (m *GetHomeNetworkGatewayRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayRequest) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *GetHomeNetworkGatewayRequest) GetEui() uint64 {
	if m != nil {
		return m.Eui
	}
	return 0
}

type SubscribeHomeNetworkGatewaysRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Set of gateways to subscribe to.
	// Leave empty to subscribe to all gateways.
	Gateways []*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs `protobuf:"bytes,2,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Shared subscription group (optional).
	// Queue durability depends on the Mapper configuration.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *SubscribeHomeNetworkGatewaysRequest) Reset()         { *m = SubscribeHomeNetworkGatewaysRequest{} }
func (m *SubscribeHomeNetworkGatewaysRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeHomeNetworkGatewaysRequest) ProtoMessage()    {}
func (*SubscribeHomeNetworkGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{9}
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest.Merge(m, src)
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeHomeNetworkGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest proto.InternalMessageInfo

func (m *SubscribeHomeNetworkGatewaysRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *SubscribeHomeNetworkGatewaysRequest) GetGateways() []*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs {
	if m != nil {
		return m.Gateways
	}
	return nil
}

func (m *SubscribeHomeNetworkGatewaysRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,2,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// Set of unique identifiers of gateways.
	// Leave empty to subscribe to all gateways of the Forwarder Member.
	Euis []uint64 `protobuf:"varint,3,rep,packed,name=euis,proto3" json:"euis,omitempty"`
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Reset() {
	*m = SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{}
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) String() string {
	return proto.CompactTextString(m)
}
func (*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) ProtoMessage() {}
func (*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Descriptor() ([]byte, []int) {
	return fileDescriptor_5922a46c07cce17a, []int{9, 0}
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs.Merge(m, src)
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs proto.InternalMessageInfo

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetEuis() []uint64 {
	if m != nil {
		return m.Euis
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.v3.GetDefaultGatewayVisibilityRequest")
	proto.RegisterType((*SetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.v3.SetDefaultGatewayVisibilityRequest")
	proto.RegisterType((*GetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.v3.GetHomeNetworkGatewayVisibilityRequest")
	proto.RegisterType((*SetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.v3.SetHomeNetworkGatewayVisibilityRequest")
	proto.RegisterType((*GetGatewayVisibilityResponse)(nil), "org.packetbroker.v3.GetGatewayVisibilityResponse")
	proto.RegisterType((*UpdateForwarderGatewayRequest)(nil), "org.packetbroker.v3.UpdateForwarderGatewayRequest")
	proto.RegisterType((*ListHomeNetworkGatewaysRequest)(nil), "org.packetbroker.v3.ListHomeNetworkGatewaysRequest")
	proto.RegisterType((*ListGatewaysResponse)(nil), "org.packetbroker.v3.ListGatewaysResponse")
	proto.RegisterType((*GetHomeNetworkGatewayRequest)(nil), "org.packetbroker.v3.GetHomeNetworkGatewayRequest")
	proto.RegisterType((*SubscribeHomeNetworkGatewaysRequest)(nil), "org.packetbroker.v3.SubscribeHomeNetworkGatewaysRequest")
	proto.RegisterType((*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs)(nil), "org.packetbroker.v3.SubscribeHomeNetworkGatewaysRequest.ForwarderEUIs")
}

func init() {
	proto.RegisterFile("packetbroker/api/v3/mapping_services.proto", fileDescriptor_5922a46c07cce17a)
}

var fileDescriptor_5922a46c07cce17a = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0x67, 0xda, 0x8a, 0xfa, 0xa0, 0x5a, 0x87, 0x86, 0x6c, 0x2a, 0x36, 0x65, 0x4d, 0xb0, 0x9a,
	0xb8, 0x95, 0x36, 0x51, 0x12, 0x4e, 0x1a, 0xa1, 0x92, 0x08, 0x87, 0x6d, 0xf0, 0xa0, 0x31, 0x64,
	0x97, 0xce, 0x2e, 0x13, 0xda, 0xce, 0x32, 0x3b, 0x5b, 0xc2, 0xc1, 0x8b, 0x07, 0x0f, 0x9e, 0xfc,
	0x10, 0x1e, 0xfd, 0x02, 0xde, 0x3c, 0x7a, 0xe4, 0xe8, 0xd1, 0xc0, 0xd5, 0x0f, 0x61, 0xba, 0xff,
	0xba, 0xa5, 0xbb, 0xa5, 0x56, 0x24, 0xde, 0x66, 0xa6, 0xef, 0xbd, 0xdf, 0xef, 0xbd, 0xdf, 0xeb,
	0x7b, 0x0b, 0x0f, 0x2c, 0x6d, 0x77, 0x9f, 0x08, 0x9d, 0xb3, 0x7d, 0xc2, 0x2b, 0x9a, 0x45, 0x2b,
	0xdd, 0x5a, 0xa5, 0xad, 0x59, 0x16, 0xed, 0x98, 0x3b, 0x36, 0xe1, 0x5d, 0xba, 0x4b, 0x6c, 0xc5,
	0xe2, 0x4c, 0x30, 0x3c, 0xc7, 0xb8, 0xa9, 0x44, 0xed, 0x95, 0x6e, 0xad, 0x70, 0xdb, 0x64, 0xcc,
	0x6c, 0x91, 0x8a, 0x6b, 0xa2, 0x3b, 0x46, 0x85, 0xb4, 0x2d, 0x71, 0xe4, 0x79, 0x14, 0x16, 0x47,
	0x44, 0xf7, 0x4c, 0xe4, 0x03, 0x90, 0xeb, 0x44, 0x3c, 0x27, 0x86, 0xe6, 0xb4, 0x44, 0x5d, 0x13,
	0xe4, 0x50, 0x3b, 0x7a, 0x45, 0x6d, 0xaa, 0xd3, 0x16, 0x15, 0x47, 0x2a, 0x39, 0x70, 0x88, 0x2d,
	0x70, 0x19, 0x72, 0x06, 0xe3, 0x87, 0x1a, 0x6f, 0x12, 0xbe, 0xd3, 0x21, 0x62, 0x87, 0x36, 0x25,
	0x54, 0x42, 0xe5, 0xac, 0x7a, 0x23, 0x7c, 0xdf, 0x22, 0x62, 0xa3, 0x89, 0x17, 0x61, 0xb6, 0x6f,
	0x49, 0x9b, 0x52, 0xaa, 0x84, 0xca, 0xd7, 0xd5, 0x99, 0xf0, 0x6d, 0xa3, 0x29, 0x7f, 0x45, 0x20,
	0x37, 0x2e, 0x17, 0x13, 0xaf, 0x03, 0x74, 0x43, 0x04, 0x29, 0x5d, 0x42, 0xe5, 0x99, 0xea, 0x92,
	0x12, 0x53, 0x50, 0x65, 0x98, 0x4f, 0xc4, 0x53, 0xfe, 0x8c, 0x60, 0xa9, 0x4e, 0xc4, 0x0b, 0xd6,
	0x26, 0x5b, 0x44, 0x1c, 0x32, 0xbe, 0x7f, 0x39, 0xfc, 0x1f, 0xc2, 0xdc, 0x1e, 0x6b, 0x93, 0x5e,
	0x9c, 0x1e, 0x68, 0x10, 0x2f, 0xed, 0xc6, 0xcb, 0xed, 0xf5, 0xe9, 0xb8, 0x11, 0xe5, 0x5f, 0x08,
	0x96, 0x1a, 0xff, 0x3d, 0xcd, 0x33, 0xaa, 0x64, 0x26, 0x56, 0xc5, 0x80, 0x85, 0x3a, 0x89, 0xeb,
	0x24, 0xdb, 0x62, 0x1d, 0x9b, 0x9c, 0xc1, 0x41, 0x7f, 0xa3, 0xfe, 0x9d, 0x6d, 0xab, 0xa9, 0x09,
	0xb2, 0x1e, 0x24, 0xed, 0x3b, 0xfc, 0x93, 0x6a, 0x3e, 0x86, 0xab, 0xa6, 0x17, 0xde, 0xef, 0xd8,
	0x85, 0x51, 0x9c, 0xd5, 0xc0, 0x58, 0x7e, 0x07, 0xc5, 0x97, 0xd4, 0x8e, 0x51, 0xdf, 0x0e, 0x68,
	0x26, 0xe8, 0x84, 0x12, 0x74, 0x9a, 0x87, 0x69, 0x66, 0x18, 0x36, 0x11, 0x2e, 0xcb, 0xac, 0xea,
	0xdf, 0x70, 0x1e, 0xae, 0xb4, 0x68, 0x9b, 0x0a, 0x5f, 0x60, 0xef, 0x22, 0x1b, 0x90, 0xef, 0xc1,
	0xf7, 0x31, 0x7d, 0x15, 0x56, 0xe0, 0x9a, 0xcf, 0xd0, 0x96, 0x50, 0x29, 0x7d, 0x6e, 0x3e, 0xa1,
	0x75, 0x0f, 0x47, 0x30, 0xa1, 0xb5, 0x7c, 0x78, 0xef, 0x22, 0x7f, 0x41, 0xae, 0xec, 0xc3, 0x69,
	0x4e, 0x98, 0x65, 0x9c, 0x76, 0xa9, 0xb1, 0xb4, 0x4b, 0x0f, 0x6b, 0x97, 0x83, 0x34, 0x71, 0xa8,
	0xdb, 0xd3, 0x19, 0xb5, 0x77, 0x94, 0xbf, 0xa5, 0xe0, 0x6e, 0xc3, 0xd1, 0xed, 0x5d, 0x4e, 0x75,
	0x72, 0x71, 0xda, 0xe8, 0x91, 0xaa, 0xa6, 0xdc, 0xaa, 0xae, 0xc7, 0x56, 0x75, 0x0c, 0x68, 0x25,
	0xec, 0xea, 0xb5, 0xed, 0x0d, 0x7b, 0xb0, 0xfe, 0x26, 0x67, 0x8e, 0xe5, 0x27, 0xea, 0x5d, 0x0a,
	0x16, 0x64, 0x07, 0x1c, 0x2e, 0xb6, 0xf9, 0x31, 0x64, 0x88, 0x43, 0x6d, 0x29, 0x5d, 0x4a, 0x97,
	0x33, 0xaa, 0x7b, 0xae, 0x7e, 0xc8, 0x80, 0x34, 0xf4, 0x0f, 0xdd, 0xd4, 0x3a, 0x9a, 0x49, 0x38,
	0x7e, 0x8f, 0x20, 0xdf, 0x5f, 0x65, 0xfd, 0xdf, 0xf1, 0x93, 0xf8, 0x2e, 0x3b, 0x77, 0x03, 0x15,
	0x96, 0x93, 0x1c, 0x93, 0x27, 0x8d, 0x09, 0xf9, 0xc6, 0xf8, 0x1c, 0xce, 0xdf, 0x82, 0x85, 0x79,
	0xc5, 0x5b, 0xf0, 0x4a, 0xb0, 0xe0, 0x95, 0xb5, 0xde, 0x82, 0xc7, 0x1f, 0x11, 0x48, 0x83, 0xcd,
	0x1f, 0x41, 0x5b, 0x4d, 0x22, 0x3e, 0xc6, 0x42, 0x98, 0x24, 0x6b, 0x06, 0x52, 0xe3, 0xcf, 0xb8,
	0x8c, 0xb7, 0x9c, 0x92, 0xb2, 0xaf, 0x76, 0xe0, 0x66, 0xd8, 0x7a, 0x9b, 0x9a, 0x65, 0x11, 0x8e,
	0xdf, 0x40, 0xd6, 0x1b, 0xcd, 0x7e, 0x30, 0x5c, 0x8d, 0x05, 0x1e, 0x39, 0xbe, 0x13, 0xf1, 0x8e,
	0x53, 0x70, 0x2b, 0xc2, 0xd7, 0x87, 0xec, 0xc0, 0x6c, 0x74, 0xd0, 0xe1, 0x5a, 0x2c, 0xe2, 0xe8,
	0x51, 0x5c, 0xb8, 0x9f, 0xe8, 0x34, 0x34, 0x40, 0xdf, 0x02, 0xf4, 0x65, 0xc0, 0xcb, 0xe3, 0x8b,
	0x1c, 0x60, 0x8d, 0x9c, 0xb7, 0xb8, 0x05, 0xb9, 0x70, 0x48, 0x04, 0x6f, 0x2b, 0x93, 0xce, 0x92,
	0xd1, 0x58, 0x8f, 0xd0, 0xb3, 0xa7, 0xdf, 0x4f, 0x8a, 0xe8, 0xf8, 0xa4, 0x88, 0x7e, 0x9e, 0x14,
	0xd1, 0xa7, 0xd3, 0xe2, 0xd4, 0xf1, 0x69, 0x71, 0xea, 0xc7, 0x69, 0x71, 0xea, 0xf5, 0x3d, 0x93,
	0x0d, 0xfa, 0x31, 0x6e, 0xfa, 0x1f, 0xaf, 0xab, 0xd1, 0x77, 0x7d, 0xda, 0x55, 0xa9, 0xf6, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0xac, 0xc7, 0x61, 0x45, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayVisibilityManagerClient is the client API for GatewayVisibilityManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayVisibilityManagerClient interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(ctx context.Context, in *SetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(ctx context.Context, in *SetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type gatewayVisibilityManagerClient struct {
	cc *grpc.ClientConn
}

func NewGatewayVisibilityManagerClient(cc *grpc.ClientConn) GatewayVisibilityManagerClient {
	return &gatewayVisibilityManagerClient{cc}
}

func (c *gatewayVisibilityManagerClient) GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.v3.GatewayVisibilityManager/GetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetDefaultVisibility(ctx context.Context, in *SetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.v3.GatewayVisibilityManager/SetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.v3.GatewayVisibilityManager/GetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetHomeNetworkVisibility(ctx context.Context, in *SetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.v3.GatewayVisibilityManager/SetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayVisibilityManagerServer is the server API for GatewayVisibilityManager service.
type GatewayVisibilityManagerServer interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(context.Context, *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(context.Context, *SetDefaultGatewayVisibilityRequest) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(context.Context, *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(context.Context, *SetHomeNetworkGatewayVisibilityRequest) (*types.Empty, error)
}

// UnimplementedGatewayVisibilityManagerServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayVisibilityManagerServer struct {
}

func (*UnimplementedGatewayVisibilityManagerServer) GetDefaultVisibility(ctx context.Context, req *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetDefaultVisibility(ctx context.Context, req *SetDefaultGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) GetHomeNetworkVisibility(ctx context.Context, req *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetHomeNetworkVisibility(ctx context.Context, req *SetHomeNetworkGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkVisibility not implemented")
}

func RegisterGatewayVisibilityManagerServer(s *grpc.Server, srv GatewayVisibilityManagerServer) {
	s.RegisterService(&_GatewayVisibilityManager_serviceDesc, srv)
}

func _GatewayVisibilityManager_GetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.v3.GatewayVisibilityManager/GetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, req.(*GetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.v3.GatewayVisibilityManager/SetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, req.(*SetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.v3.GatewayVisibilityManager/GetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, req.(*GetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.v3.GatewayVisibilityManager/SetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, req.(*SetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayVisibilityManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.v3.GatewayVisibilityManager",
	HandlerType: (*GatewayVisibilityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_GetDefaultVisibility_Handler,
		},
		{
			MethodName: "SetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_SetDefaultVisibility_Handler,
		},
		{
			MethodName: "GetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler,
		},
		{
			MethodName: "SetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/v3/mapping_services.proto",
}

// ForwarderMapperClient is the client API for ForwarderMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForwarderMapperClient interface {
	// Update a gateway.
	UpdateGateway(ctx context.Context, in *UpdateForwarderGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type forwarderMapperClient struct {
	cc *grpc.ClientConn
}

func NewForwarderMapperClient(cc *grpc.ClientConn) ForwarderMapperClient {
	return &forwarderMapperClient{cc}
}

func (c *forwarderMapperClient) UpdateGateway(ctx context.Context, in *UpdateForwarderGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.v3.ForwarderMapper/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwarderMapperServer is the server API for ForwarderMapper service.
type ForwarderMapperServer interface {
	// Update a gateway.
	UpdateGateway(context.Context, *UpdateForwarderGatewayRequest) (*types.Empty, error)
}

// UnimplementedForwarderMapperServer can be embedded to have forward compatible implementations.
type UnimplementedForwarderMapperServer struct {
}

func (*UnimplementedForwarderMapperServer) UpdateGateway(ctx context.Context, req *UpdateForwarderGatewayRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}

func RegisterForwarderMapperServer(s *grpc.Server, srv ForwarderMapperServer) {
	s.RegisterService(&_ForwarderMapper_serviceDesc, srv)
}

func _ForwarderMapper_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForwarderGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderMapperServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.v3.ForwarderMapper/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderMapperServer).UpdateGateway(ctx, req.(*UpdateForwarderGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForwarderMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.v3.ForwarderMapper",
	HandlerType: (*ForwarderMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGateway",
			Handler:    _ForwarderMapper_UpdateGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/v3/mapping_services.proto",
}

// HomeNetworkMapperClient is the client API for HomeNetworkMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeNetworkMapperClient interface {
	// List gateways.
	// This rpc sets the total number of gateways in the x-total-count header.
	ListGateways(ctx context.Context, in *ListHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// Get a gateway.
	GetGateway(ctx context.Context, in *GetHomeNetworkGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// Subscribe to gateway updates.
	SubscribeGateway(ctx context.Context, in *SubscribeHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (HomeNetworkMapper_SubscribeGatewayClient, error)
}

type homeNetworkMapperClient struct {
	cc *grpc.ClientConn
}

func NewHomeNetworkMapperClient(cc *grpc.ClientConn) HomeNetworkMapperClient {
	return &homeNetworkMapperClient{cc}
}

func (c *homeNetworkMapperClient) ListGateways(ctx context.Context, in *ListHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.v3.HomeNetworkMapper/ListGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkMapperClient) GetGateway(ctx context.Context, in *GetHomeNetworkGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/org.packetbroker.v3.HomeNetworkMapper/GetGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkMapperClient) SubscribeGateway(ctx context.Context, in *SubscribeHomeNetworkGatewaysRequest, opts ...grpc.CallOption) (HomeNetworkMapper_SubscribeGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HomeNetworkMapper_serviceDesc.Streams[0], "/org.packetbroker.v3.HomeNetworkMapper/SubscribeGateway", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeNetworkMapperSubscribeGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HomeNetworkMapper_SubscribeGatewayClient interface {
	Recv() (*Gateway, error)
	grpc.ClientStream
}

type homeNetworkMapperSubscribeGatewayClient struct {
	grpc.ClientStream
}

func (x *homeNetworkMapperSubscribeGatewayClient) Recv() (*Gateway, error) {
	m := new(Gateway)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeNetworkMapperServer is the server API for HomeNetworkMapper service.
type HomeNetworkMapperServer interface {
	// List gateways.
	// This rpc sets the total number of gateways in the x-total-count header.
	ListGateways(context.Context, *ListHomeNetworkGatewaysRequest) (*ListGatewaysResponse, error)
	// Get a gateway.
	GetGateway(context.Context, *GetHomeNetworkGatewayRequest) (*Gateway, error)
	// Subscribe to gateway updates.
	SubscribeGateway(*SubscribeHomeNetworkGatewaysRequest, HomeNetworkMapper_SubscribeGatewayServer) error
}

// UnimplementedHomeNetworkMapperServer can be embedded to have forward compatible implementations.
type UnimplementedHomeNetworkMapperServer struct {
}

func (*UnimplementedHomeNetworkMapperServer) ListGateways(ctx context.Context, req *ListHomeNetworkGatewaysRequest) (*ListGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateways not implemented")
}
func (*UnimplementedHomeNetworkMapperServer) GetGateway(ctx context.Context, req *GetHomeNetworkGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (*UnimplementedHomeNetworkMapperServer) SubscribeGateway(req *SubscribeHomeNetworkGatewaysRequest, srv HomeNetworkMapper_SubscribeGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeGateway not implemented")
}

func RegisterHomeNetworkMapperServer(s *grpc.Server, srv HomeNetworkMapperServer) {
	s.RegisterService(&_HomeNetworkMapper_serviceDesc, srv)
}

func _HomeNetworkMapper_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeNetworkGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkMapperServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.v3.HomeNetworkMapper/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkMapperServer).ListGateways(ctx, req.(*ListHomeNetworkGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkMapper_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkMapperServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.v3.HomeNetworkMapper/GetGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkMapperServer).GetGateway(ctx, req.(*GetHomeNetworkGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkMapper_SubscribeGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeNetworkGatewaysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HomeNetworkMapperServer).SubscribeGateway(m, &homeNetworkMapperSubscribeGatewayServer{stream})
}

type HomeNetworkMapper_SubscribeGatewayServer interface {
	Send(*Gateway) error
	grpc.ServerStream
}

type homeNetworkMapperSubscribeGatewayServer struct {
	grpc.ServerStream
}

func (x *homeNetworkMapperSubscribeGatewayServer) Send(m *Gateway) error {
	return x.ServerStream.SendMsg(m)
}

var _HomeNetworkMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.v3.HomeNetworkMapper",
	HandlerType: (*HomeNetworkMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGateways",
			Handler:    _HomeNetworkMapper_ListGateways_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _HomeNetworkMapper_GetGateway_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeGateway",
			Handler:       _HomeNetworkMapper_SubscribeGateway_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/v3/mapping_services.proto",
}

func (m *GetDefaultGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDefaultGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDefaultGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetDefaultGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDefaultGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDefaultGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMappingServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHomeNetworkGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHomeNetworkGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetHomeNetworkGatewayVisibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetHomeNetworkGatewayVisibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetHomeNetworkGatewayVisibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMappingServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetGatewayVisibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGatewayVisibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetGatewayVisibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		{
			size, err := m.Visibility.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMappingServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateForwarderGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateForwarderGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateForwarderGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gateway != nil {
		{
			size, err := m.Gateway.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMappingServices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHomeNetworkGatewaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHomeNetworkGatewaysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHomeNetworkGatewaysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListGatewaysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListGatewaysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListGatewaysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMappingServices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetHomeNetworkGatewayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHomeNetworkGatewayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHomeNetworkGatewayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Eui != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.Eui))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x10
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeHomeNetworkGatewaysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeHomeNetworkGatewaysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeHomeNetworkGatewaysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Gateways) > 0 {
		for iNdEx := len(m.Gateways) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gateways[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMappingServices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Euis) > 0 {
		dAtA6 := make([]byte, len(m.Euis)*10)
		var j5 int
		for _, num := range m.Euis {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintMappingServices(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintMappingServices(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintMappingServices(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMappingServices(dAtA []byte, offset int, v uint64) int {
	offset -= sovMappingServices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDefaultGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	return n
}

func (m *SetDefaultGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovMappingServices(uint64(l))
	}
	return n
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.HomeNetworkNetId))
	}
	return n
}

func (m *SetHomeNetworkGatewayVisibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.HomeNetworkNetId))
	}
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovMappingServices(uint64(l))
	}
	return n
}

func (m *GetGatewayVisibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovMappingServices(uint64(l))
	}
	return n
}

func (m *UpdateForwarderGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	if m.Gateway != nil {
		l = m.Gateway.Size()
		n += 1 + l + sovMappingServices(uint64(l))
	}
	return n
}

func (m *ListHomeNetworkGatewaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.HomeNetworkNetId))
	}
	if m.Offset != 0 {
		n += 1 + sovMappingServices(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovMappingServices(uint64(m.Limit))
	}
	return n
}

func (m *ListGatewaysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovMappingServices(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovMappingServices(uint64(m.Total))
	}
	return n
}

func (m *GetHomeNetworkGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.HomeNetworkNetId))
	}
	if m.ForwarderNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	if m.Eui != 0 {
		n += 1 + sovMappingServices(uint64(m.Eui))
	}
	return n
}

func (m *SubscribeHomeNetworkGatewaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.HomeNetworkNetId))
	}
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovMappingServices(uint64(l))
		}
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	return n
}

func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovMappingServices(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovMappingServices(uint64(l))
	}
	if len(m.Euis) > 0 {
		l = 0
		for _, e := range m.Euis {
			l += sovMappingServices(uint64(e))
		}
		n += 1 + sovMappingServices(uint64(l)) + l
	}
	return n
}

func sovMappingServices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMappingServices(x uint64) (n int) {
	return sovMappingServices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDefaultGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDefaultGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDefaultGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDefaultGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHomeNetworkGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetHomeNetworkGatewayVisibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetHomeNetworkGatewayVisibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetHomeNetworkGatewayVisibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGatewayVisibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGatewayVisibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGatewayVisibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &GatewayVisibility{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateForwarderGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateForwarderGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateForwarderGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gateway == nil {
				m.Gateway = &Gateway{}
			}
			if err := m.Gateway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHomeNetworkGatewaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHomeNetworkGatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHomeNetworkGatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListGatewaysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListGatewaysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListGatewaysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &Gateway{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHomeNetworkGatewayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHomeNetworkGatewayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eui", wireType)
			}
			m.Eui = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eui |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeHomeNetworkGatewaysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeHomeNetworkGatewaysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeHomeNetworkGatewaysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateways = append(m.Gateways, &SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{})
			if err := m.Gateways[len(m.Gateways)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwarderEUIs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwarderEUIs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMappingServices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMappingServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMappingServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Euis = append(m.Euis, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMappingServices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMappingServices
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMappingServices
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Euis) == 0 {
					m.Euis = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMappingServices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Euis = append(m.Euis, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Euis", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMappingServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMappingServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMappingServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMappingServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMappingServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMappingServices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMappingServices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMappingServices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMappingServices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMappingServices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMappingServices = fmt.Errorf("proto: unexpected end of group")
)
