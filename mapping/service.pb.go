// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: packetbroker/api/mapping/v1/service.proto

package mappingpb

import (
	proto "github.com/golang/protobuf/proto"
	v3 "go.packetbroker.org/api/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetDefaultGatewayVisibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
}

func (x *GetDefaultGatewayVisibilityRequest) Reset() {
	*x = GetDefaultGatewayVisibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultGatewayVisibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultGatewayVisibilityRequest) ProtoMessage() {}

func (x *GetDefaultGatewayVisibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultGatewayVisibilityRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *GetDefaultGatewayVisibilityRequest) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

type SetDefaultGatewayVisibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// New default Gateway Visibility.
	Visibility *v3.GatewayVisibility `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *SetDefaultGatewayVisibilityRequest) Reset() {
	*x = SetDefaultGatewayVisibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultGatewayVisibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultGatewayVisibilityRequest) ProtoMessage() {}

func (x *SetDefaultGatewayVisibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultGatewayVisibilityRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *SetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *SetDefaultGatewayVisibilityRequest) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *SetDefaultGatewayVisibilityRequest) GetVisibility() *v3.GatewayVisibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

type GetHomeNetworkGatewayVisibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
}

func (x *GetHomeNetworkGatewayVisibilityRequest) Reset() {
	*x = GetHomeNetworkGatewayVisibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomeNetworkGatewayVisibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomeNetworkGatewayVisibilityRequest) ProtoMessage() {}

func (x *GetHomeNetworkGatewayVisibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomeNetworkGatewayVisibilityRequest.ProtoReflect.Descriptor instead.
func (*GetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *GetHomeNetworkGatewayVisibilityRequest) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *GetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

type SetHomeNetworkGatewayVisibilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// New Gateway Visibility for the Home Network Member.
	Visibility *v3.GatewayVisibility `protobuf:"bytes,4,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *SetHomeNetworkGatewayVisibilityRequest) Reset() {
	*x = SetHomeNetworkGatewayVisibilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHomeNetworkGatewayVisibilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHomeNetworkGatewayVisibilityRequest) ProtoMessage() {}

func (x *SetHomeNetworkGatewayVisibilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHomeNetworkGatewayVisibilityRequest.ProtoReflect.Descriptor instead.
func (*SetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *SetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *SetHomeNetworkGatewayVisibilityRequest) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *SetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *SetHomeNetworkGatewayVisibilityRequest) GetVisibility() *v3.GatewayVisibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

type GetGatewayVisibilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visibility *v3.GatewayVisibility `protobuf:"bytes,1,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *GetGatewayVisibilityResponse) Reset() {
	*x = GetGatewayVisibilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayVisibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayVisibilityResponse) ProtoMessage() {}

func (x *GetGatewayVisibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayVisibilityResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayVisibilityResponse) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetGatewayVisibilityResponse) GetVisibility() *v3.GatewayVisibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

type UpdateForwarderGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Gateway to update.
	Gateway *v3.Gateway `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *UpdateForwarderGatewayRequest) Reset() {
	*x = UpdateForwarderGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateForwarderGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateForwarderGatewayRequest) ProtoMessage() {}

func (x *UpdateForwarderGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateForwarderGatewayRequest.ProtoReflect.Descriptor instead.
func (*UpdateForwarderGatewayRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateForwarderGatewayRequest) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *UpdateForwarderGatewayRequest) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *UpdateForwarderGatewayRequest) GetGateway() *v3.Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type ListHomeNetworkGatewaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Number of items to skip for pagination.
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit number items for pagination.
	// If 0, use the server's default.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListHomeNetworkGatewaysRequest) Reset() {
	*x = ListHomeNetworkGatewaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHomeNetworkGatewaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHomeNetworkGatewaysRequest) ProtoMessage() {}

func (x *ListHomeNetworkGatewaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHomeNetworkGatewaysRequest.ProtoReflect.Descriptor instead.
func (*ListHomeNetworkGatewaysRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListHomeNetworkGatewaysRequest) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *ListHomeNetworkGatewaysRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListHomeNetworkGatewaysRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListGatewaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateways []*v3.Gateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Total number of items.
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListGatewaysResponse) Reset() {
	*x = ListGatewaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGatewaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGatewaysResponse) ProtoMessage() {}

func (x *ListGatewaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGatewaysResponse.ProtoReflect.Descriptor instead.
func (*ListGatewaysResponse) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListGatewaysResponse) GetGateways() []*v3.Gateway {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *ListGatewaysResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetHomeNetworkGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,2,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,3,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Unique identifier of the gateway.
	Eui uint64 `protobuf:"varint,4,opt,name=eui,proto3" json:"eui,omitempty"`
}

func (x *GetHomeNetworkGatewayRequest) Reset() {
	*x = GetHomeNetworkGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomeNetworkGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomeNetworkGatewayRequest) ProtoMessage() {}

func (x *GetHomeNetworkGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomeNetworkGatewayRequest.ProtoReflect.Descriptor instead.
func (*GetHomeNetworkGatewayRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetHomeNetworkGatewayRequest) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *GetHomeNetworkGatewayRequest) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *GetHomeNetworkGatewayRequest) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *GetHomeNetworkGatewayRequest) GetEui() uint64 {
	if x != nil {
		return x.Eui
	}
	return 0
}

type SubscribeHomeNetworkGatewaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Set of gateways to subscribe to.
	// Leave empty to subscribe to all gateways.
	Gateways []*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs `protobuf:"bytes,2,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// Shared subscription group (optional).
	// Queue durability depends on the Mapper configuration.
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *SubscribeHomeNetworkGatewaysRequest) Reset() {
	*x = SubscribeHomeNetworkGatewaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeHomeNetworkGatewaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHomeNetworkGatewaysRequest) ProtoMessage() {}

func (x *SubscribeHomeNetworkGatewaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHomeNetworkGatewaysRequest.ProtoReflect.Descriptor instead.
func (*SubscribeHomeNetworkGatewaysRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeHomeNetworkGatewaysRequest) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *SubscribeHomeNetworkGatewaysRequest) GetGateways() []*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *SubscribeHomeNetworkGatewaysRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Set of unique identifiers of gateways.
	// Leave empty to subscribe to all gateways of the Forwarder Member.
	Euis []uint64 `protobuf:"varint,3,rep,packed,name=euis,proto3" json:"euis,omitempty"`
}

func (x *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Reset() {
	*x = SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) ProtoMessage() {}

func (x *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_mapping_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs.ProtoReflect.Descriptor instead.
func (*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs) GetEuis() []uint64 {
	if x != nil {
		return x.Euis
	}
	return nil
}

var File_packetbroker_api_mapping_v1_service_proto protoreflect.FileDescriptor

var file_packetbroker_api_mapping_v1_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x22,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a,
	0x26, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x66, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x7d, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x66, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xbb, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68,
	0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x75, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x75, 0x69, 0x22, 0xd7, 0x02,
	0x0a, 0x23, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x6f,
	0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x55, 0x49, 0x73, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x7f, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x55, 0x49, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x75, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x04, 0x65, 0x75, 0x69, 0x73, 0x32, 0xb6, 0x04, 0x0a, 0x18, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x3f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x9a, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x43, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x48, 0x6f,
	0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x43, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0x76, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xf0, 0x02, 0x0a, 0x11, 0x48, 0x6f, 0x6d,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x7e,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x3b,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x39, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x74, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x40, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x48, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67,
	0x6f, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x3b, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_packetbroker_api_mapping_v1_service_proto_rawDescOnce sync.Once
	file_packetbroker_api_mapping_v1_service_proto_rawDescData = file_packetbroker_api_mapping_v1_service_proto_rawDesc
)

func file_packetbroker_api_mapping_v1_service_proto_rawDescGZIP() []byte {
	file_packetbroker_api_mapping_v1_service_proto_rawDescOnce.Do(func() {
		file_packetbroker_api_mapping_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_packetbroker_api_mapping_v1_service_proto_rawDescData)
	})
	return file_packetbroker_api_mapping_v1_service_proto_rawDescData
}

var file_packetbroker_api_mapping_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_packetbroker_api_mapping_v1_service_proto_goTypes = []interface{}{
	(*GetDefaultGatewayVisibilityRequest)(nil),                // 0: org.packetbroker.mapping.v1.GetDefaultGatewayVisibilityRequest
	(*SetDefaultGatewayVisibilityRequest)(nil),                // 1: org.packetbroker.mapping.v1.SetDefaultGatewayVisibilityRequest
	(*GetHomeNetworkGatewayVisibilityRequest)(nil),            // 2: org.packetbroker.mapping.v1.GetHomeNetworkGatewayVisibilityRequest
	(*SetHomeNetworkGatewayVisibilityRequest)(nil),            // 3: org.packetbroker.mapping.v1.SetHomeNetworkGatewayVisibilityRequest
	(*GetGatewayVisibilityResponse)(nil),                      // 4: org.packetbroker.mapping.v1.GetGatewayVisibilityResponse
	(*UpdateForwarderGatewayRequest)(nil),                     // 5: org.packetbroker.mapping.v1.UpdateForwarderGatewayRequest
	(*ListHomeNetworkGatewaysRequest)(nil),                    // 6: org.packetbroker.mapping.v1.ListHomeNetworkGatewaysRequest
	(*ListGatewaysResponse)(nil),                              // 7: org.packetbroker.mapping.v1.ListGatewaysResponse
	(*GetHomeNetworkGatewayRequest)(nil),                      // 8: org.packetbroker.mapping.v1.GetHomeNetworkGatewayRequest
	(*SubscribeHomeNetworkGatewaysRequest)(nil),               // 9: org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest
	(*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs)(nil), // 10: org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest.ForwarderEUIs
	(*v3.GatewayVisibility)(nil),                              // 11: org.packetbroker.v3.GatewayVisibility
	(*v3.Gateway)(nil),                                        // 12: org.packetbroker.v3.Gateway
	(*emptypb.Empty)(nil),                                     // 13: google.protobuf.Empty
}
var file_packetbroker_api_mapping_v1_service_proto_depIdxs = []int32{
	11, // 0: org.packetbroker.mapping.v1.SetDefaultGatewayVisibilityRequest.visibility:type_name -> org.packetbroker.v3.GatewayVisibility
	11, // 1: org.packetbroker.mapping.v1.SetHomeNetworkGatewayVisibilityRequest.visibility:type_name -> org.packetbroker.v3.GatewayVisibility
	11, // 2: org.packetbroker.mapping.v1.GetGatewayVisibilityResponse.visibility:type_name -> org.packetbroker.v3.GatewayVisibility
	12, // 3: org.packetbroker.mapping.v1.UpdateForwarderGatewayRequest.gateway:type_name -> org.packetbroker.v3.Gateway
	12, // 4: org.packetbroker.mapping.v1.ListGatewaysResponse.gateways:type_name -> org.packetbroker.v3.Gateway
	10, // 5: org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest.gateways:type_name -> org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest.ForwarderEUIs
	0,  // 6: org.packetbroker.mapping.v1.GatewayVisibilityManager.GetDefaultVisibility:input_type -> org.packetbroker.mapping.v1.GetDefaultGatewayVisibilityRequest
	1,  // 7: org.packetbroker.mapping.v1.GatewayVisibilityManager.SetDefaultVisibility:input_type -> org.packetbroker.mapping.v1.SetDefaultGatewayVisibilityRequest
	2,  // 8: org.packetbroker.mapping.v1.GatewayVisibilityManager.GetHomeNetworkVisibility:input_type -> org.packetbroker.mapping.v1.GetHomeNetworkGatewayVisibilityRequest
	3,  // 9: org.packetbroker.mapping.v1.GatewayVisibilityManager.SetHomeNetworkVisibility:input_type -> org.packetbroker.mapping.v1.SetHomeNetworkGatewayVisibilityRequest
	5,  // 10: org.packetbroker.mapping.v1.ForwarderMapper.UpdateGateway:input_type -> org.packetbroker.mapping.v1.UpdateForwarderGatewayRequest
	6,  // 11: org.packetbroker.mapping.v1.HomeNetworkMapper.ListGateways:input_type -> org.packetbroker.mapping.v1.ListHomeNetworkGatewaysRequest
	8,  // 12: org.packetbroker.mapping.v1.HomeNetworkMapper.GetGateway:input_type -> org.packetbroker.mapping.v1.GetHomeNetworkGatewayRequest
	9,  // 13: org.packetbroker.mapping.v1.HomeNetworkMapper.SubscribeGateway:input_type -> org.packetbroker.mapping.v1.SubscribeHomeNetworkGatewaysRequest
	4,  // 14: org.packetbroker.mapping.v1.GatewayVisibilityManager.GetDefaultVisibility:output_type -> org.packetbroker.mapping.v1.GetGatewayVisibilityResponse
	13, // 15: org.packetbroker.mapping.v1.GatewayVisibilityManager.SetDefaultVisibility:output_type -> google.protobuf.Empty
	4,  // 16: org.packetbroker.mapping.v1.GatewayVisibilityManager.GetHomeNetworkVisibility:output_type -> org.packetbroker.mapping.v1.GetGatewayVisibilityResponse
	13, // 17: org.packetbroker.mapping.v1.GatewayVisibilityManager.SetHomeNetworkVisibility:output_type -> google.protobuf.Empty
	13, // 18: org.packetbroker.mapping.v1.ForwarderMapper.UpdateGateway:output_type -> google.protobuf.Empty
	7,  // 19: org.packetbroker.mapping.v1.HomeNetworkMapper.ListGateways:output_type -> org.packetbroker.mapping.v1.ListGatewaysResponse
	12, // 20: org.packetbroker.mapping.v1.HomeNetworkMapper.GetGateway:output_type -> org.packetbroker.v3.Gateway
	12, // 21: org.packetbroker.mapping.v1.HomeNetworkMapper.SubscribeGateway:output_type -> org.packetbroker.v3.Gateway
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_packetbroker_api_mapping_v1_service_proto_init() }
func file_packetbroker_api_mapping_v1_service_proto_init() {
	if File_packetbroker_api_mapping_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultGatewayVisibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultGatewayVisibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomeNetworkGatewayVisibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHomeNetworkGatewayVisibilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayVisibilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateForwarderGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHomeNetworkGatewaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGatewaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomeNetworkGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeHomeNetworkGatewaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_mapping_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeHomeNetworkGatewaysRequest_ForwarderEUIs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packetbroker_api_mapping_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_packetbroker_api_mapping_v1_service_proto_goTypes,
		DependencyIndexes: file_packetbroker_api_mapping_v1_service_proto_depIdxs,
		MessageInfos:      file_packetbroker_api_mapping_v1_service_proto_msgTypes,
	}.Build()
	File_packetbroker_api_mapping_v1_service_proto = out.File
	file_packetbroker_api_mapping_v1_service_proto_rawDesc = nil
	file_packetbroker_api_mapping_v1_service_proto_goTypes = nil
	file_packetbroker_api_mapping_v1_service_proto_depIdxs = nil
}
