// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/routing/v1/service.proto

package routingpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListDefaultPoliciesRequest struct {
	// Timestamp to list from for pagination.
	UpdatedSince *types.Timestamp `protobuf:"bytes,1,opt,name=updated_since,json=updatedSince,proto3" json:"updated_since,omitempty"`
	// Limit number items for pagination.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDefaultPoliciesRequest) Reset()         { *m = ListDefaultPoliciesRequest{} }
func (m *ListDefaultPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListDefaultPoliciesRequest) ProtoMessage()    {}
func (*ListDefaultPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{0}
}
func (m *ListDefaultPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDefaultPoliciesRequest.Unmarshal(m, b)
}
func (m *ListDefaultPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDefaultPoliciesRequest.Marshal(b, m, deterministic)
}
func (m *ListDefaultPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDefaultPoliciesRequest.Merge(m, src)
}
func (m *ListDefaultPoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListDefaultPoliciesRequest.Size(m)
}
func (m *ListDefaultPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDefaultPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDefaultPoliciesRequest proto.InternalMessageInfo

func (m *ListDefaultPoliciesRequest) GetUpdatedSince() *types.Timestamp {
	if m != nil {
		return m.UpdatedSince
	}
	return nil
}

func (m *ListDefaultPoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListDefaultPoliciesResponse struct {
	Policies []*v3.RoutingPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// Total number of items.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDefaultPoliciesResponse) Reset()         { *m = ListDefaultPoliciesResponse{} }
func (m *ListDefaultPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListDefaultPoliciesResponse) ProtoMessage()    {}
func (*ListDefaultPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{1}
}
func (m *ListDefaultPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDefaultPoliciesResponse.Unmarshal(m, b)
}
func (m *ListDefaultPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDefaultPoliciesResponse.Marshal(b, m, deterministic)
}
func (m *ListDefaultPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDefaultPoliciesResponse.Merge(m, src)
}
func (m *ListDefaultPoliciesResponse) XXX_Size() int {
	return xxx_messageInfo_ListDefaultPoliciesResponse.Size(m)
}
func (m *ListDefaultPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDefaultPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDefaultPoliciesResponse proto.InternalMessageInfo

func (m *ListDefaultPoliciesResponse) GetPolicies() []*v3.RoutingPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ListDefaultPoliciesResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetDefaultPolicyRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId    string   `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultPolicyRequest) Reset()         { *m = GetDefaultPolicyRequest{} }
func (m *GetDefaultPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetDefaultPolicyRequest) ProtoMessage()    {}
func (*GetDefaultPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{2}
}
func (m *GetDefaultPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDefaultPolicyRequest.Unmarshal(m, b)
}
func (m *GetDefaultPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDefaultPolicyRequest.Marshal(b, m, deterministic)
}
func (m *GetDefaultPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultPolicyRequest.Merge(m, src)
}
func (m *GetDefaultPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_GetDefaultPolicyRequest.Size(m)
}
func (m *GetDefaultPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultPolicyRequest proto.InternalMessageInfo

func (m *GetDefaultPolicyRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetDefaultPolicyRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

type ListHomeNetworkPoliciesRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Timestamp to list from for pagination.
	UpdatedSince *types.Timestamp `protobuf:"bytes,3,opt,name=updated_since,json=updatedSince,proto3" json:"updated_since,omitempty"`
	// Limit number items for pagination.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHomeNetworkPoliciesRequest) Reset()         { *m = ListHomeNetworkPoliciesRequest{} }
func (m *ListHomeNetworkPoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListHomeNetworkPoliciesRequest) ProtoMessage()    {}
func (*ListHomeNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{3}
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHomeNetworkPoliciesRequest.Unmarshal(m, b)
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHomeNetworkPoliciesRequest.Marshal(b, m, deterministic)
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHomeNetworkPoliciesRequest.Merge(m, src)
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListHomeNetworkPoliciesRequest.Size(m)
}
func (m *ListHomeNetworkPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHomeNetworkPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHomeNetworkPoliciesRequest proto.InternalMessageInfo

func (m *ListHomeNetworkPoliciesRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *ListHomeNetworkPoliciesRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *ListHomeNetworkPoliciesRequest) GetUpdatedSince() *types.Timestamp {
	if m != nil {
		return m.UpdatedSince
	}
	return nil
}

func (m *ListHomeNetworkPoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListHomeNetworkPoliciesResponse struct {
	Policies []*v3.RoutingPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// Total number of items.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHomeNetworkPoliciesResponse) Reset()         { *m = ListHomeNetworkPoliciesResponse{} }
func (m *ListHomeNetworkPoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListHomeNetworkPoliciesResponse) ProtoMessage()    {}
func (*ListHomeNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{4}
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListHomeNetworkPoliciesResponse.Unmarshal(m, b)
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListHomeNetworkPoliciesResponse.Marshal(b, m, deterministic)
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHomeNetworkPoliciesResponse.Merge(m, src)
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Size() int {
	return xxx_messageInfo_ListHomeNetworkPoliciesResponse.Size(m)
}
func (m *ListHomeNetworkPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHomeNetworkPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHomeNetworkPoliciesResponse proto.InternalMessageInfo

func (m *ListHomeNetworkPoliciesResponse) GetPolicies() []*v3.RoutingPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ListHomeNetworkPoliciesResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetHomeNetworkPolicyRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId  string   `protobuf:"bytes,4,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHomeNetworkPolicyRequest) Reset()         { *m = GetHomeNetworkPolicyRequest{} }
func (m *GetHomeNetworkPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetHomeNetworkPolicyRequest) ProtoMessage()    {}
func (*GetHomeNetworkPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{5}
}
func (m *GetHomeNetworkPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHomeNetworkPolicyRequest.Unmarshal(m, b)
}
func (m *GetHomeNetworkPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHomeNetworkPolicyRequest.Marshal(b, m, deterministic)
}
func (m *GetHomeNetworkPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkPolicyRequest.Merge(m, src)
}
func (m *GetHomeNetworkPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_GetHomeNetworkPolicyRequest.Size(m)
}
func (m *GetHomeNetworkPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkPolicyRequest proto.InternalMessageInfo

func (m *GetHomeNetworkPolicyRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkPolicyRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *GetHomeNetworkPolicyRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *GetHomeNetworkPolicyRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

type SetPolicyRequest struct {
	Policy               *v3.RoutingPolicy `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetPolicyRequest) Reset()         { *m = SetPolicyRequest{} }
func (m *SetPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*SetPolicyRequest) ProtoMessage()    {}
func (*SetPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{6}
}
func (m *SetPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPolicyRequest.Unmarshal(m, b)
}
func (m *SetPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPolicyRequest.Marshal(b, m, deterministic)
}
func (m *SetPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPolicyRequest.Merge(m, src)
}
func (m *SetPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_SetPolicyRequest.Size(m)
}
func (m *SetPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPolicyRequest proto.InternalMessageInfo

func (m *SetPolicyRequest) GetPolicy() *v3.RoutingPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type GetPolicyResponse struct {
	Policy               *v3.RoutingPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPolicyResponse) Reset()         { *m = GetPolicyResponse{} }
func (m *GetPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*GetPolicyResponse) ProtoMessage()    {}
func (*GetPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{7}
}
func (m *GetPolicyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPolicyResponse.Unmarshal(m, b)
}
func (m *GetPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPolicyResponse.Marshal(b, m, deterministic)
}
func (m *GetPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyResponse.Merge(m, src)
}
func (m *GetPolicyResponse) XXX_Size() int {
	return xxx_messageInfo_GetPolicyResponse.Size(m)
}
func (m *GetPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyResponse proto.InternalMessageInfo

func (m *GetPolicyResponse) GetPolicy() *v3.RoutingPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type ListEffectivePoliciesRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// ID assigned by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,2,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Number of items to skip.
	Offset uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEffectivePoliciesRequest) Reset()         { *m = ListEffectivePoliciesRequest{} }
func (m *ListEffectivePoliciesRequest) String() string { return proto.CompactTextString(m) }
func (*ListEffectivePoliciesRequest) ProtoMessage()    {}
func (*ListEffectivePoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{8}
}
func (m *ListEffectivePoliciesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEffectivePoliciesRequest.Unmarshal(m, b)
}
func (m *ListEffectivePoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEffectivePoliciesRequest.Marshal(b, m, deterministic)
}
func (m *ListEffectivePoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEffectivePoliciesRequest.Merge(m, src)
}
func (m *ListEffectivePoliciesRequest) XXX_Size() int {
	return xxx_messageInfo_ListEffectivePoliciesRequest.Size(m)
}
func (m *ListEffectivePoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEffectivePoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEffectivePoliciesRequest proto.InternalMessageInfo

func (m *ListEffectivePoliciesRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *ListEffectivePoliciesRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

func (m *ListEffectivePoliciesRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListEffectivePoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListEffectivePoliciesResponse struct {
	Policies []*v3.RoutingPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// Total number of items.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEffectivePoliciesResponse) Reset()         { *m = ListEffectivePoliciesResponse{} }
func (m *ListEffectivePoliciesResponse) String() string { return proto.CompactTextString(m) }
func (*ListEffectivePoliciesResponse) ProtoMessage()    {}
func (*ListEffectivePoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{9}
}
func (m *ListEffectivePoliciesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEffectivePoliciesResponse.Unmarshal(m, b)
}
func (m *ListEffectivePoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEffectivePoliciesResponse.Marshal(b, m, deterministic)
}
func (m *ListEffectivePoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEffectivePoliciesResponse.Merge(m, src)
}
func (m *ListEffectivePoliciesResponse) XXX_Size() int {
	return xxx_messageInfo_ListEffectivePoliciesResponse.Size(m)
}
func (m *ListEffectivePoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEffectivePoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEffectivePoliciesResponse proto.InternalMessageInfo

func (m *ListEffectivePoliciesResponse) GetPolicies() []*v3.RoutingPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ListEffectivePoliciesResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ListNetworksWithPolicyRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Number of items to skip.
	Offset uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filter tenants by ID.
	TenantIdContains string `protobuf:"bytes,5,opt,name=tenant_id_contains,json=tenantIdContains,proto3" json:"tenant_id_contains,omitempty"`
	// Filter networks by name.
	NameContains         string   `protobuf:"bytes,6,opt,name=name_contains,json=nameContains,proto3" json:"name_contains,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksWithPolicyRequest) Reset()         { *m = ListNetworksWithPolicyRequest{} }
func (m *ListNetworksWithPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*ListNetworksWithPolicyRequest) ProtoMessage()    {}
func (*ListNetworksWithPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{10}
}
func (m *ListNetworksWithPolicyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworksWithPolicyRequest.Unmarshal(m, b)
}
func (m *ListNetworksWithPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworksWithPolicyRequest.Marshal(b, m, deterministic)
}
func (m *ListNetworksWithPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksWithPolicyRequest.Merge(m, src)
}
func (m *ListNetworksWithPolicyRequest) XXX_Size() int {
	return xxx_messageInfo_ListNetworksWithPolicyRequest.Size(m)
}
func (m *ListNetworksWithPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksWithPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksWithPolicyRequest proto.InternalMessageInfo

func (m *ListNetworksWithPolicyRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *ListNetworksWithPolicyRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *ListNetworksWithPolicyRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListNetworksWithPolicyRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListNetworksWithPolicyRequest) GetTenantIdContains() string {
	if m != nil {
		return m.TenantIdContains
	}
	return ""
}

func (m *ListNetworksWithPolicyRequest) GetNameContains() string {
	if m != nil {
		return m.NameContains
	}
	return ""
}

type ListNetworksResponse struct {
	Networks []*v3.NetworkOrTenant `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Total number of networks.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksResponse) Reset()         { *m = ListNetworksResponse{} }
func (m *ListNetworksResponse) String() string { return proto.CompactTextString(m) }
func (*ListNetworksResponse) ProtoMessage()    {}
func (*ListNetworksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{11}
}
func (m *ListNetworksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNetworksResponse.Unmarshal(m, b)
}
func (m *ListNetworksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNetworksResponse.Marshal(b, m, deterministic)
}
func (m *ListNetworksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksResponse.Merge(m, src)
}
func (m *ListNetworksResponse) XXX_Size() int {
	return xxx_messageInfo_ListNetworksResponse.Size(m)
}
func (m *ListNetworksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksResponse proto.InternalMessageInfo

func (m *ListNetworksResponse) GetNetworks() []*v3.NetworkOrTenant {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *ListNetworksResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type PublishUplinkMessageRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,3,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Uplink message to publish.
	Message              *v3.UplinkMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishUplinkMessageRequest) Reset()         { *m = PublishUplinkMessageRequest{} }
func (m *PublishUplinkMessageRequest) String() string { return proto.CompactTextString(m) }
func (*PublishUplinkMessageRequest) ProtoMessage()    {}
func (*PublishUplinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{12}
}
func (m *PublishUplinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishUplinkMessageRequest.Unmarshal(m, b)
}
func (m *PublishUplinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishUplinkMessageRequest.Marshal(b, m, deterministic)
}
func (m *PublishUplinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishUplinkMessageRequest.Merge(m, src)
}
func (m *PublishUplinkMessageRequest) XXX_Size() int {
	return xxx_messageInfo_PublishUplinkMessageRequest.Size(m)
}
func (m *PublishUplinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishUplinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishUplinkMessageRequest proto.InternalMessageInfo

func (m *PublishUplinkMessageRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *PublishUplinkMessageRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *PublishUplinkMessageRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *PublishUplinkMessageRequest) GetMessage() *v3.UplinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PublishUplinkMessageResponse struct {
	// Message identifier generated by the Router.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishUplinkMessageResponse) Reset()         { *m = PublishUplinkMessageResponse{} }
func (m *PublishUplinkMessageResponse) String() string { return proto.CompactTextString(m) }
func (*PublishUplinkMessageResponse) ProtoMessage()    {}
func (*PublishUplinkMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{13}
}
func (m *PublishUplinkMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishUplinkMessageResponse.Unmarshal(m, b)
}
func (m *PublishUplinkMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishUplinkMessageResponse.Marshal(b, m, deterministic)
}
func (m *PublishUplinkMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishUplinkMessageResponse.Merge(m, src)
}
func (m *PublishUplinkMessageResponse) XXX_Size() int {
	return xxx_messageInfo_PublishUplinkMessageResponse.Size(m)
}
func (m *PublishUplinkMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishUplinkMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishUplinkMessageResponse proto.InternalMessageInfo

func (m *PublishUplinkMessageResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PublishDownlinkMessageRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	HomeNetworkTenantId string `protobuf:"bytes,3,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	ForwarderNetId uint32 `protobuf:"varint,4,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	// In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
	// In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
	ForwarderClusterId string `protobuf:"bytes,5,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	// In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
	// In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
	ForwarderTenantId string `protobuf:"bytes,6,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Downlink message to publish.
	Message              *v3.DownlinkMessage `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublishDownlinkMessageRequest) Reset()         { *m = PublishDownlinkMessageRequest{} }
func (m *PublishDownlinkMessageRequest) String() string { return proto.CompactTextString(m) }
func (*PublishDownlinkMessageRequest) ProtoMessage()    {}
func (*PublishDownlinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{14}
}
func (m *PublishDownlinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishDownlinkMessageRequest.Unmarshal(m, b)
}
func (m *PublishDownlinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishDownlinkMessageRequest.Marshal(b, m, deterministic)
}
func (m *PublishDownlinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishDownlinkMessageRequest.Merge(m, src)
}
func (m *PublishDownlinkMessageRequest) XXX_Size() int {
	return xxx_messageInfo_PublishDownlinkMessageRequest.Size(m)
}
func (m *PublishDownlinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishDownlinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishDownlinkMessageRequest proto.InternalMessageInfo

func (m *PublishDownlinkMessageRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *PublishDownlinkMessageRequest) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *PublishDownlinkMessageRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetMessage() *v3.DownlinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PublishDownlinkMessageResponse struct {
	// Message identifier generated by the Router.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishDownlinkMessageResponse) Reset()         { *m = PublishDownlinkMessageResponse{} }
func (m *PublishDownlinkMessageResponse) String() string { return proto.CompactTextString(m) }
func (*PublishDownlinkMessageResponse) ProtoMessage()    {}
func (*PublishDownlinkMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{15}
}
func (m *PublishDownlinkMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishDownlinkMessageResponse.Unmarshal(m, b)
}
func (m *PublishDownlinkMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishDownlinkMessageResponse.Marshal(b, m, deterministic)
}
func (m *PublishDownlinkMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishDownlinkMessageResponse.Merge(m, src)
}
func (m *PublishDownlinkMessageResponse) XXX_Size() int {
	return xxx_messageInfo_PublishDownlinkMessageResponse.Size(m)
}
func (m *PublishDownlinkMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishDownlinkMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishDownlinkMessageResponse proto.InternalMessageInfo

func (m *PublishDownlinkMessageResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SubscribeForwarderRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,3,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Shared subscription group (optional).
	// Queue durability depends on the Router configuration.
	Group                string   `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeForwarderRequest) Reset()         { *m = SubscribeForwarderRequest{} }
func (m *SubscribeForwarderRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeForwarderRequest) ProtoMessage()    {}
func (*SubscribeForwarderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{16}
}
func (m *SubscribeForwarderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeForwarderRequest.Unmarshal(m, b)
}
func (m *SubscribeForwarderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeForwarderRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeForwarderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeForwarderRequest.Merge(m, src)
}
func (m *SubscribeForwarderRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeForwarderRequest.Size(m)
}
func (m *SubscribeForwarderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeForwarderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeForwarderRequest proto.InternalMessageInfo

func (m *SubscribeForwarderRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SubscribeForwarderRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *SubscribeForwarderRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *SubscribeForwarderRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type SubscribeHomeNetworkRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,3,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Routing filters to configure the subscription.
	// A message gets delivered if any of the given filters pass.
	// If no filters are specified, all messages will be delivered.
	Filters []*v3.RoutingFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	// Shared subscription group (optional).
	// Queue durability depends on the Router configuration.
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeHomeNetworkRequest) Reset()         { *m = SubscribeHomeNetworkRequest{} }
func (m *SubscribeHomeNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeHomeNetworkRequest) ProtoMessage()    {}
func (*SubscribeHomeNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{17}
}
func (m *SubscribeHomeNetworkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeHomeNetworkRequest.Unmarshal(m, b)
}
func (m *SubscribeHomeNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeHomeNetworkRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeHomeNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHomeNetworkRequest.Merge(m, src)
}
func (m *SubscribeHomeNetworkRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeHomeNetworkRequest.Size(m)
}
func (m *SubscribeHomeNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHomeNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHomeNetworkRequest proto.InternalMessageInfo

func (m *SubscribeHomeNetworkRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *SubscribeHomeNetworkRequest) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

func (m *SubscribeHomeNetworkRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

func (m *SubscribeHomeNetworkRequest) GetFilters() []*v3.RoutingFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *SubscribeHomeNetworkRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type RouteUplinkMessageRequest struct {
	// Uplink message to route.
	Message              *v3.RoutedUplinkMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RouteUplinkMessageRequest) Reset()         { *m = RouteUplinkMessageRequest{} }
func (m *RouteUplinkMessageRequest) String() string { return proto.CompactTextString(m) }
func (*RouteUplinkMessageRequest) ProtoMessage()    {}
func (*RouteUplinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{18}
}
func (m *RouteUplinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteUplinkMessageRequest.Unmarshal(m, b)
}
func (m *RouteUplinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteUplinkMessageRequest.Marshal(b, m, deterministic)
}
func (m *RouteUplinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteUplinkMessageRequest.Merge(m, src)
}
func (m *RouteUplinkMessageRequest) XXX_Size() int {
	return xxx_messageInfo_RouteUplinkMessageRequest.Size(m)
}
func (m *RouteUplinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteUplinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteUplinkMessageRequest proto.InternalMessageInfo

func (m *RouteUplinkMessageRequest) GetMessage() *v3.RoutedUplinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type RouteDownlinkMessageRequest struct {
	// Downlink message to route.
	Message              *v3.RoutedDownlinkMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RouteDownlinkMessageRequest) Reset()         { *m = RouteDownlinkMessageRequest{} }
func (m *RouteDownlinkMessageRequest) String() string { return proto.CompactTextString(m) }
func (*RouteDownlinkMessageRequest) ProtoMessage()    {}
func (*RouteDownlinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{19}
}
func (m *RouteDownlinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteDownlinkMessageRequest.Unmarshal(m, b)
}
func (m *RouteDownlinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteDownlinkMessageRequest.Marshal(b, m, deterministic)
}
func (m *RouteDownlinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteDownlinkMessageRequest.Merge(m, src)
}
func (m *RouteDownlinkMessageRequest) XXX_Size() int {
	return xxx_messageInfo_RouteDownlinkMessageRequest.Size(m)
}
func (m *RouteDownlinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteDownlinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteDownlinkMessageRequest proto.InternalMessageInfo

func (m *RouteDownlinkMessageRequest) GetMessage() *v3.RoutedDownlinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type RouteMessageResponse struct {
	// Delivery state of the message.
	State                v3.MessageDeliveryState `protobuf:"varint,1,opt,name=state,proto3,enum=org.packetbroker.v3.MessageDeliveryState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RouteMessageResponse) Reset()         { *m = RouteMessageResponse{} }
func (m *RouteMessageResponse) String() string { return proto.CompactTextString(m) }
func (*RouteMessageResponse) ProtoMessage()    {}
func (*RouteMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{20}
}
func (m *RouteMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteMessageResponse.Unmarshal(m, b)
}
func (m *RouteMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteMessageResponse.Marshal(b, m, deterministic)
}
func (m *RouteMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteMessageResponse.Merge(m, src)
}
func (m *RouteMessageResponse) XXX_Size() int {
	return xxx_messageInfo_RouteMessageResponse.Size(m)
}
func (m *RouteMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteMessageResponse proto.InternalMessageInfo

func (m *RouteMessageResponse) GetState() v3.MessageDeliveryState {
	if m != nil {
		return m.State
	}
	return v3.MessageDeliveryState_ACCEPTED
}

type DownlinkMessageDeliveryStateChangeRequest struct {
	StateChange          *v3.DownlinkMessageDeliveryStateChange `protobuf:"bytes,1,opt,name=state_change,json=stateChange,proto3" json:"state_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *DownlinkMessageDeliveryStateChangeRequest) Reset() {
	*m = DownlinkMessageDeliveryStateChangeRequest{}
}
func (m *DownlinkMessageDeliveryStateChangeRequest) String() string {
	return proto.CompactTextString(m)
}
func (*DownlinkMessageDeliveryStateChangeRequest) ProtoMessage() {}
func (*DownlinkMessageDeliveryStateChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{21}
}
func (m *DownlinkMessageDeliveryStateChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkMessageDeliveryStateChangeRequest.Unmarshal(m, b)
}
func (m *DownlinkMessageDeliveryStateChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkMessageDeliveryStateChangeRequest.Marshal(b, m, deterministic)
}
func (m *DownlinkMessageDeliveryStateChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessageDeliveryStateChangeRequest.Merge(m, src)
}
func (m *DownlinkMessageDeliveryStateChangeRequest) XXX_Size() int {
	return xxx_messageInfo_DownlinkMessageDeliveryStateChangeRequest.Size(m)
}
func (m *DownlinkMessageDeliveryStateChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessageDeliveryStateChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessageDeliveryStateChangeRequest proto.InternalMessageInfo

func (m *DownlinkMessageDeliveryStateChangeRequest) GetStateChange() *v3.DownlinkMessageDeliveryStateChange {
	if m != nil {
		return m.StateChange
	}
	return nil
}

type UplinkMessageDeliveryStateChangeRequest struct {
	StateChange          *v3.UplinkMessageDeliveryStateChange `protobuf:"bytes,1,opt,name=state_change,json=stateChange,proto3" json:"state_change,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *UplinkMessageDeliveryStateChangeRequest) Reset() {
	*m = UplinkMessageDeliveryStateChangeRequest{}
}
func (m *UplinkMessageDeliveryStateChangeRequest) String() string { return proto.CompactTextString(m) }
func (*UplinkMessageDeliveryStateChangeRequest) ProtoMessage()    {}
func (*UplinkMessageDeliveryStateChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{22}
}
func (m *UplinkMessageDeliveryStateChangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UplinkMessageDeliveryStateChangeRequest.Unmarshal(m, b)
}
func (m *UplinkMessageDeliveryStateChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UplinkMessageDeliveryStateChangeRequest.Marshal(b, m, deterministic)
}
func (m *UplinkMessageDeliveryStateChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessageDeliveryStateChangeRequest.Merge(m, src)
}
func (m *UplinkMessageDeliveryStateChangeRequest) XXX_Size() int {
	return xxx_messageInfo_UplinkMessageDeliveryStateChangeRequest.Size(m)
}
func (m *UplinkMessageDeliveryStateChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessageDeliveryStateChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessageDeliveryStateChangeRequest proto.InternalMessageInfo

func (m *UplinkMessageDeliveryStateChangeRequest) GetStateChange() *v3.UplinkMessageDeliveryStateChange {
	if m != nil {
		return m.StateChange
	}
	return nil
}

type ListRoutesRequest struct {
	// Types that are valid to be assigned to Start:
	//	*ListRoutesRequest_CreatedSince
	//	*ListRoutesRequest_Offset
	Start isListRoutesRequest_Start `protobuf_oneof:"start"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoutesRequest) Reset()         { *m = ListRoutesRequest{} }
func (m *ListRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRoutesRequest) ProtoMessage()    {}
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{23}
}
func (m *ListRoutesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRoutesRequest.Unmarshal(m, b)
}
func (m *ListRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRoutesRequest.Marshal(b, m, deterministic)
}
func (m *ListRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoutesRequest.Merge(m, src)
}
func (m *ListRoutesRequest) XXX_Size() int {
	return xxx_messageInfo_ListRoutesRequest.Size(m)
}
func (m *ListRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoutesRequest proto.InternalMessageInfo

type isListRoutesRequest_Start interface {
	isListRoutesRequest_Start()
}

type ListRoutesRequest_CreatedSince struct {
	CreatedSince *types.Timestamp `protobuf:"bytes,1,opt,name=created_since,json=createdSince,proto3,oneof" json:"created_since,omitempty"`
}
type ListRoutesRequest_Offset struct {
	Offset uint32 `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (*ListRoutesRequest_CreatedSince) isListRoutesRequest_Start() {}
func (*ListRoutesRequest_Offset) isListRoutesRequest_Start()       {}

func (m *ListRoutesRequest) GetStart() isListRoutesRequest_Start {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListRoutesRequest) GetCreatedSince() *types.Timestamp {
	if x, ok := m.GetStart().(*ListRoutesRequest_CreatedSince); ok {
		return x.CreatedSince
	}
	return nil
}

func (m *ListRoutesRequest) GetOffset() uint32 {
	if x, ok := m.GetStart().(*ListRoutesRequest_Offset); ok {
		return x.Offset
	}
	return 0
}

func (m *ListRoutesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListRoutesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListRoutesRequest_CreatedSince)(nil),
		(*ListRoutesRequest_Offset)(nil),
	}
}

type ListRoutesResponse struct {
	Routes []*v3.DevAddrPrefixRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	// Total number of routes.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoutesResponse) Reset()         { *m = ListRoutesResponse{} }
func (m *ListRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRoutesResponse) ProtoMessage()    {}
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{24}
}
func (m *ListRoutesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRoutesResponse.Unmarshal(m, b)
}
func (m *ListRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRoutesResponse.Marshal(b, m, deterministic)
}
func (m *ListRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoutesResponse.Merge(m, src)
}
func (m *ListRoutesResponse) XXX_Size() int {
	return xxx_messageInfo_ListRoutesResponse.Size(m)
}
func (m *ListRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoutesResponse proto.InternalMessageInfo

func (m *ListRoutesResponse) GetRoutes() []*v3.DevAddrPrefixRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ListRoutesResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ListTargetsRequest struct {
	// Number of items to skip.
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTargetsRequest) Reset()         { *m = ListTargetsRequest{} }
func (m *ListTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTargetsRequest) ProtoMessage()    {}
func (*ListTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{25}
}
func (m *ListTargetsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTargetsRequest.Unmarshal(m, b)
}
func (m *ListTargetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTargetsRequest.Marshal(b, m, deterministic)
}
func (m *ListTargetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTargetsRequest.Merge(m, src)
}
func (m *ListTargetsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTargetsRequest.Size(m)
}
func (m *ListTargetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTargetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTargetsRequest proto.InternalMessageInfo

func (m *ListTargetsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListTargetsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListTargetsResponse struct {
	Targets []*v3.NetworkTarget `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	// Total number of targets.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTargetsResponse) Reset()         { *m = ListTargetsResponse{} }
func (m *ListTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTargetsResponse) ProtoMessage()    {}
func (*ListTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{26}
}
func (m *ListTargetsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTargetsResponse.Unmarshal(m, b)
}
func (m *ListTargetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTargetsResponse.Marshal(b, m, deterministic)
}
func (m *ListTargetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTargetsResponse.Merge(m, src)
}
func (m *ListTargetsResponse) XXX_Size() int {
	return xxx_messageInfo_ListTargetsResponse.Size(m)
}
func (m *ListTargetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTargetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTargetsResponse proto.InternalMessageInfo

func (m *ListTargetsResponse) GetTargets() []*v3.NetworkTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *ListTargetsResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*ListDefaultPoliciesRequest)(nil), "org.packetbroker.routing.v1.ListDefaultPoliciesRequest")
	proto.RegisterType((*ListDefaultPoliciesResponse)(nil), "org.packetbroker.routing.v1.ListDefaultPoliciesResponse")
	proto.RegisterType((*GetDefaultPolicyRequest)(nil), "org.packetbroker.routing.v1.GetDefaultPolicyRequest")
	proto.RegisterType((*ListHomeNetworkPoliciesRequest)(nil), "org.packetbroker.routing.v1.ListHomeNetworkPoliciesRequest")
	proto.RegisterType((*ListHomeNetworkPoliciesResponse)(nil), "org.packetbroker.routing.v1.ListHomeNetworkPoliciesResponse")
	proto.RegisterType((*GetHomeNetworkPolicyRequest)(nil), "org.packetbroker.routing.v1.GetHomeNetworkPolicyRequest")
	proto.RegisterType((*SetPolicyRequest)(nil), "org.packetbroker.routing.v1.SetPolicyRequest")
	proto.RegisterType((*GetPolicyResponse)(nil), "org.packetbroker.routing.v1.GetPolicyResponse")
	proto.RegisterType((*ListEffectivePoliciesRequest)(nil), "org.packetbroker.routing.v1.ListEffectivePoliciesRequest")
	proto.RegisterType((*ListEffectivePoliciesResponse)(nil), "org.packetbroker.routing.v1.ListEffectivePoliciesResponse")
	proto.RegisterType((*ListNetworksWithPolicyRequest)(nil), "org.packetbroker.routing.v1.ListNetworksWithPolicyRequest")
	proto.RegisterType((*ListNetworksResponse)(nil), "org.packetbroker.routing.v1.ListNetworksResponse")
	proto.RegisterType((*PublishUplinkMessageRequest)(nil), "org.packetbroker.routing.v1.PublishUplinkMessageRequest")
	proto.RegisterType((*PublishUplinkMessageResponse)(nil), "org.packetbroker.routing.v1.PublishUplinkMessageResponse")
	proto.RegisterType((*PublishDownlinkMessageRequest)(nil), "org.packetbroker.routing.v1.PublishDownlinkMessageRequest")
	proto.RegisterType((*PublishDownlinkMessageResponse)(nil), "org.packetbroker.routing.v1.PublishDownlinkMessageResponse")
	proto.RegisterType((*SubscribeForwarderRequest)(nil), "org.packetbroker.routing.v1.SubscribeForwarderRequest")
	proto.RegisterType((*SubscribeHomeNetworkRequest)(nil), "org.packetbroker.routing.v1.SubscribeHomeNetworkRequest")
	proto.RegisterType((*RouteUplinkMessageRequest)(nil), "org.packetbroker.routing.v1.RouteUplinkMessageRequest")
	proto.RegisterType((*RouteDownlinkMessageRequest)(nil), "org.packetbroker.routing.v1.RouteDownlinkMessageRequest")
	proto.RegisterType((*RouteMessageResponse)(nil), "org.packetbroker.routing.v1.RouteMessageResponse")
	proto.RegisterType((*DownlinkMessageDeliveryStateChangeRequest)(nil), "org.packetbroker.routing.v1.DownlinkMessageDeliveryStateChangeRequest")
	proto.RegisterType((*UplinkMessageDeliveryStateChangeRequest)(nil), "org.packetbroker.routing.v1.UplinkMessageDeliveryStateChangeRequest")
	proto.RegisterType((*ListRoutesRequest)(nil), "org.packetbroker.routing.v1.ListRoutesRequest")
	proto.RegisterType((*ListRoutesResponse)(nil), "org.packetbroker.routing.v1.ListRoutesResponse")
	proto.RegisterType((*ListTargetsRequest)(nil), "org.packetbroker.routing.v1.ListTargetsRequest")
	proto.RegisterType((*ListTargetsResponse)(nil), "org.packetbroker.routing.v1.ListTargetsResponse")
}

func init() {
	proto.RegisterFile("packetbroker/api/routing/v1/service.proto", fileDescriptor_4dd6b7e608465b58)
}

var fileDescriptor_4dd6b7e608465b58 = []byte{
	// 1455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xeb, 0x6e, 0x1b, 0xc5,
	0x17, 0xef, 0xc4, 0xb1, 0x93, 0x9c, 0xc4, 0xfd, 0xa7, 0x13, 0x37, 0x4d, 0xd7, 0xbd, 0xe4, 0xbf,
	0x20, 0x35, 0x01, 0xba, 0x4e, 0x1d, 0x0a, 0xbd, 0x44, 0x2d, 0x4d, 0xd3, 0x9b, 0x44, 0x2f, 0xda,
	0x14, 0x15, 0x2a, 0x21, 0x6b, 0x6d, 0x8f, 0x9d, 0x55, 0xec, 0xdd, 0xed, 0xee, 0xd8, 0x69, 0x24,
	0x84, 0x10, 0xad, 0x28, 0x48, 0x15, 0x7c, 0xe1, 0x41, 0x78, 0x01, 0x1e, 0x02, 0x89, 0x6f, 0x3c,
	0x00, 0xe2, 0x2d, 0x90, 0x67, 0x67, 0xaf, 0xde, 0xd9, 0xb5, 0x2d, 0x22, 0xc1, 0xa7, 0x68, 0x67,
	0xce, 0xf5, 0xf7, 0x3b, 0x33, 0x73, 0x4e, 0x0c, 0xeb, 0x96, 0xd6, 0xd8, 0x27, 0xb4, 0x6e, 0x9b,
	0xfb, 0xc4, 0xae, 0x68, 0x96, 0x5e, 0xb1, 0xcd, 0x1e, 0xd5, 0x8d, 0x76, 0xa5, 0x7f, 0xa9, 0xe2,
	0x10, 0xbb, 0xaf, 0x37, 0x88, 0x62, 0xd9, 0x26, 0x35, 0x71, 0xd9, 0xb4, 0xdb, 0x4a, 0x58, 0x5c,
	0xe1, 0xa2, 0x4a, 0xff, 0x92, 0x54, 0x6e, 0x9b, 0x66, 0xbb, 0x43, 0x2a, 0x4c, 0xb4, 0xde, 0x6b,
	0x55, 0x48, 0xd7, 0xa2, 0x87, 0xae, 0xa6, 0x74, 0x3e, 0xbe, 0x49, 0xf5, 0x2e, 0x71, 0xa8, 0xd6,
	0xb5, 0x3c, 0x81, 0xa1, 0x28, 0xfa, 0x9b, 0x15, 0x62, 0xf4, 0xba, 0x0e, 0x17, 0x90, 0x93, 0x04,
	0xba, 0xc4, 0x71, 0xb4, 0x36, 0x49, 0x95, 0x31, 0x08, 0x3d, 0x30, 0xed, 0x7d, 0x4f, 0xe6, 0xff,
	0x49, 0x32, 0x5e, 0x1a, 0x4c, 0x44, 0x76, 0x40, 0xfa, 0x54, 0x77, 0xe8, 0x0e, 0x69, 0x69, 0xbd,
	0x0e, 0x7d, 0x62, 0x76, 0xf4, 0x86, 0x4e, 0x1c, 0x95, 0xbc, 0xe8, 0x11, 0x87, 0xe2, 0x9b, 0x50,
	0xec, 0x59, 0x4d, 0x8d, 0x92, 0x66, 0xcd, 0xd1, 0x8d, 0x06, 0x59, 0x41, 0xab, 0x68, 0x6d, 0xbe,
	0x2a, 0x29, 0x6e, 0x8a, 0x8a, 0x97, 0xa2, 0xf2, 0xd4, 0x4b, 0x51, 0x5d, 0xe0, 0x0a, 0xbb, 0x03,
	0x79, 0x5c, 0x82, 0x7c, 0x47, 0xef, 0xea, 0x74, 0x65, 0x6a, 0x15, 0xad, 0x15, 0x55, 0xf7, 0x43,
	0x76, 0xa0, 0x9c, 0xe8, 0xd4, 0xb1, 0x4c, 0xc3, 0x21, 0xf8, 0x06, 0xcc, 0x5a, 0x7c, 0x6d, 0x05,
	0xad, 0xe6, 0xd6, 0xe6, 0xab, 0xb2, 0x32, 0xc4, 0x46, 0x7f, 0x53, 0x51, 0xdd, 0x4c, 0x98, 0xfe,
	0xa1, 0xea, 0xeb, 0x0c, 0x9c, 0x52, 0x93, 0x6a, 0x1d, 0xcf, 0x29, 0xfb, 0x90, 0x1d, 0x38, 0x75,
	0x8f, 0x44, 0x7c, 0x1e, 0x7a, 0x69, 0xae, 0xc1, 0x62, 0xcb, 0xb4, 0x0f, 0x34, 0xbb, 0x49, 0xec,
	0x9a, 0x41, 0x68, 0x4d, 0x6f, 0xb2, 0x4c, 0x8b, 0xea, 0x71, 0x7f, 0xfd, 0x11, 0xa1, 0x0f, 0x9a,
	0x58, 0x81, 0xa5, 0x40, 0x92, 0x12, 0x43, 0x33, 0x98, 0xf0, 0xc0, 0xd1, 0x9c, 0x7a, 0xc2, 0xdf,
	0x7a, 0xca, 0x76, 0x1e, 0x34, 0xe5, 0xdf, 0x10, 0x9c, 0x1b, 0xa4, 0x7a, 0xdf, 0xec, 0x92, 0x47,
	0x2e, 0x39, 0x71, 0x8c, 0x8f, 0xcc, 0xf9, 0x30, 0x7b, 0xb9, 0x49, 0xd9, 0x9b, 0x0e, 0xb3, 0x77,
	0x00, 0xe7, 0x85, 0x29, 0x1d, 0x29, 0x83, 0x7f, 0x20, 0x28, 0xdf, 0x23, 0x43, 0x8e, 0x8f, 0x9e,
	0x46, 0x7c, 0x11, 0x96, 0xf6, 0xcc, 0x2e, 0xa9, 0xf1, 0xf3, 0xe5, 0x19, 0xcf, 0x31, 0xe3, 0x8b,
	0x7b, 0x41, 0x40, 0xae, 0xf9, 0x4d, 0x58, 0x8e, 0x88, 0x07, 0x1e, 0xa6, 0x99, 0x87, 0xa5, 0x90,
	0x86, 0x5f, 0x2a, 0x8f, 0x60, 0x71, 0x97, 0xc4, 0x0a, 0xf3, 0x1a, 0x14, 0x18, 0x26, 0x87, 0x9c,
	0xba, 0x51, 0x50, 0xe4, 0x1a, 0xf2, 0x63, 0x38, 0x71, 0x2f, 0xb0, 0xc7, 0x89, 0x09, 0x0c, 0xa2,
	0xb1, 0x0d, 0xfe, 0x82, 0xe0, 0xcc, 0x80, 0xf8, 0x3b, 0xad, 0x16, 0x69, 0x50, 0xbd, 0x4f, 0xe2,
	0x95, 0x2c, 0x40, 0x09, 0x8d, 0x8d, 0xd2, 0x94, 0x10, 0x25, 0xbc, 0x0c, 0x05, 0xb3, 0xd5, 0x72,
	0x08, 0xe5, 0xe0, 0xf3, 0x2f, 0x41, 0xa9, 0xf6, 0xe0, 0xac, 0x20, 0xe2, 0x23, 0x2d, 0xd4, 0xdf,
	0x91, 0xeb, 0x97, 0x07, 0xef, 0x3c, 0xd3, 0xe9, 0x5e, 0x94, 0xd8, 0x93, 0x50, 0x88, 0xa0, 0x93,
	0x37, 0x18, 0x24, 0x65, 0x98, 0x8b, 0xa3, 0x30, 0x4b, 0x27, 0x4a, 0x1d, 0x7f, 0x00, 0xd8, 0x37,
	0x55, 0x6b, 0x98, 0x06, 0xd5, 0x74, 0xc3, 0x59, 0xc9, 0x33, 0x9b, 0x8b, 0x9e, 0xcd, 0xdb, 0x7c,
	0x1d, 0xbf, 0x03, 0x45, 0x43, 0xeb, 0x92, 0x40, 0xb0, 0xc0, 0x04, 0x17, 0x06, 0x8b, 0x9e, 0x90,
	0x6c, 0x40, 0x29, 0x9c, 0x95, 0x0f, 0xe2, 0x27, 0x30, 0xeb, 0x3d, 0x3c, 0x1c, 0xc4, 0x77, 0x13,
	0x41, 0xe4, 0x8a, 0x8f, 0xf9, 0xb9, 0x52, 0x7d, 0x2d, 0x01, 0x8c, 0x7f, 0x22, 0x28, 0x3f, 0xe9,
	0xd5, 0x3b, 0xba, 0xb3, 0xf7, 0x99, 0xd5, 0xd1, 0x8d, 0xfd, 0x87, 0xee, 0x13, 0x38, 0xfe, 0x79,
	0xdf, 0x80, 0x52, 0x20, 0xd9, 0xe8, 0xf4, 0x1c, 0x4a, 0xec, 0x00, 0x62, 0xec, 0xef, 0xdd, 0x76,
	0xb7, 0xc4, 0x37, 0x44, 0x4e, 0x74, 0x43, 0x6c, 0xc1, 0x0c, 0x7f, 0xa0, 0x19, 0x0d, 0xa2, 0x3a,
	0x8a, 0xe6, 0xe1, 0xa9, 0xc8, 0x0a, 0x9c, 0x49, 0x4e, 0x94, 0x23, 0x7c, 0x1c, 0xa6, 0x78, 0x6e,
	0x73, 0xea, 0x94, 0xde, 0x94, 0xbf, 0xcb, 0xc1, 0x59, 0xae, 0xb0, 0x63, 0x1e, 0x18, 0x09, 0xd8,
	0x8c, 0x79, 0x16, 0x2f, 0xc3, 0xa9, 0x88, 0xf8, 0x10, 0x46, 0xa5, 0x90, 0x4a, 0x80, 0x92, 0xf8,
	0x08, 0xe7, 0xc4, 0x47, 0x38, 0x89, 0xb6, 0xe9, 0xb1, 0x68, 0xcb, 0x8f, 0x4b, 0x5b, 0x41, 0x44,
	0xdb, 0x8d, 0x80, 0xb6, 0x19, 0x46, 0x5b, 0x72, 0xe5, 0xc6, 0x41, 0xf6, 0x89, 0xdb, 0x80, 0x73,
	0x22, 0x1e, 0x04, 0xd4, 0xfd, 0x8a, 0xe0, 0xf4, 0x6e, 0xaf, 0xee, 0x34, 0x6c, 0xbd, 0x4e, 0xee,
	0x7a, 0x01, 0xfd, 0x1b, 0x4b, 0xba, 0x04, 0xf9, 0xb6, 0x6d, 0xf6, 0x2c, 0xfe, 0x68, 0xb9, 0x1f,
	0xf2, 0xdb, 0x29, 0x28, 0xfb, 0xf1, 0x87, 0x9e, 0xe2, 0xff, 0x40, 0xe1, 0x6d, 0xc1, 0x4c, 0x4b,
	0xef, 0x50, 0x62, 0x3b, 0x2b, 0xd3, 0xd9, 0x77, 0xfd, 0x5d, 0x26, 0xaa, 0x7a, 0x2a, 0x01, 0x1c,
	0xf9, 0x30, 0x1c, 0x35, 0x38, 0x3d, 0x90, 0x27, 0x89, 0x17, 0xd4, 0x76, 0x50, 0x5d, 0xee, 0x73,
	0xbb, 0x26, 0x74, 0x48, 0x9a, 0x82, 0xab, 0xa1, 0x01, 0x65, 0xb6, 0x2f, 0x38, 0xe7, 0x3b, 0x71,
	0x17, 0xef, 0xa5, 0xb8, 0x10, 0x96, 0xf1, 0x33, 0x28, 0x31, 0x89, 0x78, 0xf1, 0xde, 0x84, 0xbc,
	0x43, 0x35, 0xea, 0xda, 0x3e, 0x5e, 0x5d, 0x4f, 0xb4, 0xcd, 0x95, 0x76, 0x48, 0x47, 0xef, 0x13,
	0xfb, 0x70, 0x77, 0xa0, 0xa0, 0xba, 0x7a, 0xf2, 0x1b, 0x04, 0xeb, 0x31, 0xaf, 0x11, 0xb9, 0xdb,
	0x7b, 0x9a, 0x11, 0x24, 0xf3, 0x1c, 0x16, 0x98, 0x5a, 0xad, 0xc1, 0x96, 0x79, 0x46, 0x1f, 0x8f,
	0x72, 0x24, 0x93, 0xac, 0xce, 0x3b, 0xc1, 0x87, 0xfc, 0x0a, 0xc1, 0x85, 0x08, 0xc4, 0x29, 0x71,
	0x7c, 0x9e, 0x18, 0xc7, 0xe5, 0xec, 0x1b, 0x3d, 0x33, 0x8a, 0x9f, 0x10, 0x9c, 0x18, 0xbc, 0xa1,
	0x0c, 0x6d, 0xbf, 0x71, 0xba, 0x05, 0xc5, 0x86, 0x4d, 0xc6, 0x19, 0xb3, 0xee, 0x1f, 0x53, 0x17,
	0xb8, 0x8a, 0xdb, 0xaa, 0xaf, 0x44, 0x9b, 0x83, 0xfb, 0xc7, 0x86, 0xdb, 0x83, 0xf0, 0x08, 0xb6,
	0x3d, 0xc3, 0x98, 0xb5, 0xa9, 0xbc, 0x0f, 0x38, 0x1c, 0x90, 0x4f, 0x7c, 0xc1, 0x66, 0x2b, 0xfc,
	0x41, 0xbf, 0x90, 0xcc, 0x01, 0xe9, 0xdf, 0x6a, 0x36, 0xed, 0x27, 0x36, 0x69, 0xe9, 0x2f, 0x99,
	0x05, 0x95, 0xab, 0x09, 0x5e, 0xf4, 0x6d, 0xd7, 0xd9, 0x53, 0xcd, 0x6e, 0x13, 0xea, 0xa7, 0x1f,
	0x34, 0x36, 0x28, 0xb9, 0xb1, 0x89, 0x0c, 0x8f, 0x3a, 0x2c, 0x45, 0x6c, 0xf0, 0x88, 0xb7, 0x60,
	0x86, 0xba, 0x4b, 0xa9, 0x8d, 0x9c, 0x77, 0x27, 0x30, 0x51, 0xd5, 0x53, 0x49, 0x0e, 0xb7, 0xfa,
	0x6a, 0x16, 0x8a, 0x6e, 0xdf, 0xf6, 0x50, 0x33, 0xb4, 0x36, 0xb1, 0xf1, 0xf7, 0xc8, 0xf5, 0x1e,
	0x1b, 0x5d, 0x71, 0x42, 0x8d, 0x06, 0xff, 0x2e, 0x50, 0xc4, 0x13, 0xb6, 0x74, 0x65, 0x7c, 0x45,
	0x9e, 0xf0, 0x4b, 0x58, 0x8c, 0xcf, 0xb3, 0xf8, 0xc3, 0x54, 0x6b, 0x82, 0xf1, 0x57, 0x52, 0xb2,
	0xb4, 0x62, 0x43, 0xc4, 0x17, 0x6c, 0x52, 0x89, 0x7a, 0xbe, 0x98, 0x6a, 0x23, 0x3e, 0xd8, 0x48,
	0xcb, 0x43, 0xa5, 0x7d, 0xa7, 0x6b, 0xd1, 0x43, 0xfc, 0x33, 0x82, 0x53, 0x82, 0xe1, 0x12, 0x5f,
	0xcf, 0x84, 0x4a, 0x3c, 0x65, 0x4b, 0x5b, 0x93, 0x29, 0xf3, 0x8c, 0xbf, 0x41, 0x50, 0x4a, 0x9a,
	0x3c, 0xf1, 0x95, 0x2c, 0xe8, 0x44, 0xc3, 0xea, 0xd8, 0xa0, 0x7f, 0x09, 0xa5, 0xdd, 0xa4, 0x08,
	0xfe, 0x21, 0xe0, 0x7f, 0x44, 0x70, 0x32, 0x71, 0x54, 0xc2, 0x57, 0x33, 0x91, 0x13, 0x0d, 0x84,
	0xd2, 0xb5, 0x49, 0x54, 0x79, 0xbe, 0x6f, 0x10, 0x2c, 0x27, 0xcf, 0x50, 0x38, 0xdb, 0xac, 0x70,
	0xf0, 0x92, 0x2e, 0x8d, 0xac, 0xeb, 0x45, 0x52, 0xfd, 0x21, 0x07, 0x45, 0xbf, 0x51, 0xdb, 0xd1,
	0xa8, 0x86, 0xbf, 0x86, 0x19, 0xde, 0xf5, 0x65, 0x14, 0x40, 0xca, 0xf4, 0x22, 0x5d, 0x9d, 0x40,
	0x93, 0x63, 0xf3, 0x02, 0xe6, 0xfc, 0x16, 0x0c, 0x7f, 0x94, 0x5e, 0x00, 0xa2, 0x56, 0x53, 0x1a,
	0xa3, 0x51, 0xd8, 0x40, 0xf8, 0x35, 0x02, 0x59, 0x25, 0x96, 0x69, 0xd3, 0xb4, 0x87, 0x17, 0xdf,
	0x4d, 0x0d, 0x66, 0xe4, 0x4e, 0x40, 0x54, 0xa6, 0xd5, 0xb7, 0x39, 0xf8, 0x5f, 0xe8, 0x0c, 0x30,
	0x36, 0xbe, 0x45, 0x01, 0x1d, 0xd7, 0x46, 0x01, 0x35, 0xb9, 0x95, 0x92, 0xae, 0x4f, 0xa4, 0x9b,
	0x44, 0xc9, 0x95, 0xd1, 0x28, 0x19, 0xee, 0x9e, 0xa5, 0x91, 0x1b, 0xc4, 0x0d, 0x34, 0xb8, 0x94,
	0x56, 0x5d, 0x4a, 0xc4, 0x3d, 0x08, 0xde, 0x49, 0x0d, 0x65, 0xc4, 0x86, 0x48, 0x48, 0xc7, 0xeb,
	0x29, 0x00, 0x16, 0x9c, 0x7b, 0x2e, 0x5e, 0xc2, 0x7c, 0xa8, 0x19, 0xce, 0xa8, 0x4c, 0x61, 0xdb,
	0x9c, 0x71, 0x46, 0x13, 0x1b, 0xd5, 0xaf, 0xa0, 0x18, 0xe9, 0x92, 0x33, 0x28, 0x48, 0xe9, 0xa8,
	0x27, 0xf0, 0x5e, 0xfd, 0x0b, 0x41, 0xc1, 0x6d, 0xa0, 0x70, 0x17, 0x20, 0x68, 0xa7, 0xb0, 0x92,
	0x79, 0xdb, 0x44, 0x1a, 0x41, 0xa9, 0x32, 0xb2, 0x3c, 0xcf, 0xdb, 0x82, 0xf9, 0x50, 0x33, 0x84,
	0xb3, 0xf5, 0xa3, 0xad, 0x97, 0xb4, 0x31, 0xba, 0x82, 0xeb, 0x71, 0xfb, 0xfd, 0xe7, 0xeb, 0x6d,
	0x33, 0xaa, 0x61, 0xda, 0xed, 0xf0, 0x6f, 0x29, 0xd7, 0xf9, 0x5f, 0xab, 0x5e, 0x2f, 0xb0, 0x7a,
	0xd9, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x72, 0xde, 0x4f, 0x78, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicyManagerClient is the client API for PolicyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyManagerClient interface {
	// List the Default Routing Policies.
	ListDefaultPolicies(ctx context.Context, in *ListDefaultPoliciesRequest, opts ...grpc.CallOption) (*ListDefaultPoliciesResponse, error)
	// Get the Default Routing Policy.
	GetDefaultPolicy(ctx context.Context, in *GetDefaultPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Set the Default Routing Policy.
	SetDefaultPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// List the Routing Policies with Home Networks.
	ListHomeNetworkPolicies(ctx context.Context, in *ListHomeNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListHomeNetworkPoliciesResponse, error)
	// Get the Routing Policy with the Home Network.
	GetHomeNetworkPolicy(ctx context.Context, in *GetHomeNetworkPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Set the Routing Policy with the Home Network.
	SetHomeNetworkPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// List the Routing Policies that Forwarders configured for the Home Network.
	ListEffectivePolicies(ctx context.Context, in *ListEffectivePoliciesRequest, opts ...grpc.CallOption) (*ListEffectivePoliciesResponse, error)
	// List the networks and tenants that have a policy defined, either as Home Network or as Forwarder.
	ListNetworksWithPolicy(ctx context.Context, in *ListNetworksWithPolicyRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
}

type policyManagerClient struct {
	cc *grpc.ClientConn
}

func NewPolicyManagerClient(cc *grpc.ClientConn) PolicyManagerClient {
	return &policyManagerClient{cc}
}

func (c *policyManagerClient) ListDefaultPolicies(ctx context.Context, in *ListDefaultPoliciesRequest, opts ...grpc.CallOption) (*ListDefaultPoliciesResponse, error) {
	out := new(ListDefaultPoliciesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListDefaultPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetDefaultPolicy(ctx context.Context, in *GetDefaultPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/GetDefaultPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) SetDefaultPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/SetDefaultPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ListHomeNetworkPolicies(ctx context.Context, in *ListHomeNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListHomeNetworkPoliciesResponse, error) {
	out := new(ListHomeNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListHomeNetworkPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetHomeNetworkPolicy(ctx context.Context, in *GetHomeNetworkPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/GetHomeNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) SetHomeNetworkPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/SetHomeNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ListEffectivePolicies(ctx context.Context, in *ListEffectivePoliciesRequest, opts ...grpc.CallOption) (*ListEffectivePoliciesResponse, error) {
	out := new(ListEffectivePoliciesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListEffectivePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ListNetworksWithPolicy(ctx context.Context, in *ListNetworksWithPolicyRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListNetworksWithPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyManagerServer is the server API for PolicyManager service.
type PolicyManagerServer interface {
	// List the Default Routing Policies.
	ListDefaultPolicies(context.Context, *ListDefaultPoliciesRequest) (*ListDefaultPoliciesResponse, error)
	// Get the Default Routing Policy.
	GetDefaultPolicy(context.Context, *GetDefaultPolicyRequest) (*GetPolicyResponse, error)
	// Set the Default Routing Policy.
	SetDefaultPolicy(context.Context, *SetPolicyRequest) (*types.Empty, error)
	// List the Routing Policies with Home Networks.
	ListHomeNetworkPolicies(context.Context, *ListHomeNetworkPoliciesRequest) (*ListHomeNetworkPoliciesResponse, error)
	// Get the Routing Policy with the Home Network.
	GetHomeNetworkPolicy(context.Context, *GetHomeNetworkPolicyRequest) (*GetPolicyResponse, error)
	// Set the Routing Policy with the Home Network.
	SetHomeNetworkPolicy(context.Context, *SetPolicyRequest) (*types.Empty, error)
	// List the Routing Policies that Forwarders configured for the Home Network.
	ListEffectivePolicies(context.Context, *ListEffectivePoliciesRequest) (*ListEffectivePoliciesResponse, error)
	// List the networks and tenants that have a policy defined, either as Home Network or as Forwarder.
	ListNetworksWithPolicy(context.Context, *ListNetworksWithPolicyRequest) (*ListNetworksResponse, error)
}

// UnimplementedPolicyManagerServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyManagerServer struct {
}

func (*UnimplementedPolicyManagerServer) ListDefaultPolicies(ctx context.Context, req *ListDefaultPoliciesRequest) (*ListDefaultPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefaultPolicies not implemented")
}
func (*UnimplementedPolicyManagerServer) GetDefaultPolicy(ctx context.Context, req *GetDefaultPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPolicy not implemented")
}
func (*UnimplementedPolicyManagerServer) SetDefaultPolicy(ctx context.Context, req *SetPolicyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPolicy not implemented")
}
func (*UnimplementedPolicyManagerServer) ListHomeNetworkPolicies(ctx context.Context, req *ListHomeNetworkPoliciesRequest) (*ListHomeNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworkPolicies not implemented")
}
func (*UnimplementedPolicyManagerServer) GetHomeNetworkPolicy(ctx context.Context, req *GetHomeNetworkPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkPolicy not implemented")
}
func (*UnimplementedPolicyManagerServer) SetHomeNetworkPolicy(ctx context.Context, req *SetPolicyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkPolicy not implemented")
}
func (*UnimplementedPolicyManagerServer) ListEffectivePolicies(ctx context.Context, req *ListEffectivePoliciesRequest) (*ListEffectivePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEffectivePolicies not implemented")
}
func (*UnimplementedPolicyManagerServer) ListNetworksWithPolicy(ctx context.Context, req *ListNetworksWithPolicyRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworksWithPolicy not implemented")
}

func RegisterPolicyManagerServer(s *grpc.Server, srv PolicyManagerServer) {
	s.RegisterService(&_PolicyManager_serviceDesc, srv)
}

func _PolicyManager_ListDefaultPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefaultPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListDefaultPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListDefaultPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListDefaultPolicies(ctx, req.(*ListDefaultPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetDefaultPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetDefaultPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/GetDefaultPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetDefaultPolicy(ctx, req.(*GetDefaultPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_SetDefaultPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).SetDefaultPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/SetDefaultPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).SetDefaultPolicy(ctx, req.(*SetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ListHomeNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListHomeNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListHomeNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListHomeNetworkPolicies(ctx, req.(*ListHomeNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetHomeNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetHomeNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/GetHomeNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetHomeNetworkPolicy(ctx, req.(*GetHomeNetworkPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_SetHomeNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).SetHomeNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/SetHomeNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).SetHomeNetworkPolicy(ctx, req.(*SetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ListEffectivePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEffectivePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListEffectivePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListEffectivePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListEffectivePolicies(ctx, req.(*ListEffectivePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ListNetworksWithPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksWithPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListNetworksWithPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListNetworksWithPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListNetworksWithPolicy(ctx, req.(*ListNetworksWithPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.PolicyManager",
	HandlerType: (*PolicyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDefaultPolicies",
			Handler:    _PolicyManager_ListDefaultPolicies_Handler,
		},
		{
			MethodName: "GetDefaultPolicy",
			Handler:    _PolicyManager_GetDefaultPolicy_Handler,
		},
		{
			MethodName: "SetDefaultPolicy",
			Handler:    _PolicyManager_SetDefaultPolicy_Handler,
		},
		{
			MethodName: "ListHomeNetworkPolicies",
			Handler:    _PolicyManager_ListHomeNetworkPolicies_Handler,
		},
		{
			MethodName: "GetHomeNetworkPolicy",
			Handler:    _PolicyManager_GetHomeNetworkPolicy_Handler,
		},
		{
			MethodName: "SetHomeNetworkPolicy",
			Handler:    _PolicyManager_SetHomeNetworkPolicy_Handler,
		},
		{
			MethodName: "ListEffectivePolicies",
			Handler:    _PolicyManager_ListEffectivePolicies_Handler,
		},
		{
			MethodName: "ListNetworksWithPolicy",
			Handler:    _PolicyManager_ListNetworksWithPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// ForwarderDataClient is the client API for ForwarderData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForwarderDataClient interface {
	// Publish an uplink message.
	Publish(ctx context.Context, in *PublishUplinkMessageRequest, opts ...grpc.CallOption) (*PublishUplinkMessageResponse, error)
	// Subscribe to routed downlink messages.
	Subscribe(ctx context.Context, in *SubscribeForwarderRequest, opts ...grpc.CallOption) (ForwarderData_SubscribeClient, error)
	// Report the message state change of a downlink message.
	ReportDownlinkMessageDeliveryState(ctx context.Context, in *DownlinkMessageDeliveryStateChangeRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type forwarderDataClient struct {
	cc *grpc.ClientConn
}

func NewForwarderDataClient(cc *grpc.ClientConn) ForwarderDataClient {
	return &forwarderDataClient{cc}
}

func (c *forwarderDataClient) Publish(ctx context.Context, in *PublishUplinkMessageRequest, opts ...grpc.CallOption) (*PublishUplinkMessageResponse, error) {
	out := new(PublishUplinkMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.ForwarderData/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwarderDataClient) Subscribe(ctx context.Context, in *SubscribeForwarderRequest, opts ...grpc.CallOption) (ForwarderData_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ForwarderData_serviceDesc.Streams[0], "/org.packetbroker.routing.v1.ForwarderData/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwarderDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ForwarderData_SubscribeClient interface {
	Recv() (*v3.RoutedDownlinkMessage, error)
	grpc.ClientStream
}

type forwarderDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *forwarderDataSubscribeClient) Recv() (*v3.RoutedDownlinkMessage, error) {
	m := new(v3.RoutedDownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *forwarderDataClient) ReportDownlinkMessageDeliveryState(ctx context.Context, in *DownlinkMessageDeliveryStateChangeRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.ForwarderData/ReportDownlinkMessageDeliveryState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwarderDataServer is the server API for ForwarderData service.
type ForwarderDataServer interface {
	// Publish an uplink message.
	Publish(context.Context, *PublishUplinkMessageRequest) (*PublishUplinkMessageResponse, error)
	// Subscribe to routed downlink messages.
	Subscribe(*SubscribeForwarderRequest, ForwarderData_SubscribeServer) error
	// Report the message state change of a downlink message.
	ReportDownlinkMessageDeliveryState(context.Context, *DownlinkMessageDeliveryStateChangeRequest) (*types.Empty, error)
}

// UnimplementedForwarderDataServer can be embedded to have forward compatible implementations.
type UnimplementedForwarderDataServer struct {
}

func (*UnimplementedForwarderDataServer) Publish(ctx context.Context, req *PublishUplinkMessageRequest) (*PublishUplinkMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedForwarderDataServer) Subscribe(req *SubscribeForwarderRequest, srv ForwarderData_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedForwarderDataServer) ReportDownlinkMessageDeliveryState(ctx context.Context, req *DownlinkMessageDeliveryStateChangeRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDownlinkMessageDeliveryState not implemented")
}

func RegisterForwarderDataServer(s *grpc.Server, srv ForwarderDataServer) {
	s.RegisterService(&_ForwarderData_serviceDesc, srv)
}

func _ForwarderData_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishUplinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderDataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.ForwarderData/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderDataServer).Publish(ctx, req.(*PublishUplinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForwarderData_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeForwarderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForwarderDataServer).Subscribe(m, &forwarderDataSubscribeServer{stream})
}

type ForwarderData_SubscribeServer interface {
	Send(*v3.RoutedDownlinkMessage) error
	grpc.ServerStream
}

type forwarderDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *forwarderDataSubscribeServer) Send(m *v3.RoutedDownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ForwarderData_ReportDownlinkMessageDeliveryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkMessageDeliveryStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderDataServer).ReportDownlinkMessageDeliveryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.ForwarderData/ReportDownlinkMessageDeliveryState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderDataServer).ReportDownlinkMessageDeliveryState(ctx, req.(*DownlinkMessageDeliveryStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForwarderData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.ForwarderData",
	HandlerType: (*ForwarderDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ForwarderData_Publish_Handler,
		},
		{
			MethodName: "ReportDownlinkMessageDeliveryState",
			Handler:    _ForwarderData_ReportDownlinkMessageDeliveryState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ForwarderData_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// HomeNetworkDataClient is the client API for HomeNetworkData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeNetworkDataClient interface {
	// Publish a downlink message.
	Publish(ctx context.Context, in *PublishDownlinkMessageRequest, opts ...grpc.CallOption) (*PublishDownlinkMessageResponse, error)
	// Subscribe to routed uplink messages.
	Subscribe(ctx context.Context, in *SubscribeHomeNetworkRequest, opts ...grpc.CallOption) (HomeNetworkData_SubscribeClient, error)
	// Report the message state change of an uplink message.
	ReportUplinkMessageDeliveryState(ctx context.Context, in *UplinkMessageDeliveryStateChangeRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type homeNetworkDataClient struct {
	cc *grpc.ClientConn
}

func NewHomeNetworkDataClient(cc *grpc.ClientConn) HomeNetworkDataClient {
	return &homeNetworkDataClient{cc}
}

func (c *homeNetworkDataClient) Publish(ctx context.Context, in *PublishDownlinkMessageRequest, opts ...grpc.CallOption) (*PublishDownlinkMessageResponse, error) {
	out := new(PublishDownlinkMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.HomeNetworkData/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkDataClient) Subscribe(ctx context.Context, in *SubscribeHomeNetworkRequest, opts ...grpc.CallOption) (HomeNetworkData_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HomeNetworkData_serviceDesc.Streams[0], "/org.packetbroker.routing.v1.HomeNetworkData/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeNetworkDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HomeNetworkData_SubscribeClient interface {
	Recv() (*v3.RoutedUplinkMessage, error)
	grpc.ClientStream
}

type homeNetworkDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *homeNetworkDataSubscribeClient) Recv() (*v3.RoutedUplinkMessage, error) {
	m := new(v3.RoutedUplinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *homeNetworkDataClient) ReportUplinkMessageDeliveryState(ctx context.Context, in *UplinkMessageDeliveryStateChangeRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.HomeNetworkData/ReportUplinkMessageDeliveryState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomeNetworkDataServer is the server API for HomeNetworkData service.
type HomeNetworkDataServer interface {
	// Publish a downlink message.
	Publish(context.Context, *PublishDownlinkMessageRequest) (*PublishDownlinkMessageResponse, error)
	// Subscribe to routed uplink messages.
	Subscribe(*SubscribeHomeNetworkRequest, HomeNetworkData_SubscribeServer) error
	// Report the message state change of an uplink message.
	ReportUplinkMessageDeliveryState(context.Context, *UplinkMessageDeliveryStateChangeRequest) (*types.Empty, error)
}

// UnimplementedHomeNetworkDataServer can be embedded to have forward compatible implementations.
type UnimplementedHomeNetworkDataServer struct {
}

func (*UnimplementedHomeNetworkDataServer) Publish(ctx context.Context, req *PublishDownlinkMessageRequest) (*PublishDownlinkMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedHomeNetworkDataServer) Subscribe(req *SubscribeHomeNetworkRequest, srv HomeNetworkData_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedHomeNetworkDataServer) ReportUplinkMessageDeliveryState(ctx context.Context, req *UplinkMessageDeliveryStateChangeRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUplinkMessageDeliveryState not implemented")
}

func RegisterHomeNetworkDataServer(s *grpc.Server, srv HomeNetworkDataServer) {
	s.RegisterService(&_HomeNetworkData_serviceDesc, srv)
}

func _HomeNetworkData_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkDataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.HomeNetworkData/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkDataServer).Publish(ctx, req.(*PublishDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkData_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeNetworkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HomeNetworkDataServer).Subscribe(m, &homeNetworkDataSubscribeServer{stream})
}

type HomeNetworkData_SubscribeServer interface {
	Send(*v3.RoutedUplinkMessage) error
	grpc.ServerStream
}

type homeNetworkDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *homeNetworkDataSubscribeServer) Send(m *v3.RoutedUplinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _HomeNetworkData_ReportUplinkMessageDeliveryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplinkMessageDeliveryStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkDataServer).ReportUplinkMessageDeliveryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.HomeNetworkData/ReportUplinkMessageDeliveryState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkDataServer).ReportUplinkMessageDeliveryState(ctx, req.(*UplinkMessageDeliveryStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HomeNetworkData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.HomeNetworkData",
	HandlerType: (*HomeNetworkDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _HomeNetworkData_Publish_Handler,
		},
		{
			MethodName: "ReportUplinkMessageDeliveryState",
			Handler:    _HomeNetworkData_ReportUplinkMessageDeliveryState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _HomeNetworkData_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// RouterDataClient is the client API for RouterData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterDataClient interface {
	// Route an uplink message.
	RouteUplink(ctx context.Context, in *RouteUplinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
	// Route a downlink message.
	RouteDownlink(ctx context.Context, in *RouteDownlinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
}

type routerDataClient struct {
	cc *grpc.ClientConn
}

func NewRouterDataClient(cc *grpc.ClientConn) RouterDataClient {
	return &routerDataClient{cc}
}

func (c *routerDataClient) RouteUplink(ctx context.Context, in *RouteUplinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.RouterData/RouteUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerDataClient) RouteDownlink(ctx context.Context, in *RouteDownlinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.RouterData/RouteDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterDataServer is the server API for RouterData service.
type RouterDataServer interface {
	// Route an uplink message.
	RouteUplink(context.Context, *RouteUplinkMessageRequest) (*RouteMessageResponse, error)
	// Route a downlink message.
	RouteDownlink(context.Context, *RouteDownlinkMessageRequest) (*RouteMessageResponse, error)
}

// UnimplementedRouterDataServer can be embedded to have forward compatible implementations.
type UnimplementedRouterDataServer struct {
}

func (*UnimplementedRouterDataServer) RouteUplink(ctx context.Context, req *RouteUplinkMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteUplink not implemented")
}
func (*UnimplementedRouterDataServer) RouteDownlink(ctx context.Context, req *RouteDownlinkMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteDownlink not implemented")
}

func RegisterRouterDataServer(s *grpc.Server, srv RouterDataServer) {
	s.RegisterService(&_RouterData_serviceDesc, srv)
}

func _RouterData_RouteUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteUplinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterDataServer).RouteUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.RouterData/RouteUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterDataServer).RouteUplink(ctx, req.(*RouteUplinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterData_RouteDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterDataServer).RouteDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.RouterData/RouteDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterDataServer).RouteDownlink(ctx, req.(*RouteDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.RouterData",
	HandlerType: (*RouterDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouteUplink",
			Handler:    _RouterData_RouteUplink_Handler,
		},
		{
			MethodName: "RouteDownlink",
			Handler:    _RouterData_RouteDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoutesClient interface {
	// Returns the routes.
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
	// Returns the targets.
	ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error)
}

type routesClient struct {
	cc *grpc.ClientConn
}

func NewRoutesClient(cc *grpc.ClientConn) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.Routes/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error) {
	out := new(ListTargetsResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.Routes/ListTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
type RoutesServer interface {
	// Returns the routes.
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
	// Returns the targets.
	ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error)
}

// UnimplementedRoutesServer can be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (*UnimplementedRoutesServer) ListRoutes(ctx context.Context, req *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (*UnimplementedRoutesServer) ListTargets(ctx context.Context, req *ListTargetsRequest) (*ListTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargets not implemented")
}

func RegisterRoutesServer(s *grpc.Server, srv RoutesServer) {
	s.RegisterService(&_Routes_serviceDesc, srv)
}

func _Routes_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.Routes/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.Routes/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListTargets(ctx, req.(*ListTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Routes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoutes",
			Handler:    _Routes_ListRoutes_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _Routes_ListTargets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}
