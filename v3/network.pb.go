// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v3/network.proto

package packetbroker

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Network struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Name of the network.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr prefixes of the tenant.
	DevAddrBlocks []*DevAddrBlock `protobuf:"bytes,3,rep,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfo `protobuf:"bytes,4,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact *ContactInfo `protobuf:"bytes,5,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the network is publicly listed in the catalog.
	Listed bool `protobuf:"varint,6,opt,name=listed,proto3" json:"listed,omitempty"`
	// Optional target information.
	Target               *Target  `protobuf:"bytes,7,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Network) Reset()         { *m = Network{} }
func (m *Network) String() string { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()    {}
func (*Network) Descriptor() ([]byte, []int) {
	return fileDescriptor_006f086aa5ae6e31, []int{0}
}
func (m *Network) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Network.Unmarshal(m, b)
}
func (m *Network) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Network.Marshal(b, m, deterministic)
}
func (m *Network) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Network.Merge(m, src)
}
func (m *Network) XXX_Size() int {
	return xxx_messageInfo_Network.Size(m)
}
func (m *Network) XXX_DiscardUnknown() {
	xxx_messageInfo_Network.DiscardUnknown(m)
}

var xxx_messageInfo_Network proto.InternalMessageInfo

func (m *Network) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Network) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Network) GetDevAddrBlocks() []*DevAddrBlock {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *Network) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *Network) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *Network) GetListed() bool {
	if m != nil {
		return m.Listed
	}
	return false
}

func (m *Network) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type Tenant struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Name of the tenant.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// DevAddr prefixes of the tenant.
	DevAddrBlocks []*DevAddrBlock `protobuf:"bytes,5,rep,name=dev_addr_blocks,json=devAddrBlocks,proto3" json:"dev_addr_blocks,omitempty"`
	// Administrative contact.
	AdministrativeContact *ContactInfo `protobuf:"bytes,6,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	TechnicalContact *ContactInfo `protobuf:"bytes,7,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the tenant is listed in the catalog.
	Listed bool `protobuf:"varint,8,opt,name=listed,proto3" json:"listed,omitempty"`
	// Optional target information.
	Target               *Target  `protobuf:"bytes,9,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tenant) Reset()         { *m = Tenant{} }
func (m *Tenant) String() string { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()    {}
func (*Tenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_006f086aa5ae6e31, []int{1}
}
func (m *Tenant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tenant.Unmarshal(m, b)
}
func (m *Tenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tenant.Marshal(b, m, deterministic)
}
func (m *Tenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenant.Merge(m, src)
}
func (m *Tenant) XXX_Size() int {
	return xxx_messageInfo_Tenant.Size(m)
}
func (m *Tenant) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenant.DiscardUnknown(m)
}

var xxx_messageInfo_Tenant proto.InternalMessageInfo

func (m *Tenant) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Tenant) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Tenant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tenant) GetDevAddrBlocks() []*DevAddrBlock {
	if m != nil {
		return m.DevAddrBlocks
	}
	return nil
}

func (m *Tenant) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *Tenant) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *Tenant) GetListed() bool {
	if m != nil {
		return m.Listed
	}
	return false
}

func (m *Tenant) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type NetworkOrTenant struct {
	// Types that are valid to be assigned to Value:
	//	*NetworkOrTenant_Network
	//	*NetworkOrTenant_Tenant
	Value                isNetworkOrTenant_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NetworkOrTenant) Reset()         { *m = NetworkOrTenant{} }
func (m *NetworkOrTenant) String() string { return proto.CompactTextString(m) }
func (*NetworkOrTenant) ProtoMessage()    {}
func (*NetworkOrTenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_006f086aa5ae6e31, []int{2}
}
func (m *NetworkOrTenant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkOrTenant.Unmarshal(m, b)
}
func (m *NetworkOrTenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkOrTenant.Marshal(b, m, deterministic)
}
func (m *NetworkOrTenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkOrTenant.Merge(m, src)
}
func (m *NetworkOrTenant) XXX_Size() int {
	return xxx_messageInfo_NetworkOrTenant.Size(m)
}
func (m *NetworkOrTenant) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkOrTenant.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkOrTenant proto.InternalMessageInfo

type isNetworkOrTenant_Value interface {
	isNetworkOrTenant_Value()
}

type NetworkOrTenant_Network struct {
	Network *Network `protobuf:"bytes,1,opt,name=network,proto3,oneof" json:"network,omitempty"`
}
type NetworkOrTenant_Tenant struct {
	Tenant *Tenant `protobuf:"bytes,2,opt,name=tenant,proto3,oneof" json:"tenant,omitempty"`
}

func (*NetworkOrTenant_Network) isNetworkOrTenant_Value() {}
func (*NetworkOrTenant_Tenant) isNetworkOrTenant_Value()  {}

func (m *NetworkOrTenant) GetValue() isNetworkOrTenant_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *NetworkOrTenant) GetNetwork() *Network {
	if x, ok := m.GetValue().(*NetworkOrTenant_Network); ok {
		return x.Network
	}
	return nil
}

func (m *NetworkOrTenant) GetTenant() *Tenant {
	if x, ok := m.GetValue().(*NetworkOrTenant_Tenant); ok {
		return x.Tenant
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*NetworkOrTenant) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*NetworkOrTenant_Network)(nil),
		(*NetworkOrTenant_Tenant)(nil),
	}
}

type DevAddrPrefix struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Significant bits of value.
	Length               uint32   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevAddrPrefix) Reset()         { *m = DevAddrPrefix{} }
func (m *DevAddrPrefix) String() string { return proto.CompactTextString(m) }
func (*DevAddrPrefix) ProtoMessage()    {}
func (*DevAddrPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_006f086aa5ae6e31, []int{3}
}
func (m *DevAddrPrefix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevAddrPrefix.Unmarshal(m, b)
}
func (m *DevAddrPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevAddrPrefix.Marshal(b, m, deterministic)
}
func (m *DevAddrPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrPrefix.Merge(m, src)
}
func (m *DevAddrPrefix) XXX_Size() int {
	return xxx_messageInfo_DevAddrPrefix.Size(m)
}
func (m *DevAddrPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrPrefix proto.InternalMessageInfo

func (m *DevAddrPrefix) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DevAddrPrefix) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type DevAddrBlock struct {
	Prefix *DevAddrPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Cluster of the Home Network Member (optional).
	HomeNetworkClusterId string   `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevAddrBlock) Reset()         { *m = DevAddrBlock{} }
func (m *DevAddrBlock) String() string { return proto.CompactTextString(m) }
func (*DevAddrBlock) ProtoMessage()    {}
func (*DevAddrBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_006f086aa5ae6e31, []int{4}
}
func (m *DevAddrBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevAddrBlock.Unmarshal(m, b)
}
func (m *DevAddrBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevAddrBlock.Marshal(b, m, deterministic)
}
func (m *DevAddrBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevAddrBlock.Merge(m, src)
}
func (m *DevAddrBlock) XXX_Size() int {
	return xxx_messageInfo_DevAddrBlock.Size(m)
}
func (m *DevAddrBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DevAddrBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DevAddrBlock proto.InternalMessageInfo

func (m *DevAddrBlock) GetPrefix() *DevAddrPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *DevAddrBlock) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

type NetworkAPIKey struct {
	// Unique identifier of the API key.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member.
	ClusterId string `protobuf:"bytes,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Network rights.
	Rights []Right `protobuf:"varint,7,rep,packed,name=rights,proto3,enum=org.packetbroker.v3.Right" json:"rights,omitempty"`
	// Last authentication timestamp.
	AuthenticatedAt *types.Timestamp `protobuf:"bytes,5,opt,name=authenticated_at,json=authenticatedAt,proto3" json:"authenticated_at,omitempty"`
	// Secret key value.
	Key string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	// Key state.
	State                APIKeyState `protobuf:"varint,8,opt,name=state,proto3,enum=org.packetbroker.v3.APIKeyState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *NetworkAPIKey) Reset()         { *m = NetworkAPIKey{} }
func (m *NetworkAPIKey) String() string { return proto.CompactTextString(m) }
func (*NetworkAPIKey) ProtoMessage()    {}
func (*NetworkAPIKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_006f086aa5ae6e31, []int{5}
}
func (m *NetworkAPIKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkAPIKey.Unmarshal(m, b)
}
func (m *NetworkAPIKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkAPIKey.Marshal(b, m, deterministic)
}
func (m *NetworkAPIKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkAPIKey.Merge(m, src)
}
func (m *NetworkAPIKey) XXX_Size() int {
	return xxx_messageInfo_NetworkAPIKey.Size(m)
}
func (m *NetworkAPIKey) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkAPIKey.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkAPIKey proto.InternalMessageInfo

func (m *NetworkAPIKey) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *NetworkAPIKey) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *NetworkAPIKey) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *NetworkAPIKey) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *NetworkAPIKey) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func (m *NetworkAPIKey) GetAuthenticatedAt() *types.Timestamp {
	if m != nil {
		return m.AuthenticatedAt
	}
	return nil
}

func (m *NetworkAPIKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NetworkAPIKey) GetState() APIKeyState {
	if m != nil {
		return m.State
	}
	return APIKeyState_REQUESTED
}

type NetworkTarget struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Tenant ID assigned by the Member (optional).
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Target information.
	Target               *Target  `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkTarget) Reset()         { *m = NetworkTarget{} }
func (m *NetworkTarget) String() string { return proto.CompactTextString(m) }
func (*NetworkTarget) ProtoMessage()    {}
func (*NetworkTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_006f086aa5ae6e31, []int{6}
}
func (m *NetworkTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkTarget.Unmarshal(m, b)
}
func (m *NetworkTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkTarget.Marshal(b, m, deterministic)
}
func (m *NetworkTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTarget.Merge(m, src)
}
func (m *NetworkTarget) XXX_Size() int {
	return xxx_messageInfo_NetworkTarget.Size(m)
}
func (m *NetworkTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTarget.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTarget proto.InternalMessageInfo

func (m *NetworkTarget) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *NetworkTarget) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *NetworkTarget) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func init() {
	proto.RegisterType((*Network)(nil), "org.packetbroker.v3.Network")
	proto.RegisterType((*Tenant)(nil), "org.packetbroker.v3.Tenant")
	proto.RegisterType((*NetworkOrTenant)(nil), "org.packetbroker.v3.NetworkOrTenant")
	proto.RegisterType((*DevAddrPrefix)(nil), "org.packetbroker.v3.DevAddrPrefix")
	proto.RegisterType((*DevAddrBlock)(nil), "org.packetbroker.v3.DevAddrBlock")
	proto.RegisterType((*NetworkAPIKey)(nil), "org.packetbroker.v3.NetworkAPIKey")
	proto.RegisterType((*NetworkTarget)(nil), "org.packetbroker.v3.NetworkTarget")
}

func init() { proto.RegisterFile("packetbroker/api/v3/network.proto", fileDescriptor_006f086aa5ae6e31) }

var fileDescriptor_006f086aa5ae6e31 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xc1, 0x6f, 0xd3, 0x3e,
	0x14, 0xc7, 0x97, 0xa6, 0x4d, 0x5b, 0xef, 0xd7, 0xad, 0x3f, 0xb3, 0x8d, 0xa8, 0x03, 0x2d, 0xcb,
	0x85, 0x72, 0x49, 0xa5, 0x56, 0x43, 0x08, 0xc4, 0x61, 0x1b, 0x48, 0x2b, 0x08, 0x98, 0xcc, 0x24,
	0x24, 0x2e, 0x91, 0x9b, 0xbc, 0xa5, 0x51, 0xda, 0xa4, 0x72, 0xdc, 0xb2, 0x1e, 0x39, 0x73, 0xe7,
	0xcf, 0xe1, 0xaf, 0xe2, 0x0f, 0x40, 0xb1, 0x9d, 0x2d, 0x43, 0xe9, 0x54, 0xa1, 0x71, 0x8b, 0xed,
	0xcf, 0xfb, 0xda, 0x7e, 0xdf, 0xf7, 0x1c, 0x74, 0x38, 0xa3, 0x5e, 0x04, 0x7c, 0xc4, 0x92, 0x08,
	0x58, 0x8f, 0xce, 0xc2, 0xde, 0x62, 0xd0, 0x8b, 0x81, 0x7f, 0x4d, 0x58, 0xe4, 0xcc, 0x58, 0xc2,
	0x13, 0xfc, 0x20, 0x61, 0x81, 0x53, 0xc4, 0x9c, 0xc5, 0xa0, 0x73, 0x10, 0x24, 0x49, 0x30, 0x81,
	0x9e, 0x40, 0x46, 0xf3, 0xcb, 0x1e, 0x0f, 0xa7, 0x90, 0x72, 0x3a, 0x9d, 0xc9, 0xa8, 0x4e, 0xa9,
	0xb0, 0x97, 0xc4, 0x9c, 0x7a, 0x5c, 0x21, 0x07, 0x65, 0x08, 0xc4, 0xf3, 0x69, 0xaa, 0x00, 0xab,
	0x0c, 0xe0, 0x94, 0x05, 0xa0, 0x24, 0xec, 0x5f, 0x15, 0x54, 0xff, 0x20, 0x4f, 0x8b, 0x77, 0x91,
	0x11, 0x03, 0x77, 0x43, 0xdf, 0xd4, 0x2c, 0xad, 0xdb, 0x22, 0xb5, 0x18, 0xf8, 0xd0, 0xc7, 0x18,
	0x55, 0x63, 0x3a, 0x05, 0xb3, 0x62, 0x69, 0xdd, 0x26, 0x11, 0xdf, 0x78, 0x88, 0xb6, 0x7d, 0x58,
	0xb8, 0xd4, 0xf7, 0x99, 0x3b, 0x9a, 0x24, 0x5e, 0x94, 0x9a, 0xba, 0xa5, 0x77, 0x37, 0xfb, 0x87,
	0x4e, 0xc9, 0x65, 0x9d, 0xd7, 0xb0, 0x38, 0xf6, 0x7d, 0x76, 0x92, 0x91, 0xa4, 0xe5, 0x17, 0x46,
	0x29, 0xfe, 0x8c, 0xf6, 0xa8, 0x3f, 0x0d, 0xe3, 0x30, 0xe5, 0x8c, 0xf2, 0x70, 0x01, 0xae, 0xba,
	0xa4, 0x59, 0xb5, 0xb4, 0xee, 0x66, 0xdf, 0x2a, 0x55, 0x3c, 0x95, 0xcc, 0x30, 0xbe, 0x4c, 0xc8,
	0xee, 0xed, 0x78, 0xb5, 0x84, 0xdf, 0xa3, 0xff, 0x39, 0x78, 0xe3, 0x38, 0xf4, 0xe8, 0xe4, 0x5a,
	0xb3, 0xb6, 0xa6, 0x66, 0xfb, 0x3a, 0x34, 0x97, 0xdb, 0x43, 0xc6, 0x24, 0x4c, 0x39, 0xf8, 0xa6,
	0x61, 0x69, 0xdd, 0x06, 0x51, 0x23, 0x3c, 0x40, 0x86, 0xcc, 0xa8, 0x59, 0x17, 0xda, 0xfb, 0xa5,
	0xda, 0x17, 0x02, 0x21, 0x0a, 0xb5, 0x7f, 0xe8, 0xc8, 0xb8, 0x80, 0x98, 0xc6, 0x7c, 0x55, 0xd6,
	0xf7, 0x51, 0x93, 0x0b, 0x20, 0x5b, 0x91, 0xa9, 0x6f, 0xc8, 0x89, 0x82, 0x25, 0xd5, 0xbb, 0x2d,
	0xa9, 0xdd, 0xbb, 0x25, 0xc6, 0x3f, 0xb0, 0xa4, 0x7e, 0x0f, 0x96, 0x34, 0x56, 0x58, 0xd2, 0x5c,
	0xdb, 0x92, 0xb7, 0xd5, 0x86, 0xde, 0xae, 0xda, 0xdf, 0x35, 0xb4, 0xad, 0xfa, 0xe1, 0x23, 0x53,
	0x0e, 0x3d, 0x47, 0x75, 0xd5, 0xd0, 0xc2, 0xa2, 0xcd, 0xfe, 0xa3, 0x52, 0x3d, 0x15, 0x76, 0xb6,
	0x41, 0x72, 0x1c, 0x1f, 0x21, 0x43, 0x7a, 0x26, 0x1c, 0x5c, 0x79, 0x10, 0x81, 0x9c, 0x6d, 0x10,
	0x05, 0x9f, 0xd4, 0x51, 0x6d, 0x41, 0x27, 0x73, 0xb0, 0x5f, 0xa1, 0x96, 0xf2, 0xe9, 0x9c, 0xc1,
	0x65, 0x78, 0x85, 0x77, 0xd4, 0x4a, 0x5e, 0x2b, 0x62, 0x20, 0xf2, 0x00, 0x71, 0xc0, 0xc7, 0x62,
	0x9b, 0x16, 0x51, 0x23, 0xfb, 0x9b, 0x86, 0xfe, 0x2b, 0xfa, 0x8c, 0x5f, 0x20, 0x63, 0x26, 0x84,
	0xd4, 0x45, 0xec, 0xbb, 0x4a, 0x43, 0x6e, 0x49, 0x54, 0x04, 0x3e, 0x42, 0x0f, 0xc7, 0xc9, 0x14,
	0x5c, 0x75, 0x37, 0xd7, 0x9b, 0xcc, 0x53, 0x0e, 0xec, 0xa6, 0x3c, 0x77, 0xb2, 0x65, 0x95, 0x84,
	0x53, 0xb9, 0x38, 0xf4, 0xed, 0x9f, 0x15, 0xd4, 0x52, 0x93, 0xc7, 0xe7, 0xc3, 0x77, 0xb0, 0xcc,
	0x0a, 0x3e, 0x82, 0x65, 0x5e, 0xf0, 0x4d, 0x52, 0x8b, 0x60, 0x39, 0xf4, 0x0b, 0x7d, 0x50, 0x59,
	0xd9, 0x07, 0xfa, 0x1f, 0x7d, 0xf0, 0x18, 0xa1, 0xc2, 0x31, 0x64, 0x37, 0x34, 0xbd, 0x7c, 0x6f,
	0xdc, 0x47, 0x06, 0x0b, 0x83, 0x31, 0x4f, 0xcd, 0xba, 0xa5, 0x77, 0xb7, 0xfa, 0x9d, 0xd2, 0xeb,
	0x92, 0x0c, 0x21, 0x8a, 0xc4, 0x6f, 0x50, 0x9b, 0xce, 0xf9, 0x18, 0x62, 0x1e, 0x7a, 0x94, 0x83,
	0xef, 0xd2, 0xfc, 0xd1, 0xe8, 0x38, 0xf2, 0xc9, 0x76, 0xf2, 0x27, 0xdb, 0xb9, 0xc8, 0x9f, 0x6c,
	0xb2, 0x7d, 0x2b, 0xe6, 0x98, 0xe3, 0x36, 0xd2, 0x23, 0x58, 0x8a, 0x7e, 0x69, 0x92, 0xec, 0x13,
	0x3f, 0x43, 0xb5, 0x94, 0x53, 0x0e, 0xa2, 0x56, 0xb7, 0x56, 0xd4, 0xbb, 0x4c, 0xd1, 0xa7, 0x8c,
	0x23, 0x12, 0xb7, 0xaf, 0xae, 0xf3, 0x27, 0x0b, 0xf6, 0xaf, 0x1e, 0x8c, 0x9b, 0x8e, 0xd0, 0xd7,
	0xee, 0x88, 0x93, 0xa7, 0x5f, 0x9e, 0x04, 0xc9, 0x6d, 0x28, 0x61, 0x81, 0xfa, 0x8d, 0xbc, 0x2c,
	0xce, 0x8f, 0x0c, 0x91, 0x93, 0xc1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xb1, 0x0c, 0x2c,
	0x0e, 0x07, 0x00, 0x00,
}
