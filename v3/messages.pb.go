// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: packetbroker/api/v3/messages.proto

package packetbroker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Teaser of PHYPayload.
type PHYPayloadTeaser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SHA-256 hash of PHYPayload.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Length of PHYPayload.
	Length uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	// Types that are assignable to Payload:
	//	*PHYPayloadTeaser_JoinRequest
	//	*PHYPayloadTeaser_Mac
	Payload isPHYPayloadTeaser_Payload `protobuf_oneof:"payload"`
}

func (x *PHYPayloadTeaser) Reset() {
	*x = PHYPayloadTeaser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PHYPayloadTeaser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PHYPayloadTeaser) ProtoMessage() {}

func (x *PHYPayloadTeaser) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PHYPayloadTeaser.ProtoReflect.Descriptor instead.
func (*PHYPayloadTeaser) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{0}
}

func (x *PHYPayloadTeaser) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *PHYPayloadTeaser) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (m *PHYPayloadTeaser) GetPayload() isPHYPayloadTeaser_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PHYPayloadTeaser) GetJoinRequest() *PHYPayloadTeaser_JoinRequestTeaser {
	if x, ok := x.GetPayload().(*PHYPayloadTeaser_JoinRequest); ok {
		return x.JoinRequest
	}
	return nil
}

func (x *PHYPayloadTeaser) GetMac() *PHYPayloadTeaser_MACPayloadTeaser {
	if x, ok := x.GetPayload().(*PHYPayloadTeaser_Mac); ok {
		return x.Mac
	}
	return nil
}

type isPHYPayloadTeaser_Payload interface {
	isPHYPayloadTeaser_Payload()
}

type PHYPayloadTeaser_JoinRequest struct {
	// Teaser of a join-request.
	JoinRequest *PHYPayloadTeaser_JoinRequestTeaser `protobuf:"bytes,2,opt,name=join_request,json=joinRequest,proto3,oneof"`
}

type PHYPayloadTeaser_Mac struct {
	// Teaser of MACPayload.
	Mac *PHYPayloadTeaser_MACPayloadTeaser `protobuf:"bytes,3,opt,name=mac,proto3,oneof"`
}

func (*PHYPayloadTeaser_JoinRequest) isPHYPayloadTeaser_Payload() {}

func (*PHYPayloadTeaser_Mac) isPHYPayloadTeaser_Payload() {}

// Teaser of gateway metadata.
type GatewayMetadataTeaser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*GatewayMetadataTeaser_Terrestrial_
	//	*GatewayMetadataTeaser_Satellite_
	Value isGatewayMetadataTeaser_Value `protobuf_oneof:"value"`
}

func (x *GatewayMetadataTeaser) Reset() {
	*x = GatewayMetadataTeaser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataTeaser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataTeaser) ProtoMessage() {}

func (x *GatewayMetadataTeaser) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataTeaser.ProtoReflect.Descriptor instead.
func (*GatewayMetadataTeaser) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{1}
}

func (m *GatewayMetadataTeaser) GetValue() isGatewayMetadataTeaser_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GatewayMetadataTeaser) GetTerrestrial() *GatewayMetadataTeaser_Terrestrial {
	if x, ok := x.GetValue().(*GatewayMetadataTeaser_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (x *GatewayMetadataTeaser) GetSatellite() *GatewayMetadataTeaser_Satellite {
	if x, ok := x.GetValue().(*GatewayMetadataTeaser_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

type isGatewayMetadataTeaser_Value interface {
	isGatewayMetadataTeaser_Value()
}

type GatewayMetadataTeaser_Terrestrial_ struct {
	Terrestrial *GatewayMetadataTeaser_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof"`
}

type GatewayMetadataTeaser_Satellite_ struct {
	Satellite *GatewayMetadataTeaser_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof"`
}

func (*GatewayMetadataTeaser_Terrestrial_) isGatewayMetadataTeaser_Value() {}

func (*GatewayMetadataTeaser_Satellite_) isGatewayMetadataTeaser_Value() {}

// Terrestrial gateway antenna signal quality.
type TerrestrialGatewayAntennaSignalQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Received signal strength indicator of the channel (dBm).
	ChannelRssi float32 `protobuf:"fixed32,1,opt,name=channel_rssi,json=channelRssi,proto3" json:"channel_rssi,omitempty"`
	// Received signal strength indicator of the signal (dBm).
	SignalRssi *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=signal_rssi,json=signalRssi,proto3" json:"signal_rssi,omitempty"`
	// Standard deviation of the RSSI during preamble.
	RssiStandardDeviation *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=rssi_standard_deviation,json=rssiStandardDeviation,proto3" json:"rssi_standard_deviation,omitempty"`
	// Signal-to-noise ratio (dB).
	Snr float32 `protobuf:"fixed32,4,opt,name=snr,proto3" json:"snr,omitempty"`
	// Frequency offset (Hz).
	FrequencyOffset int64 `protobuf:"varint,5,opt,name=frequency_offset,json=frequencyOffset,proto3" json:"frequency_offset,omitempty"`
}

func (x *TerrestrialGatewayAntennaSignalQuality) Reset() {
	*x = TerrestrialGatewayAntennaSignalQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerrestrialGatewayAntennaSignalQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerrestrialGatewayAntennaSignalQuality) ProtoMessage() {}

func (x *TerrestrialGatewayAntennaSignalQuality) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerrestrialGatewayAntennaSignalQuality.ProtoReflect.Descriptor instead.
func (*TerrestrialGatewayAntennaSignalQuality) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{2}
}

func (x *TerrestrialGatewayAntennaSignalQuality) GetChannelRssi() float32 {
	if x != nil {
		return x.ChannelRssi
	}
	return 0
}

func (x *TerrestrialGatewayAntennaSignalQuality) GetSignalRssi() *wrapperspb.FloatValue {
	if x != nil {
		return x.SignalRssi
	}
	return nil
}

func (x *TerrestrialGatewayAntennaSignalQuality) GetRssiStandardDeviation() *wrapperspb.FloatValue {
	if x != nil {
		return x.RssiStandardDeviation
	}
	return nil
}

func (x *TerrestrialGatewayAntennaSignalQuality) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *TerrestrialGatewayAntennaSignalQuality) GetFrequencyOffset() int64 {
	if x != nil {
		return x.FrequencyOffset
	}
	return 0
}

// Gateway metadata signal quality.
type GatewayMetadataSignalQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*GatewayMetadataSignalQuality_Terrestrial_
	//	*GatewayMetadataSignalQuality_Satellite_
	Value isGatewayMetadataSignalQuality_Value `protobuf_oneof:"value"`
}

func (x *GatewayMetadataSignalQuality) Reset() {
	*x = GatewayMetadataSignalQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataSignalQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataSignalQuality) ProtoMessage() {}

func (x *GatewayMetadataSignalQuality) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataSignalQuality.ProtoReflect.Descriptor instead.
func (*GatewayMetadataSignalQuality) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{3}
}

func (m *GatewayMetadataSignalQuality) GetValue() isGatewayMetadataSignalQuality_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GatewayMetadataSignalQuality) GetTerrestrial() *GatewayMetadataSignalQuality_Terrestrial {
	if x, ok := x.GetValue().(*GatewayMetadataSignalQuality_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (x *GatewayMetadataSignalQuality) GetSatellite() *GatewayMetadataSignalQuality_Satellite {
	if x, ok := x.GetValue().(*GatewayMetadataSignalQuality_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

type isGatewayMetadataSignalQuality_Value interface {
	isGatewayMetadataSignalQuality_Value()
}

type GatewayMetadataSignalQuality_Terrestrial_ struct {
	Terrestrial *GatewayMetadataSignalQuality_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof"`
}

type GatewayMetadataSignalQuality_Satellite_ struct {
	Satellite *GatewayMetadataSignalQuality_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof"`
}

func (*GatewayMetadataSignalQuality_Terrestrial_) isGatewayMetadataSignalQuality_Value() {}

func (*GatewayMetadataSignalQuality_Satellite_) isGatewayMetadataSignalQuality_Value() {}

// Gateway metadata for localization.
type GatewayMetadataLocalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*GatewayMetadataLocalization_Terrestrial_
	//	*GatewayMetadataLocalization_Satellite_
	Value isGatewayMetadataLocalization_Value `protobuf_oneof:"value"`
}

func (x *GatewayMetadataLocalization) Reset() {
	*x = GatewayMetadataLocalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataLocalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataLocalization) ProtoMessage() {}

func (x *GatewayMetadataLocalization) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataLocalization.ProtoReflect.Descriptor instead.
func (*GatewayMetadataLocalization) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{4}
}

func (m *GatewayMetadataLocalization) GetValue() isGatewayMetadataLocalization_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GatewayMetadataLocalization) GetTerrestrial() *GatewayMetadataLocalization_Terrestrial {
	if x, ok := x.GetValue().(*GatewayMetadataLocalization_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (x *GatewayMetadataLocalization) GetSatellite() *GatewayMetadataLocalization_Satellite {
	if x, ok := x.GetValue().(*GatewayMetadataLocalization_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

type isGatewayMetadataLocalization_Value interface {
	isGatewayMetadataLocalization_Value()
}

type GatewayMetadataLocalization_Terrestrial_ struct {
	Terrestrial *GatewayMetadataLocalization_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof"`
}

type GatewayMetadataLocalization_Satellite_ struct {
	Satellite *GatewayMetadataLocalization_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof"`
}

func (*GatewayMetadataLocalization_Terrestrial_) isGatewayMetadataLocalization_Value() {}

func (*GatewayMetadataLocalization_Satellite_) isGatewayMetadataLocalization_Value() {}

type LoRaDataRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpreadingFactor uint32 `protobuf:"varint,1,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// Bandwidth (Hz).
	Bandwidth uint32 `protobuf:"varint,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *LoRaDataRate) Reset() {
	*x = LoRaDataRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaDataRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaDataRate) ProtoMessage() {}

func (x *LoRaDataRate) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaDataRate.ProtoReflect.Descriptor instead.
func (*LoRaDataRate) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{5}
}

func (x *LoRaDataRate) GetSpreadingFactor() uint32 {
	if x != nil {
		return x.SpreadingFactor
	}
	return 0
}

func (x *LoRaDataRate) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type FSKDataRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BitsPerSecond uint32 `protobuf:"varint,1,opt,name=bits_per_second,json=bitsPerSecond,proto3" json:"bits_per_second,omitempty"`
}

func (x *FSKDataRate) Reset() {
	*x = FSKDataRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FSKDataRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FSKDataRate) ProtoMessage() {}

func (x *FSKDataRate) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FSKDataRate.ProtoReflect.Descriptor instead.
func (*FSKDataRate) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{6}
}

func (x *FSKDataRate) GetBitsPerSecond() uint32 {
	if x != nil {
		return x.BitsPerSecond
	}
	return 0
}

type LRFHSSDataRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModulationType uint32 `protobuf:"varint,1,opt,name=modulation_type,json=modulationType,proto3" json:"modulation_type,omitempty"`
	// Operating channel width (Hz).
	OperatingChannelWidth uint32 `protobuf:"varint,2,opt,name=operating_channel_width,json=operatingChannelWidth,proto3" json:"operating_channel_width,omitempty"`
}

func (x *LRFHSSDataRate) Reset() {
	*x = LRFHSSDataRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LRFHSSDataRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LRFHSSDataRate) ProtoMessage() {}

func (x *LRFHSSDataRate) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LRFHSSDataRate.ProtoReflect.Descriptor instead.
func (*LRFHSSDataRate) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{7}
}

func (x *LRFHSSDataRate) GetModulationType() uint32 {
	if x != nil {
		return x.ModulationType
	}
	return 0
}

func (x *LRFHSSDataRate) GetOperatingChannelWidth() uint32 {
	if x != nil {
		return x.OperatingChannelWidth
	}
	return 0
}

type DataRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Modulation:
	//	*DataRate_Lora
	//	*DataRate_Fsk
	//	*DataRate_Lrfhss
	Modulation isDataRate_Modulation `protobuf_oneof:"modulation"`
}

func (x *DataRate) Reset() {
	*x = DataRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRate) ProtoMessage() {}

func (x *DataRate) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRate.ProtoReflect.Descriptor instead.
func (*DataRate) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{8}
}

func (m *DataRate) GetModulation() isDataRate_Modulation {
	if m != nil {
		return m.Modulation
	}
	return nil
}

func (x *DataRate) GetLora() *LoRaDataRate {
	if x, ok := x.GetModulation().(*DataRate_Lora); ok {
		return x.Lora
	}
	return nil
}

func (x *DataRate) GetFsk() *FSKDataRate {
	if x, ok := x.GetModulation().(*DataRate_Fsk); ok {
		return x.Fsk
	}
	return nil
}

func (x *DataRate) GetLrfhss() *LRFHSSDataRate {
	if x, ok := x.GetModulation().(*DataRate_Lrfhss); ok {
		return x.Lrfhss
	}
	return nil
}

type isDataRate_Modulation interface {
	isDataRate_Modulation()
}

type DataRate_Lora struct {
	Lora *LoRaDataRate `protobuf:"bytes,1,opt,name=lora,proto3,oneof"`
}

type DataRate_Fsk struct {
	Fsk *FSKDataRate `protobuf:"bytes,2,opt,name=fsk,proto3,oneof"`
}

type DataRate_Lrfhss struct {
	Lrfhss *LRFHSSDataRate `protobuf:"bytes,3,opt,name=lrfhss,proto3,oneof"`
}

func (*DataRate_Lora) isDataRate_Modulation() {}

func (*DataRate_Fsk) isDataRate_Modulation() {}

func (*DataRate_Lrfhss) isDataRate_Modulation() {}

// LoRaWAN uplink data message with encrypted PHYPayload and metadata.
type UplinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key encryption keys with which data encryption keys are encrypted.
	Keks map[string]*KeyPointer `protobuf:"bytes,1,rep,name=keks,proto3" json:"keks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Identifier of the gateway.
	GatewayId *GatewayIdentifier `protobuf:"bytes,12,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// LoRaWAN PHYPayload.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has mac_data or application_data set,
	// and if the PHYPayload passes the Routing Filter.
	PhyPayload *UplinkMessage_PHYPayload `protobuf:"bytes,2,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// Timestamp of the packet arrival observed by the Forwarder.
	ForwarderReceiveTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=forwarder_receive_time,json=forwarderReceiveTime,proto3" json:"forwarder_receive_time,omitempty"`
	// Timestamp of the packet arrival observed by the gateway.
	GatewayReceiveTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=gateway_receive_time,json=gatewayReceiveTime,proto3" json:"gateway_receive_time,omitempty"`
	// Region of the gateway.
	GatewayRegion Region    `protobuf:"varint,5,opt,name=gateway_region,json=gatewayRegion,proto3,enum=org.packetbroker.v3.Region" json:"gateway_region,omitempty"`
	DataRate      *DataRate `protobuf:"bytes,13,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// Data rate index as defined in the gateway's LoRaWAN region.
	// DEPRECATED: Set data_rate instead.
	DataRateIndex uint32 `protobuf:"varint,6,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,7,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Coding rate.
	CodingRate string `protobuf:"bytes,11,opt,name=coding_rate,json=codingRate,proto3" json:"coding_rate,omitempty"`
	// Gateway metadata.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has localization or signal_quality set,
	// and if the message passes the Routing Filter.
	GatewayMetadata *UplinkMessage_GatewayMetadata `protobuf:"bytes,8,opt,name=gateway_metadata,json=gatewayMetadata,proto3" json:"gateway_metadata,omitempty"`
	// Forwarder uplink token (optional).
	ForwarderUplinkToken []byte `protobuf:"bytes,9,opt,name=forwarder_uplink_token,json=forwarderUplinkToken,proto3" json:"forwarder_uplink_token,omitempty"`
	// Gateway uplink token (optional).
	GatewayUplinkToken []byte `protobuf:"bytes,10,opt,name=gateway_uplink_token,json=gatewayUplinkToken,proto3" json:"gateway_uplink_token,omitempty"`
}

func (x *UplinkMessage) Reset() {
	*x = UplinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage) ProtoMessage() {}

func (x *UplinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage.ProtoReflect.Descriptor instead.
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{9}
}

func (x *UplinkMessage) GetKeks() map[string]*KeyPointer {
	if x != nil {
		return x.Keks
	}
	return nil
}

func (x *UplinkMessage) GetGatewayId() *GatewayIdentifier {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *UplinkMessage) GetPhyPayload() *UplinkMessage_PHYPayload {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *UplinkMessage) GetForwarderReceiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ForwarderReceiveTime
	}
	return nil
}

func (x *UplinkMessage) GetGatewayReceiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GatewayReceiveTime
	}
	return nil
}

func (x *UplinkMessage) GetGatewayRegion() Region {
	if x != nil {
		return x.GatewayRegion
	}
	return Region_UNKNOWN_REGION
}

func (x *UplinkMessage) GetDataRate() *DataRate {
	if x != nil {
		return x.DataRate
	}
	return nil
}

func (x *UplinkMessage) GetDataRateIndex() uint32 {
	if x != nil {
		return x.DataRateIndex
	}
	return 0
}

func (x *UplinkMessage) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *UplinkMessage) GetCodingRate() string {
	if x != nil {
		return x.CodingRate
	}
	return ""
}

func (x *UplinkMessage) GetGatewayMetadata() *UplinkMessage_GatewayMetadata {
	if x != nil {
		return x.GatewayMetadata
	}
	return nil
}

func (x *UplinkMessage) GetForwarderUplinkToken() []byte {
	if x != nil {
		return x.ForwarderUplinkToken
	}
	return nil
}

func (x *UplinkMessage) GetGatewayUplinkToken() []byte {
	if x != nil {
		return x.GatewayUplinkToken
	}
	return nil
}

// LoRaWAN downlink data message.
type DownlinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRaWAN region.
	Region Region `protobuf:"varint,10,opt,name=region,proto3,enum=org.packetbroker.v3.Region" json:"region,omitempty"`
	// LoRaWAN Regional Parameters version to which the data rate indices apply.
	RegionalParametersVersion *RegionalParametersVersionValue `protobuf:"bytes,11,opt,name=regional_parameters_version,json=regionalParametersVersion,proto3" json:"regional_parameters_version,omitempty"`
	// PHYPayload of the downlink message.
	PhyPayload []byte `protobuf:"bytes,1,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// RX1 settings.
	Rx1 *DownlinkMessage_RXSettings `protobuf:"bytes,2,opt,name=rx1,proto3" json:"rx1,omitempty"`
	// RX2 settings.
	Rx2 *DownlinkMessage_RXSettings `protobuf:"bytes,3,opt,name=rx2,proto3" json:"rx2,omitempty"`
	// RX1 delay.
	Rx1Delay *durationpb.Duration `protobuf:"bytes,4,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
	// Downlink message class.
	Class DownlinkMessageClass `protobuf:"varint,5,opt,name=class,proto3,enum=org.packetbroker.v3.DownlinkMessageClass" json:"class,omitempty"`
	// Forwarder uplink token, copied from UplinkMessage.
	ForwarderUplinkToken []byte `protobuf:"bytes,6,opt,name=forwarder_uplink_token,json=forwarderUplinkToken,proto3" json:"forwarder_uplink_token,omitempty"`
	// Gateway uplink token, copied from UplinkMessage.
	GatewayUplinkToken []byte `protobuf:"bytes,7,opt,name=gateway_uplink_token,json=gatewayUplinkToken,proto3" json:"gateway_uplink_token,omitempty"`
	// Downlink token.
	DownlinkToken []byte `protobuf:"bytes,9,opt,name=downlink_token,json=downlinkToken,proto3" json:"downlink_token,omitempty"`
	// Priority of the downlink message.
	Priority DownlinkMessagePriority `protobuf:"varint,8,opt,name=priority,proto3,enum=org.packetbroker.v3.DownlinkMessagePriority" json:"priority,omitempty"`
}

func (x *DownlinkMessage) Reset() {
	*x = DownlinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessage) ProtoMessage() {}

func (x *DownlinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessage.ProtoReflect.Descriptor instead.
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{10}
}

func (x *DownlinkMessage) GetRegion() Region {
	if x != nil {
		return x.Region
	}
	return Region_UNKNOWN_REGION
}

func (x *DownlinkMessage) GetRegionalParametersVersion() *RegionalParametersVersionValue {
	if x != nil {
		return x.RegionalParametersVersion
	}
	return nil
}

func (x *DownlinkMessage) GetPhyPayload() []byte {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *DownlinkMessage) GetRx1() *DownlinkMessage_RXSettings {
	if x != nil {
		return x.Rx1
	}
	return nil
}

func (x *DownlinkMessage) GetRx2() *DownlinkMessage_RXSettings {
	if x != nil {
		return x.Rx2
	}
	return nil
}

func (x *DownlinkMessage) GetRx1Delay() *durationpb.Duration {
	if x != nil {
		return x.Rx1Delay
	}
	return nil
}

func (x *DownlinkMessage) GetClass() DownlinkMessageClass {
	if x != nil {
		return x.Class
	}
	return DownlinkMessageClass_CLASS_A
}

func (x *DownlinkMessage) GetForwarderUplinkToken() []byte {
	if x != nil {
		return x.ForwarderUplinkToken
	}
	return nil
}

func (x *DownlinkMessage) GetGatewayUplinkToken() []byte {
	if x != nil {
		return x.GatewayUplinkToken
	}
	return nil
}

func (x *DownlinkMessage) GetDownlinkToken() []byte {
	if x != nil {
		return x.DownlinkToken
	}
	return nil
}

func (x *DownlinkMessage) GetPriority() DownlinkMessagePriority {
	if x != nil {
		return x.Priority
	}
	return DownlinkMessagePriority_LOWEST
}

type PHYPayloadTeaser_JoinRequestTeaser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JoinEUI of the join-request.
	JoinEui uint64 `protobuf:"fixed64,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// DevEUI of the join-request.
	DevEui uint64 `protobuf:"fixed64,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// DevNonce of the join-request.
	DevNonce uint32 `protobuf:"varint,3,opt,name=dev_nonce,json=devNonce,proto3" json:"dev_nonce,omitempty"`
}

func (x *PHYPayloadTeaser_JoinRequestTeaser) Reset() {
	*x = PHYPayloadTeaser_JoinRequestTeaser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PHYPayloadTeaser_JoinRequestTeaser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PHYPayloadTeaser_JoinRequestTeaser) ProtoMessage() {}

func (x *PHYPayloadTeaser_JoinRequestTeaser) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PHYPayloadTeaser_JoinRequestTeaser.ProtoReflect.Descriptor instead.
func (*PHYPayloadTeaser_JoinRequestTeaser) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PHYPayloadTeaser_JoinRequestTeaser) GetJoinEui() uint64 {
	if x != nil {
		return x.JoinEui
	}
	return 0
}

func (x *PHYPayloadTeaser_JoinRequestTeaser) GetDevEui() uint64 {
	if x != nil {
		return x.DevEui
	}
	return 0
}

func (x *PHYPayloadTeaser_JoinRequestTeaser) GetDevNonce() uint32 {
	if x != nil {
		return x.DevNonce
	}
	return 0
}

type PHYPayloadTeaser_MACPayloadTeaser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether it is a confirmed or unconfirmed data uplink message.
	Confirmed bool `protobuf:"varint,2,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// DevAddr of the message.
	DevAddr uint32 `protobuf:"varint,3,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Indicates whether the PHYPayload contains FOpts.
	FOpts bool `protobuf:"varint,4,opt,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
	// FCnt of the message.
	FCnt uint32 `protobuf:"varint,5,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// FPort of the message.
	FPort uint32 `protobuf:"varint,6,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Length of the FRMPayload.
	FrmPayloadLength uint32 `protobuf:"varint,7,opt,name=frm_payload_length,json=frmPayloadLength,proto3" json:"frm_payload_length,omitempty"`
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) Reset() {
	*x = PHYPayloadTeaser_MACPayloadTeaser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PHYPayloadTeaser_MACPayloadTeaser) ProtoMessage() {}

func (x *PHYPayloadTeaser_MACPayloadTeaser) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PHYPayloadTeaser_MACPayloadTeaser.ProtoReflect.Descriptor instead.
func (*PHYPayloadTeaser_MACPayloadTeaser) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) GetDevAddr() uint32 {
	if x != nil {
		return x.DevAddr
	}
	return 0
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) GetFOpts() bool {
	if x != nil {
		return x.FOpts
	}
	return false
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *PHYPayloadTeaser_MACPayloadTeaser) GetFrmPayloadLength() uint32 {
	if x != nil {
		return x.FrmPayloadLength
	}
	return 0
}

type GatewayMetadataTeaser_Terrestrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the metadata contains a fine timestamp.
	FineTimestamp bool `protobuf:"varint,2,opt,name=fine_timestamp,json=fineTimestamp,proto3" json:"fine_timestamp,omitempty"`
}

func (x *GatewayMetadataTeaser_Terrestrial) Reset() {
	*x = GatewayMetadataTeaser_Terrestrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataTeaser_Terrestrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataTeaser_Terrestrial) ProtoMessage() {}

func (x *GatewayMetadataTeaser_Terrestrial) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataTeaser_Terrestrial.ProtoReflect.Descriptor instead.
func (*GatewayMetadataTeaser_Terrestrial) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GatewayMetadataTeaser_Terrestrial) GetFineTimestamp() bool {
	if x != nil {
		return x.FineTimestamp
	}
	return false
}

type GatewayMetadataTeaser_Satellite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayMetadataTeaser_Satellite) Reset() {
	*x = GatewayMetadataTeaser_Satellite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataTeaser_Satellite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataTeaser_Satellite) ProtoMessage() {}

func (x *GatewayMetadataTeaser_Satellite) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataTeaser_Satellite.ProtoReflect.Descriptor instead.
func (*GatewayMetadataTeaser_Satellite) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{1, 1}
}

type GatewayMetadataSignalQuality_Terrestrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Antennas []*GatewayMetadataSignalQuality_Terrestrial_Antenna `protobuf:"bytes,1,rep,name=antennas,proto3" json:"antennas,omitempty"`
}

func (x *GatewayMetadataSignalQuality_Terrestrial) Reset() {
	*x = GatewayMetadataSignalQuality_Terrestrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataSignalQuality_Terrestrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataSignalQuality_Terrestrial) ProtoMessage() {}

func (x *GatewayMetadataSignalQuality_Terrestrial) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataSignalQuality_Terrestrial.ProtoReflect.Descriptor instead.
func (*GatewayMetadataSignalQuality_Terrestrial) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GatewayMetadataSignalQuality_Terrestrial) GetAntennas() []*GatewayMetadataSignalQuality_Terrestrial_Antenna {
	if x != nil {
		return x.Antennas
	}
	return nil
}

type GatewayMetadataSignalQuality_Satellite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GatewayMetadataSignalQuality_Satellite) Reset() {
	*x = GatewayMetadataSignalQuality_Satellite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataSignalQuality_Satellite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataSignalQuality_Satellite) ProtoMessage() {}

func (x *GatewayMetadataSignalQuality_Satellite) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataSignalQuality_Satellite.ProtoReflect.Descriptor instead.
func (*GatewayMetadataSignalQuality_Satellite) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{3, 1}
}

type GatewayMetadataSignalQuality_Terrestrial_Antenna struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32                                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value *TerrestrialGatewayAntennaSignalQuality `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GatewayMetadataSignalQuality_Terrestrial_Antenna) Reset() {
	*x = GatewayMetadataSignalQuality_Terrestrial_Antenna{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataSignalQuality_Terrestrial_Antenna) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataSignalQuality_Terrestrial_Antenna) ProtoMessage() {}

func (x *GatewayMetadataSignalQuality_Terrestrial_Antenna) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataSignalQuality_Terrestrial_Antenna.ProtoReflect.Descriptor instead.
func (*GatewayMetadataSignalQuality_Terrestrial_Antenna) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *GatewayMetadataSignalQuality_Terrestrial_Antenna) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GatewayMetadataSignalQuality_Terrestrial_Antenna) GetValue() *TerrestrialGatewayAntennaSignalQuality {
	if x != nil {
		return x.Value
	}
	return nil
}

type GatewayMetadataLocalization_Terrestrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Antennas []*GatewayMetadataLocalization_Terrestrial_Antenna `protobuf:"bytes,1,rep,name=antennas,proto3" json:"antennas,omitempty"`
}

func (x *GatewayMetadataLocalization_Terrestrial) Reset() {
	*x = GatewayMetadataLocalization_Terrestrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataLocalization_Terrestrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataLocalization_Terrestrial) ProtoMessage() {}

func (x *GatewayMetadataLocalization_Terrestrial) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataLocalization_Terrestrial.ProtoReflect.Descriptor instead.
func (*GatewayMetadataLocalization_Terrestrial) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GatewayMetadataLocalization_Terrestrial) GetAntennas() []*GatewayMetadataLocalization_Terrestrial_Antenna {
	if x != nil {
		return x.Antennas
	}
	return nil
}

type GatewayMetadataLocalization_Satellite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Satellite location.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *GatewayMetadataLocalization_Satellite) Reset() {
	*x = GatewayMetadataLocalization_Satellite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataLocalization_Satellite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataLocalization_Satellite) ProtoMessage() {}

func (x *GatewayMetadataLocalization_Satellite) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataLocalization_Satellite.ProtoReflect.Descriptor instead.
func (*GatewayMetadataLocalization_Satellite) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GatewayMetadataLocalization_Satellite) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type GatewayMetadataLocalization_Terrestrial_Antenna struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Location of the antenna.
	Location *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Fine timestamp.
	FineTimestamp *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=fine_timestamp,json=fineTimestamp,proto3" json:"fine_timestamp,omitempty"`
	// Signal quality.
	SignalQuality *TerrestrialGatewayAntennaSignalQuality `protobuf:"bytes,4,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
}

func (x *GatewayMetadataLocalization_Terrestrial_Antenna) Reset() {
	*x = GatewayMetadataLocalization_Terrestrial_Antenna{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetadataLocalization_Terrestrial_Antenna) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetadataLocalization_Terrestrial_Antenna) ProtoMessage() {}

func (x *GatewayMetadataLocalization_Terrestrial_Antenna) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetadataLocalization_Terrestrial_Antenna.ProtoReflect.Descriptor instead.
func (*GatewayMetadataLocalization_Terrestrial_Antenna) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *GatewayMetadataLocalization_Terrestrial_Antenna) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GatewayMetadataLocalization_Terrestrial_Antenna) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GatewayMetadataLocalization_Terrestrial_Antenna) GetFineTimestamp() *wrapperspb.UInt64Value {
	if x != nil {
		return x.FineTimestamp
	}
	return nil
}

func (x *GatewayMetadataLocalization_Terrestrial_Antenna) GetSignalQuality() *TerrestrialGatewayAntennaSignalQuality {
	if x != nil {
		return x.SignalQuality
	}
	return nil
}

type UplinkMessage_PHYPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Teaser of the PHYPayload.
	Teaser *PHYPayloadTeaser `protobuf:"bytes,1,opt,name=teaser,proto3" json:"teaser,omitempty"`
	// Types that are assignable to Value:
	//	*UplinkMessage_PHYPayload_Encrypted
	//	*UplinkMessage_PHYPayload_Plain
	Value isUplinkMessage_PHYPayload_Value `protobuf_oneof:"value"`
}

func (x *UplinkMessage_PHYPayload) Reset() {
	*x = UplinkMessage_PHYPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage_PHYPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage_PHYPayload) ProtoMessage() {}

func (x *UplinkMessage_PHYPayload) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage_PHYPayload.ProtoReflect.Descriptor instead.
func (*UplinkMessage_PHYPayload) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{9, 1}
}

func (x *UplinkMessage_PHYPayload) GetTeaser() *PHYPayloadTeaser {
	if x != nil {
		return x.Teaser
	}
	return nil
}

func (m *UplinkMessage_PHYPayload) GetValue() isUplinkMessage_PHYPayload_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UplinkMessage_PHYPayload) GetEncrypted() *EncryptedData {
	if x, ok := x.GetValue().(*UplinkMessage_PHYPayload_Encrypted); ok {
		return x.Encrypted
	}
	return nil
}

func (x *UplinkMessage_PHYPayload) GetPlain() []byte {
	if x, ok := x.GetValue().(*UplinkMessage_PHYPayload_Plain); ok {
		return x.Plain
	}
	return nil
}

type isUplinkMessage_PHYPayload_Value interface {
	isUplinkMessage_PHYPayload_Value()
}

type UplinkMessage_PHYPayload_Encrypted struct {
	// Encrypted PHYPayload.
	Encrypted *EncryptedData `protobuf:"bytes,2,opt,name=encrypted,proto3,oneof"`
}

type UplinkMessage_PHYPayload_Plain struct {
	Plain []byte `protobuf:"bytes,3,opt,name=plain,proto3,oneof"`
}

func (*UplinkMessage_PHYPayload_Encrypted) isUplinkMessage_PHYPayload_Value() {}

func (*UplinkMessage_PHYPayload_Plain) isUplinkMessage_PHYPayload_Value() {}

type UplinkMessage_GatewayMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Teaser of the gateway metadata.
	Teaser *GatewayMetadataTeaser `protobuf:"bytes,1,opt,name=teaser,proto3" json:"teaser,omitempty"`
	// Signal quality.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has signal_quality set.
	//
	// Types that are assignable to SignalQuality:
	//	*UplinkMessage_GatewayMetadata_EncryptedSignalQuality
	//	*UplinkMessage_GatewayMetadata_PlainSignalQuality
	SignalQuality isUplinkMessage_GatewayMetadata_SignalQuality `protobuf_oneof:"signal_quality"`
	// Localization.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has localization set.
	//
	// Types that are assignable to Localization:
	//	*UplinkMessage_GatewayMetadata_EncryptedLocalization
	//	*UplinkMessage_GatewayMetadata_PlainLocalization
	Localization isUplinkMessage_GatewayMetadata_Localization `protobuf_oneof:"localization"`
}

func (x *UplinkMessage_GatewayMetadata) Reset() {
	*x = UplinkMessage_GatewayMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessage_GatewayMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessage_GatewayMetadata) ProtoMessage() {}

func (x *UplinkMessage_GatewayMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessage_GatewayMetadata.ProtoReflect.Descriptor instead.
func (*UplinkMessage_GatewayMetadata) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{9, 2}
}

func (x *UplinkMessage_GatewayMetadata) GetTeaser() *GatewayMetadataTeaser {
	if x != nil {
		return x.Teaser
	}
	return nil
}

func (m *UplinkMessage_GatewayMetadata) GetSignalQuality() isUplinkMessage_GatewayMetadata_SignalQuality {
	if m != nil {
		return m.SignalQuality
	}
	return nil
}

func (x *UplinkMessage_GatewayMetadata) GetEncryptedSignalQuality() *EncryptedData {
	if x, ok := x.GetSignalQuality().(*UplinkMessage_GatewayMetadata_EncryptedSignalQuality); ok {
		return x.EncryptedSignalQuality
	}
	return nil
}

func (x *UplinkMessage_GatewayMetadata) GetPlainSignalQuality() *GatewayMetadataSignalQuality {
	if x, ok := x.GetSignalQuality().(*UplinkMessage_GatewayMetadata_PlainSignalQuality); ok {
		return x.PlainSignalQuality
	}
	return nil
}

func (m *UplinkMessage_GatewayMetadata) GetLocalization() isUplinkMessage_GatewayMetadata_Localization {
	if m != nil {
		return m.Localization
	}
	return nil
}

func (x *UplinkMessage_GatewayMetadata) GetEncryptedLocalization() *EncryptedData {
	if x, ok := x.GetLocalization().(*UplinkMessage_GatewayMetadata_EncryptedLocalization); ok {
		return x.EncryptedLocalization
	}
	return nil
}

func (x *UplinkMessage_GatewayMetadata) GetPlainLocalization() *GatewayMetadataLocalization {
	if x, ok := x.GetLocalization().(*UplinkMessage_GatewayMetadata_PlainLocalization); ok {
		return x.PlainLocalization
	}
	return nil
}

type isUplinkMessage_GatewayMetadata_SignalQuality interface {
	isUplinkMessage_GatewayMetadata_SignalQuality()
}

type UplinkMessage_GatewayMetadata_EncryptedSignalQuality struct {
	// Encrypted GatewayMetadataSignalQuality.
	EncryptedSignalQuality *EncryptedData `protobuf:"bytes,2,opt,name=encrypted_signal_quality,json=encryptedSignalQuality,proto3,oneof"`
}

type UplinkMessage_GatewayMetadata_PlainSignalQuality struct {
	PlainSignalQuality *GatewayMetadataSignalQuality `protobuf:"bytes,3,opt,name=plain_signal_quality,json=plainSignalQuality,proto3,oneof"`
}

func (*UplinkMessage_GatewayMetadata_EncryptedSignalQuality) isUplinkMessage_GatewayMetadata_SignalQuality() {
}

func (*UplinkMessage_GatewayMetadata_PlainSignalQuality) isUplinkMessage_GatewayMetadata_SignalQuality() {
}

type isUplinkMessage_GatewayMetadata_Localization interface {
	isUplinkMessage_GatewayMetadata_Localization()
}

type UplinkMessage_GatewayMetadata_EncryptedLocalization struct {
	// Encrypted GatewayMetadataLocalization.
	EncryptedLocalization *EncryptedData `protobuf:"bytes,4,opt,name=encrypted_localization,json=encryptedLocalization,proto3,oneof"`
}

type UplinkMessage_GatewayMetadata_PlainLocalization struct {
	PlainLocalization *GatewayMetadataLocalization `protobuf:"bytes,5,opt,name=plain_localization,json=plainLocalization,proto3,oneof"`
}

func (*UplinkMessage_GatewayMetadata_EncryptedLocalization) isUplinkMessage_GatewayMetadata_Localization() {
}

func (*UplinkMessage_GatewayMetadata_PlainLocalization) isUplinkMessage_GatewayMetadata_Localization() {
}

type DownlinkMessage_RXSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency (Hz).
	Frequency uint64    `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	DataRate  *DataRate `protobuf:"bytes,3,opt,name=data_rate,json=dataRate,proto3" json:"data_rate,omitempty"`
	// Data rate index as defined in the gateway's LoRaWAN region.
	// DEPRECATED: Set data_rate instead.
	DataRateIndex uint32 `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
}

func (x *DownlinkMessage_RXSettings) Reset() {
	*x = DownlinkMessage_RXSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessage_RXSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessage_RXSettings) ProtoMessage() {}

func (x *DownlinkMessage_RXSettings) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessage_RXSettings.ProtoReflect.Descriptor instead.
func (*DownlinkMessage_RXSettings) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_messages_proto_rawDescGZIP(), []int{10, 0}
}

func (x *DownlinkMessage_RXSettings) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *DownlinkMessage_RXSettings) GetDataRate() *DataRate {
	if x != nil {
		return x.DataRate
	}
	return nil
}

func (x *DownlinkMessage_RXSettings) GetDataRateIndex() uint32 {
	if x != nil {
		return x.DataRateIndex
	}
	return 0
}

var File_packetbroker_api_v3_messages_proto protoreflect.FileDescriptor

var file_packetbroker_api_v3_messages_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x33, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x33, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x98, 0x04, 0x0a, 0x10, 0x50, 0x48, 0x59, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x5c, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x50, 0x48, 0x59, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x73,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x48, 0x59, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x4d, 0x41, 0x43, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x1a, 0x64, 0x0a,
	0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x61, 0x73,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x1a, 0xbc, 0x01, 0x0a, 0x10, 0x4d, 0x41, 0x43, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x66, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x95, 0x02,
	0x0a, 0x15, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x65, 0x61, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x1a, 0x34, 0x0a, 0x0b, 0x54, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x0b, 0x0a, 0x09, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x26, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x73, 0x73, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x73, 0x73, 0x69, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x73, 0x73,
	0x69, 0x12, 0x53, 0x0a, 0x17, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x72, 0x73, 0x73, 0x69, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xdb, 0x03, 0x0a, 0x1c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x5b, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x1a, 0xe4, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x61, 0x0a, 0x08, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x52, 0x08, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x73, 0x1a, 0x72, 0x0a, 0x07, 0x41, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x65,
	0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0b, 0x0a, 0x09, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xa4, 0x05, 0x0a, 0x1b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x60, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x1a,
	0xf5, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x60, 0x0a, 0x08, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2e,
	0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x52, 0x08, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x73, 0x1a, 0x83, 0x02, 0x0a, 0x07, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x62, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x46, 0x0a, 0x09, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x0c, 0x4c, 0x6f, 0x52, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x22, 0x35, 0x0a, 0x0b, 0x46, 0x53, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x69, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x71, 0x0a, 0x0e, 0x4c, 0x52, 0x46, 0x48,
	0x53, 0x53, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xc6, 0x01, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x6f, 0x72, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x52,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x72,
	0x61, 0x12, 0x34, 0x0a, 0x03, 0x66, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x53, 0x4b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x66, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x72, 0x66, 0x68, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x52,
	0x46, 0x48, 0x53, 0x53, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x72, 0x66, 0x68, 0x73, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x0c, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6b, 0x65, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4b, 0x65, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x4e, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x48, 0x59, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x50, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4c, 0x0a, 0x14, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x58, 0x0a,
	0x09, 0x4b, 0x65, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb0, 0x01, 0x0a, 0x0a, 0x50, 0x48, 0x59, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x65, 0x61, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x48, 0x59,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x06, 0x74,
	0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfe, 0x03, 0x0a, 0x0f, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42,
	0x0a, 0x06, 0x74, 0x65, 0x61, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x06, 0x74, 0x65, 0x61, 0x73,
	0x65, 0x72, 0x12, 0x5e, 0x0a, 0x18, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x65, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x16, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52,
	0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x06, 0x0a, 0x0f,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x68, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x41, 0x0a, 0x03, 0x72, 0x78,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x58,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x03, 0x72, 0x78, 0x31, 0x12, 0x41, 0x0a,
	0x03, 0x72, 0x78, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x52, 0x58, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x03, 0x72, 0x78, 0x32,
	0x12, 0x36, 0x0a, 0x09, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x72, 0x78, 0x31, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x1a, 0x8e, 0x01, 0x0a, 0x0a, 0x52, 0x58, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x6f, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x33, 0x3b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_packetbroker_api_v3_messages_proto_rawDescOnce sync.Once
	file_packetbroker_api_v3_messages_proto_rawDescData = file_packetbroker_api_v3_messages_proto_rawDesc
)

func file_packetbroker_api_v3_messages_proto_rawDescGZIP() []byte {
	file_packetbroker_api_v3_messages_proto_rawDescOnce.Do(func() {
		file_packetbroker_api_v3_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_packetbroker_api_v3_messages_proto_rawDescData)
	})
	return file_packetbroker_api_v3_messages_proto_rawDescData
}

var file_packetbroker_api_v3_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_packetbroker_api_v3_messages_proto_goTypes = []interface{}{
	(*PHYPayloadTeaser)(nil),                                 // 0: org.packetbroker.v3.PHYPayloadTeaser
	(*GatewayMetadataTeaser)(nil),                            // 1: org.packetbroker.v3.GatewayMetadataTeaser
	(*TerrestrialGatewayAntennaSignalQuality)(nil),           // 2: org.packetbroker.v3.TerrestrialGatewayAntennaSignalQuality
	(*GatewayMetadataSignalQuality)(nil),                     // 3: org.packetbroker.v3.GatewayMetadataSignalQuality
	(*GatewayMetadataLocalization)(nil),                      // 4: org.packetbroker.v3.GatewayMetadataLocalization
	(*LoRaDataRate)(nil),                                     // 5: org.packetbroker.v3.LoRaDataRate
	(*FSKDataRate)(nil),                                      // 6: org.packetbroker.v3.FSKDataRate
	(*LRFHSSDataRate)(nil),                                   // 7: org.packetbroker.v3.LRFHSSDataRate
	(*DataRate)(nil),                                         // 8: org.packetbroker.v3.DataRate
	(*UplinkMessage)(nil),                                    // 9: org.packetbroker.v3.UplinkMessage
	(*DownlinkMessage)(nil),                                  // 10: org.packetbroker.v3.DownlinkMessage
	(*PHYPayloadTeaser_JoinRequestTeaser)(nil),               // 11: org.packetbroker.v3.PHYPayloadTeaser.JoinRequestTeaser
	(*PHYPayloadTeaser_MACPayloadTeaser)(nil),                // 12: org.packetbroker.v3.PHYPayloadTeaser.MACPayloadTeaser
	(*GatewayMetadataTeaser_Terrestrial)(nil),                // 13: org.packetbroker.v3.GatewayMetadataTeaser.Terrestrial
	(*GatewayMetadataTeaser_Satellite)(nil),                  // 14: org.packetbroker.v3.GatewayMetadataTeaser.Satellite
	(*GatewayMetadataSignalQuality_Terrestrial)(nil),         // 15: org.packetbroker.v3.GatewayMetadataSignalQuality.Terrestrial
	(*GatewayMetadataSignalQuality_Satellite)(nil),           // 16: org.packetbroker.v3.GatewayMetadataSignalQuality.Satellite
	(*GatewayMetadataSignalQuality_Terrestrial_Antenna)(nil), // 17: org.packetbroker.v3.GatewayMetadataSignalQuality.Terrestrial.Antenna
	(*GatewayMetadataLocalization_Terrestrial)(nil),          // 18: org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial
	(*GatewayMetadataLocalization_Satellite)(nil),            // 19: org.packetbroker.v3.GatewayMetadataLocalization.Satellite
	(*GatewayMetadataLocalization_Terrestrial_Antenna)(nil),  // 20: org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial.Antenna
	nil,                                    // 21: org.packetbroker.v3.UplinkMessage.KeksEntry
	(*UplinkMessage_PHYPayload)(nil),       // 22: org.packetbroker.v3.UplinkMessage.PHYPayload
	(*UplinkMessage_GatewayMetadata)(nil),  // 23: org.packetbroker.v3.UplinkMessage.GatewayMetadata
	(*DownlinkMessage_RXSettings)(nil),     // 24: org.packetbroker.v3.DownlinkMessage.RXSettings
	(*wrapperspb.FloatValue)(nil),          // 25: google.protobuf.FloatValue
	(*GatewayIdentifier)(nil),              // 26: org.packetbroker.v3.GatewayIdentifier
	(*timestamppb.Timestamp)(nil),          // 27: google.protobuf.Timestamp
	(Region)(0),                            // 28: org.packetbroker.v3.Region
	(*RegionalParametersVersionValue)(nil), // 29: org.packetbroker.v3.RegionalParametersVersionValue
	(*durationpb.Duration)(nil),            // 30: google.protobuf.Duration
	(DownlinkMessageClass)(0),              // 31: org.packetbroker.v3.DownlinkMessageClass
	(DownlinkMessagePriority)(0),           // 32: org.packetbroker.v3.DownlinkMessagePriority
	(*Location)(nil),                       // 33: org.packetbroker.v3.Location
	(*wrapperspb.UInt64Value)(nil),         // 34: google.protobuf.UInt64Value
	(*KeyPointer)(nil),                     // 35: org.packetbroker.v3.KeyPointer
	(*EncryptedData)(nil),                  // 36: org.packetbroker.v3.EncryptedData
}
var file_packetbroker_api_v3_messages_proto_depIdxs = []int32{
	11, // 0: org.packetbroker.v3.PHYPayloadTeaser.join_request:type_name -> org.packetbroker.v3.PHYPayloadTeaser.JoinRequestTeaser
	12, // 1: org.packetbroker.v3.PHYPayloadTeaser.mac:type_name -> org.packetbroker.v3.PHYPayloadTeaser.MACPayloadTeaser
	13, // 2: org.packetbroker.v3.GatewayMetadataTeaser.terrestrial:type_name -> org.packetbroker.v3.GatewayMetadataTeaser.Terrestrial
	14, // 3: org.packetbroker.v3.GatewayMetadataTeaser.satellite:type_name -> org.packetbroker.v3.GatewayMetadataTeaser.Satellite
	25, // 4: org.packetbroker.v3.TerrestrialGatewayAntennaSignalQuality.signal_rssi:type_name -> google.protobuf.FloatValue
	25, // 5: org.packetbroker.v3.TerrestrialGatewayAntennaSignalQuality.rssi_standard_deviation:type_name -> google.protobuf.FloatValue
	15, // 6: org.packetbroker.v3.GatewayMetadataSignalQuality.terrestrial:type_name -> org.packetbroker.v3.GatewayMetadataSignalQuality.Terrestrial
	16, // 7: org.packetbroker.v3.GatewayMetadataSignalQuality.satellite:type_name -> org.packetbroker.v3.GatewayMetadataSignalQuality.Satellite
	18, // 8: org.packetbroker.v3.GatewayMetadataLocalization.terrestrial:type_name -> org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial
	19, // 9: org.packetbroker.v3.GatewayMetadataLocalization.satellite:type_name -> org.packetbroker.v3.GatewayMetadataLocalization.Satellite
	5,  // 10: org.packetbroker.v3.DataRate.lora:type_name -> org.packetbroker.v3.LoRaDataRate
	6,  // 11: org.packetbroker.v3.DataRate.fsk:type_name -> org.packetbroker.v3.FSKDataRate
	7,  // 12: org.packetbroker.v3.DataRate.lrfhss:type_name -> org.packetbroker.v3.LRFHSSDataRate
	21, // 13: org.packetbroker.v3.UplinkMessage.keks:type_name -> org.packetbroker.v3.UplinkMessage.KeksEntry
	26, // 14: org.packetbroker.v3.UplinkMessage.gateway_id:type_name -> org.packetbroker.v3.GatewayIdentifier
	22, // 15: org.packetbroker.v3.UplinkMessage.phy_payload:type_name -> org.packetbroker.v3.UplinkMessage.PHYPayload
	27, // 16: org.packetbroker.v3.UplinkMessage.forwarder_receive_time:type_name -> google.protobuf.Timestamp
	27, // 17: org.packetbroker.v3.UplinkMessage.gateway_receive_time:type_name -> google.protobuf.Timestamp
	28, // 18: org.packetbroker.v3.UplinkMessage.gateway_region:type_name -> org.packetbroker.v3.Region
	8,  // 19: org.packetbroker.v3.UplinkMessage.data_rate:type_name -> org.packetbroker.v3.DataRate
	23, // 20: org.packetbroker.v3.UplinkMessage.gateway_metadata:type_name -> org.packetbroker.v3.UplinkMessage.GatewayMetadata
	28, // 21: org.packetbroker.v3.DownlinkMessage.region:type_name -> org.packetbroker.v3.Region
	29, // 22: org.packetbroker.v3.DownlinkMessage.regional_parameters_version:type_name -> org.packetbroker.v3.RegionalParametersVersionValue
	24, // 23: org.packetbroker.v3.DownlinkMessage.rx1:type_name -> org.packetbroker.v3.DownlinkMessage.RXSettings
	24, // 24: org.packetbroker.v3.DownlinkMessage.rx2:type_name -> org.packetbroker.v3.DownlinkMessage.RXSettings
	30, // 25: org.packetbroker.v3.DownlinkMessage.rx1_delay:type_name -> google.protobuf.Duration
	31, // 26: org.packetbroker.v3.DownlinkMessage.class:type_name -> org.packetbroker.v3.DownlinkMessageClass
	32, // 27: org.packetbroker.v3.DownlinkMessage.priority:type_name -> org.packetbroker.v3.DownlinkMessagePriority
	17, // 28: org.packetbroker.v3.GatewayMetadataSignalQuality.Terrestrial.antennas:type_name -> org.packetbroker.v3.GatewayMetadataSignalQuality.Terrestrial.Antenna
	2,  // 29: org.packetbroker.v3.GatewayMetadataSignalQuality.Terrestrial.Antenna.value:type_name -> org.packetbroker.v3.TerrestrialGatewayAntennaSignalQuality
	20, // 30: org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial.antennas:type_name -> org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial.Antenna
	33, // 31: org.packetbroker.v3.GatewayMetadataLocalization.Satellite.location:type_name -> org.packetbroker.v3.Location
	33, // 32: org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial.Antenna.location:type_name -> org.packetbroker.v3.Location
	34, // 33: org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial.Antenna.fine_timestamp:type_name -> google.protobuf.UInt64Value
	2,  // 34: org.packetbroker.v3.GatewayMetadataLocalization.Terrestrial.Antenna.signal_quality:type_name -> org.packetbroker.v3.TerrestrialGatewayAntennaSignalQuality
	35, // 35: org.packetbroker.v3.UplinkMessage.KeksEntry.value:type_name -> org.packetbroker.v3.KeyPointer
	0,  // 36: org.packetbroker.v3.UplinkMessage.PHYPayload.teaser:type_name -> org.packetbroker.v3.PHYPayloadTeaser
	36, // 37: org.packetbroker.v3.UplinkMessage.PHYPayload.encrypted:type_name -> org.packetbroker.v3.EncryptedData
	1,  // 38: org.packetbroker.v3.UplinkMessage.GatewayMetadata.teaser:type_name -> org.packetbroker.v3.GatewayMetadataTeaser
	36, // 39: org.packetbroker.v3.UplinkMessage.GatewayMetadata.encrypted_signal_quality:type_name -> org.packetbroker.v3.EncryptedData
	3,  // 40: org.packetbroker.v3.UplinkMessage.GatewayMetadata.plain_signal_quality:type_name -> org.packetbroker.v3.GatewayMetadataSignalQuality
	36, // 41: org.packetbroker.v3.UplinkMessage.GatewayMetadata.encrypted_localization:type_name -> org.packetbroker.v3.EncryptedData
	4,  // 42: org.packetbroker.v3.UplinkMessage.GatewayMetadata.plain_localization:type_name -> org.packetbroker.v3.GatewayMetadataLocalization
	8,  // 43: org.packetbroker.v3.DownlinkMessage.RXSettings.data_rate:type_name -> org.packetbroker.v3.DataRate
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_packetbroker_api_v3_messages_proto_init() }
func file_packetbroker_api_v3_messages_proto_init() {
	if File_packetbroker_api_v3_messages_proto != nil {
		return
	}
	file_packetbroker_api_v3_enums_proto_init()
	file_packetbroker_api_v3_gateway_proto_init()
	file_packetbroker_api_v3_keys_proto_init()
	file_packetbroker_api_v3_location_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_packetbroker_api_v3_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PHYPayloadTeaser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataTeaser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerrestrialGatewayAntennaSignalQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataSignalQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataLocalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoRaDataRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FSKDataRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LRFHSSDataRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PHYPayloadTeaser_JoinRequestTeaser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PHYPayloadTeaser_MACPayloadTeaser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataTeaser_Terrestrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataTeaser_Satellite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataSignalQuality_Terrestrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataSignalQuality_Satellite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataSignalQuality_Terrestrial_Antenna); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataLocalization_Terrestrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataLocalization_Satellite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetadataLocalization_Terrestrial_Antenna); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage_PHYPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessage_GatewayMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessage_RXSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_packetbroker_api_v3_messages_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PHYPayloadTeaser_JoinRequest)(nil),
		(*PHYPayloadTeaser_Mac)(nil),
	}
	file_packetbroker_api_v3_messages_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GatewayMetadataTeaser_Terrestrial_)(nil),
		(*GatewayMetadataTeaser_Satellite_)(nil),
	}
	file_packetbroker_api_v3_messages_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GatewayMetadataSignalQuality_Terrestrial_)(nil),
		(*GatewayMetadataSignalQuality_Satellite_)(nil),
	}
	file_packetbroker_api_v3_messages_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GatewayMetadataLocalization_Terrestrial_)(nil),
		(*GatewayMetadataLocalization_Satellite_)(nil),
	}
	file_packetbroker_api_v3_messages_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DataRate_Lora)(nil),
		(*DataRate_Fsk)(nil),
		(*DataRate_Lrfhss)(nil),
	}
	file_packetbroker_api_v3_messages_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*UplinkMessage_PHYPayload_Encrypted)(nil),
		(*UplinkMessage_PHYPayload_Plain)(nil),
	}
	file_packetbroker_api_v3_messages_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*UplinkMessage_GatewayMetadata_EncryptedSignalQuality)(nil),
		(*UplinkMessage_GatewayMetadata_PlainSignalQuality)(nil),
		(*UplinkMessage_GatewayMetadata_EncryptedLocalization)(nil),
		(*UplinkMessage_GatewayMetadata_PlainLocalization)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packetbroker_api_v3_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packetbroker_api_v3_messages_proto_goTypes,
		DependencyIndexes: file_packetbroker_api_v3_messages_proto_depIdxs,
		MessageInfos:      file_packetbroker_api_v3_messages_proto_msgTypes,
	}.Build()
	File_packetbroker_api_v3_messages_proto = out.File
	file_packetbroker_api_v3_messages_proto_rawDesc = nil
	file_packetbroker_api_v3_messages_proto_goTypes = nil
	file_packetbroker_api_v3_messages_proto_depIdxs = nil
}
