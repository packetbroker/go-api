// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/mapping/v2/service.proto

package mappingpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDefaultGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId    string   `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultGatewayVisibilityRequest) Reset()         { *m = GetDefaultGatewayVisibilityRequest{} }
func (m *GetDefaultGatewayVisibilityRequest) String() string { return proto.CompactTextString(m) }
func (*GetDefaultGatewayVisibilityRequest) ProtoMessage()    {}
func (*GetDefaultGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{0}
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Unmarshal(m, b)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Marshal(b, m, deterministic)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_Size() int {
	return xxx_messageInfo_GetDefaultGatewayVisibilityRequest.Size(m)
}
func (m *GetDefaultGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetDefaultGatewayVisibilityRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

type GetHomeNetworkGatewayVisibilityRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId  string   `protobuf:"bytes,4,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHomeNetworkGatewayVisibilityRequest) Reset() {
	*m = GetHomeNetworkGatewayVisibilityRequest{}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) String() string { return proto.CompactTextString(m) }
func (*GetHomeNetworkGatewayVisibilityRequest) ProtoMessage()    {}
func (*GetHomeNetworkGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{1}
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Unmarshal(m, b)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Marshal(b, m, deterministic)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Merge(m, src)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_Size() int {
	return xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.Size(m)
}
func (m *GetHomeNetworkGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkGatewayVisibilityRequest proto.InternalMessageInfo

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *GetHomeNetworkGatewayVisibilityRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

type SetGatewayVisibilityRequest struct {
	Visibility           *v3.GatewayVisibility `protobuf:"bytes,3,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SetGatewayVisibilityRequest) Reset()         { *m = SetGatewayVisibilityRequest{} }
func (m *SetGatewayVisibilityRequest) String() string { return proto.CompactTextString(m) }
func (*SetGatewayVisibilityRequest) ProtoMessage()    {}
func (*SetGatewayVisibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{2}
}
func (m *SetGatewayVisibilityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetGatewayVisibilityRequest.Unmarshal(m, b)
}
func (m *SetGatewayVisibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetGatewayVisibilityRequest.Marshal(b, m, deterministic)
}
func (m *SetGatewayVisibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetGatewayVisibilityRequest.Merge(m, src)
}
func (m *SetGatewayVisibilityRequest) XXX_Size() int {
	return xxx_messageInfo_SetGatewayVisibilityRequest.Size(m)
}
func (m *SetGatewayVisibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetGatewayVisibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetGatewayVisibilityRequest proto.InternalMessageInfo

func (m *SetGatewayVisibilityRequest) GetVisibility() *v3.GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type GetGatewayVisibilityResponse struct {
	Visibility           *v3.GatewayVisibility `protobuf:"bytes,1,opt,name=visibility,proto3" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetGatewayVisibilityResponse) Reset()         { *m = GetGatewayVisibilityResponse{} }
func (m *GetGatewayVisibilityResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayVisibilityResponse) ProtoMessage()    {}
func (*GetGatewayVisibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{3}
}
func (m *GetGatewayVisibilityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayVisibilityResponse.Unmarshal(m, b)
}
func (m *GetGatewayVisibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayVisibilityResponse.Marshal(b, m, deterministic)
}
func (m *GetGatewayVisibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayVisibilityResponse.Merge(m, src)
}
func (m *GetGatewayVisibilityResponse) XXX_Size() int {
	return xxx_messageInfo_GetGatewayVisibilityResponse.Size(m)
}
func (m *GetGatewayVisibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayVisibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayVisibilityResponse proto.InternalMessageInfo

func (m *GetGatewayVisibilityResponse) GetVisibility() *v3.GatewayVisibility {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type UpdateGatewayRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Forwarder cluster of the Forwarder Member (optional).
	ForwarderClusterId string `protobuf:"bytes,3,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Identifier of the gateway.
	ForwarderGatewayId *v3.GatewayIdentifier `protobuf:"bytes,4,opt,name=forwarder_gateway_id,json=forwarderGatewayId,proto3" json:"forwarder_gateway_id,omitempty"`
	// Gateway location.
	// This field gets updated when a value is set.
	GatewayLocation *v3.GatewayLocationValue `protobuf:"bytes,5,opt,name=gateway_location,json=gatewayLocation,proto3" json:"gateway_location,omitempty"`
	// Administrative contact.
	// This field gets updated when a value is set.
	AdministrativeContact *v3.ContactInfoValue `protobuf:"bytes,6,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	// This field gets updated when a value is set.
	TechnicalContact *v3.ContactInfoValue `protobuf:"bytes,7,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the gateway is online.
	// This field gets updated when a value is set.
	Online *types.BoolValue `protobuf:"bytes,8,opt,name=online,proto3" json:"online,omitempty"`
	// If the gateway is online, this value indicates the time-to-live for the online status. This value must be set when
	// the online field is set and true.
	// When the online status expires, the gateway will be offline.
	// To keep the gateway online, update online status before the status expires.
	OnlineTtl *types.Duration `protobuf:"bytes,9,opt,name=online_ttl,json=onlineTtl,proto3" json:"online_ttl,omitempty"`
	// Frequency plan of the gateway.
	// This field gets updated when a value is set.
	FrequencyPlan *v3.GatewayFrequencyPlan `protobuf:"bytes,10,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// Received packets rate (number of packets per hour).
	// This field gets updated when a value is set.
	RxRate *types.FloatValue `protobuf:"bytes,11,opt,name=rx_rate,json=rxRate,proto3" json:"rx_rate,omitempty"`
	// Transmitted packets rate (number of packets per hour).
	// This field gets updated when a value is set.
	TxRate               *types.FloatValue `protobuf:"bytes,12,opt,name=tx_rate,json=txRate,proto3" json:"tx_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateGatewayRequest) Reset()         { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()    {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3a8864f8c52de4, []int{4}
}
func (m *UpdateGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateGatewayRequest.Unmarshal(m, b)
}
func (m *UpdateGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateGatewayRequest.Marshal(b, m, deterministic)
}
func (m *UpdateGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGatewayRequest.Merge(m, src)
}
func (m *UpdateGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateGatewayRequest.Size(m)
}
func (m *UpdateGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGatewayRequest proto.InternalMessageInfo

func (m *UpdateGatewayRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *UpdateGatewayRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *UpdateGatewayRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *UpdateGatewayRequest) GetForwarderGatewayId() *v3.GatewayIdentifier {
	if m != nil {
		return m.ForwarderGatewayId
	}
	return nil
}

func (m *UpdateGatewayRequest) GetGatewayLocation() *v3.GatewayLocationValue {
	if m != nil {
		return m.GatewayLocation
	}
	return nil
}

func (m *UpdateGatewayRequest) GetAdministrativeContact() *v3.ContactInfoValue {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *UpdateGatewayRequest) GetTechnicalContact() *v3.ContactInfoValue {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *UpdateGatewayRequest) GetOnline() *types.BoolValue {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *UpdateGatewayRequest) GetOnlineTtl() *types.Duration {
	if m != nil {
		return m.OnlineTtl
	}
	return nil
}

func (m *UpdateGatewayRequest) GetFrequencyPlan() *v3.GatewayFrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return nil
}

func (m *UpdateGatewayRequest) GetRxRate() *types.FloatValue {
	if m != nil {
		return m.RxRate
	}
	return nil
}

func (m *UpdateGatewayRequest) GetTxRate() *types.FloatValue {
	if m != nil {
		return m.TxRate
	}
	return nil
}

func init() {
	proto.RegisterType((*GetDefaultGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.GetDefaultGatewayVisibilityRequest")
	proto.RegisterType((*GetHomeNetworkGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.GetHomeNetworkGatewayVisibilityRequest")
	proto.RegisterType((*SetGatewayVisibilityRequest)(nil), "org.packetbroker.mapping.v2.SetGatewayVisibilityRequest")
	proto.RegisterType((*GetGatewayVisibilityResponse)(nil), "org.packetbroker.mapping.v2.GetGatewayVisibilityResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "org.packetbroker.mapping.v2.UpdateGatewayRequest")
}

func init() {
	proto.RegisterFile("packetbroker/api/mapping/v2/service.proto", fileDescriptor_3c3a8864f8c52de4)
}

var fileDescriptor_3c3a8864f8c52de4 = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x5d, 0x4f, 0x13, 0x4d,
	0x14, 0xc7, 0xd3, 0xe7, 0xe1, 0x29, 0x4f, 0x07, 0xc1, 0x32, 0x54, 0xb2, 0xb6, 0xc6, 0x60, 0x13,
	0x09, 0x24, 0xba, 0xd5, 0xd6, 0x0b, 0x8c, 0x17, 0x26, 0x80, 0xd4, 0x26, 0x42, 0xc8, 0x82, 0xc4,
	0x10, 0x93, 0x66, 0xba, 0x7b, 0x76, 0xbb, 0x61, 0x3a, 0xb3, 0xce, 0x9e, 0xb6, 0x70, 0xe3, 0x87,
	0xf0, 0xd2, 0x6b, 0x3f, 0x80, 0x9f, 0xca, 0xcf, 0x61, 0x3a, 0xbb, 0xdd, 0xb6, 0xf4, 0x0d, 0x5f,
	0xef, 0xb6, 0x73, 0xfe, 0xff, 0xdf, 0x39, 0xf3, 0x76, 0xa6, 0x64, 0x3b, 0x60, 0xf6, 0x05, 0x60,
	0x43, 0xc9, 0x0b, 0x50, 0x25, 0x16, 0xf8, 0xa5, 0x16, 0x0b, 0x02, 0x5f, 0x78, 0xa5, 0x4e, 0xb9,
	0x14, 0x82, 0xea, 0xf8, 0x36, 0x98, 0x81, 0x92, 0x28, 0x69, 0x41, 0x2a, 0xcf, 0x1c, 0x96, 0x9b,
	0xb1, 0xd4, 0xec, 0x94, 0xf3, 0x05, 0x4f, 0x4a, 0x8f, 0x43, 0x49, 0x4b, 0x1b, 0x6d, 0xb7, 0x04,
	0xad, 0x00, 0xaf, 0x22, 0x67, 0xfe, 0xfe, 0xf5, 0xa0, 0xd3, 0x56, 0x0c, 0x7d, 0x29, 0xa6, 0xc5,
	0xbb, 0x8a, 0x05, 0x01, 0xa8, 0x30, 0x8e, 0x3f, 0x18, 0x2b, 0xb2, 0x53, 0x29, 0xd9, 0x52, 0x20,
	0xb3, 0x71, 0x96, 0xc4, 0x63, 0x08, 0x5d, 0x16, 0x57, 0x51, 0xfc, 0x48, 0x8a, 0x55, 0xc0, 0x7d,
	0x70, 0x59, 0x9b, 0x63, 0x35, 0x0a, 0x9d, 0xf9, 0xa1, 0xdf, 0xf0, 0xb9, 0x8f, 0x57, 0x16, 0x7c,
	0x68, 0x43, 0x88, 0x74, 0x8b, 0x64, 0x5d, 0xa9, 0xba, 0x4c, 0x39, 0xa0, 0xea, 0x02, 0xb0, 0xee,
	0x3b, 0x46, 0x6a, 0x23, 0xb5, 0xb5, 0x6c, 0xad, 0x24, 0xe3, 0x47, 0x80, 0x35, 0x87, 0x9a, 0x64,
	0x6d, 0xa0, 0x44, 0x10, 0x4c, 0x68, 0xf1, 0x3f, 0x1b, 0xa9, 0xad, 0x8c, 0xb5, 0x9a, 0x84, 0x4e,
	0x75, 0xa4, 0xe6, 0x14, 0xbf, 0xa5, 0xc8, 0x66, 0x15, 0xf0, 0xb5, 0x6c, 0xc1, 0x11, 0x60, 0x57,
	0xaa, 0x8b, 0xbf, 0x5f, 0x04, 0x7d, 0x4c, 0xd6, 0x9a, 0xb2, 0x05, 0x3d, 0x68, 0xaf, 0x82, 0x3e,
	0xfc, 0x5f, 0x0d, 0xcf, 0x36, 0x07, 0xb5, 0x45, 0xf8, 0x0a, 0x59, 0x1f, 0x91, 0x0f, 0x32, 0x2c,
	0xe8, 0x0c, 0x6b, 0x43, 0x8e, 0x64, 0xa2, 0x40, 0x0a, 0x27, 0x30, 0x7d, 0x85, 0x0f, 0x08, 0xe9,
	0x24, 0x83, 0x3a, 0xf3, 0x52, 0x79, 0xd3, 0x1c, 0x3b, 0x5c, 0x9d, 0x8a, 0x39, 0x8e, 0x18, 0x72,
	0x16, 0x5d, 0x72, 0xaf, 0x3a, 0x31, 0x4d, 0x18, 0x48, 0x11, 0xc2, 0xb5, 0x3c, 0xa9, 0x9f, 0xce,
	0xf3, 0x35, 0x4d, 0x72, 0x6f, 0x03, 0x87, 0x21, 0xc4, 0xba, 0x3f, 0xbf, 0x4b, 0x4f, 0x48, 0x6e,
	0xa0, 0xb7, 0x79, 0x3b, 0x44, 0x50, 0xfd, 0x6d, 0xca, 0x58, 0x34, 0x89, 0xed, 0x45, 0xa1, 0x9a,
	0x43, 0xdf, 0x0d, 0x3b, 0xe2, 0x73, 0xdf, 0xdf, 0xa6, 0x39, 0xd3, 0xae, 0x39, 0x20, 0xd0, 0x77,
	0x7d, 0x50, 0x43, 0xe4, 0x24, 0x46, 0x4f, 0x49, 0xb6, 0xcf, 0xe3, 0xd2, 0xd6, 0xd7, 0xd6, 0xf8,
	0x4f, 0x53, 0xb7, 0x67, 0x51, 0xdf, 0xc4, 0xda, 0x33, 0xc6, 0xdb, 0x60, 0xdd, 0xf6, 0x46, 0x47,
	0xe9, 0x7b, 0xb2, 0xce, 0x9c, 0x96, 0x2f, 0xfc, 0x10, 0x7b, 0xad, 0xa0, 0x03, 0xf5, 0xf8, 0x3e,
	0x1b, 0x69, 0xcd, 0x7e, 0x38, 0x91, 0xbd, 0x17, 0x69, 0x6a, 0xc2, 0x95, 0x11, 0xf7, 0xce, 0x28,
	0x24, 0x8e, 0x53, 0x8b, 0xac, 0x22, 0xd8, 0x4d, 0xe1, 0xdb, 0x8c, 0x27, 0xe0, 0xc5, 0x1f, 0x01,
	0x67, 0x13, 0x7f, 0x9f, 0x59, 0x26, 0x69, 0x29, 0xb8, 0x2f, 0xc0, 0xf8, 0x5f, 0x83, 0xf2, 0x66,
	0xd4, 0xb5, 0xcc, 0x7e, 0xd7, 0x32, 0x77, 0xa5, 0xe4, 0x91, 0x3b, 0x56, 0xd2, 0x1d, 0x42, 0xa2,
	0xaf, 0x3a, 0x22, 0x37, 0x32, 0xda, 0x77, 0x77, 0xcc, 0xb7, 0x1f, 0x77, 0x43, 0x2b, 0x13, 0x89,
	0x4f, 0x91, 0xd3, 0x63, 0xb2, 0xe2, 0xaa, 0xde, 0x39, 0x13, 0xf6, 0x55, 0x3d, 0xe0, 0x4c, 0x18,
	0x64, 0xfe, 0x9a, 0x1f, 0xf4, 0x1d, 0xc7, 0x9c, 0x09, 0x6b, 0xd9, 0x1d, 0xfe, 0x49, 0x9f, 0x91,
	0x45, 0x75, 0x59, 0x57, 0x0c, 0xc1, 0x58, 0xd2, 0xa8, 0xc2, 0x58, 0x21, 0x07, 0x5c, 0x32, 0x8c,
	0x67, 0xa0, 0x2e, 0x2d, 0x86, 0xd0, 0x73, 0x61, 0xec, 0xba, 0x75, 0x03, 0x17, 0x6a, 0x57, 0xf9,
	0xcb, 0x02, 0x31, 0xc6, 0x2e, 0xd5, 0x21, 0x13, 0xcc, 0x03, 0x45, 0x3f, 0xa5, 0x48, 0x6e, 0xd0,
	0x88, 0x07, 0x71, 0xfa, 0xd2, 0x9c, 0xf1, 0xc2, 0x98, 0xf3, 0x7b, 0x77, 0xfe, 0xf9, 0x3c, 0xc0,
	0xf4, 0x66, 0xd1, 0x24, 0xb9, 0x93, 0x49, 0x35, 0xed, 0xcc, 0x44, 0xce, 0x68, 0x73, 0xf9, 0xf5,
	0xb1, 0x85, 0x7a, 0xd5, 0x7b, 0x12, 0xe9, 0xe7, 0x14, 0x31, 0x46, 0x9f, 0x81, 0xa1, 0x74, 0x7b,
	0xf3, 0x66, 0x70, 0x83, 0xd7, 0xe3, 0x57, 0x96, 0x81, 0x13, 0xe3, 0x64, 0x5a, 0x6d, 0xbf, 0x7d,
	0x29, 0xca, 0x0e, 0x49, 0x1f, 0xea, 0x87, 0x9e, 0x9e, 0x93, 0xe5, 0x91, 0x16, 0x4b, 0x9f, 0xce,
	0x4c, 0x36, 0xa9, 0x1d, 0x4f, 0xcb, 0xb2, 0x6b, 0x9e, 0x3f, 0xf2, 0xe4, 0x28, 0x4a, 0x2a, 0xef,
	0xda, 0x7f, 0x9d, 0x17, 0xf1, 0x67, 0xd0, 0x68, 0xa4, 0xb5, 0xbf, 0xf2, 0x3d, 0x00, 0x00, 0xff,
	0xff, 0xcb, 0xec, 0x1c, 0xdc, 0x1b, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayVisibilityManagerClient is the client API for GatewayVisibilityManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayVisibilityManagerClient interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type gatewayVisibilityManagerClient struct {
	cc *grpc.ClientConn
}

func NewGatewayVisibilityManagerClient(cc *grpc.ClientConn) GatewayVisibilityManagerClient {
	return &gatewayVisibilityManagerClient{cc}
}

func (c *gatewayVisibilityManagerClient) GetDefaultVisibility(ctx context.Context, in *GetDefaultGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetDefaultVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetDefaultVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) GetHomeNetworkVisibility(ctx context.Context, in *GetHomeNetworkGatewayVisibilityRequest, opts ...grpc.CallOption) (*GetGatewayVisibilityResponse, error) {
	out := new(GetGatewayVisibilityResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayVisibilityManagerClient) SetHomeNetworkVisibility(ctx context.Context, in *SetGatewayVisibilityRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetHomeNetworkVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayVisibilityManagerServer is the server API for GatewayVisibilityManager service.
type GatewayVisibilityManagerServer interface {
	// Get the Default Gateway Visibility.
	GetDefaultVisibility(context.Context, *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Default Gateway Visibility.
	SetDefaultVisibility(context.Context, *SetGatewayVisibilityRequest) (*types.Empty, error)
	// Get the Gateway Visibility with the Home Network.
	GetHomeNetworkVisibility(context.Context, *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error)
	// Set the Gateway Visibility with the Home Network.
	SetHomeNetworkVisibility(context.Context, *SetGatewayVisibilityRequest) (*types.Empty, error)
}

// UnimplementedGatewayVisibilityManagerServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayVisibilityManagerServer struct {
}

func (*UnimplementedGatewayVisibilityManagerServer) GetDefaultVisibility(ctx context.Context, req *GetDefaultGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetDefaultVisibility(ctx context.Context, req *SetGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) GetHomeNetworkVisibility(ctx context.Context, req *GetHomeNetworkGatewayVisibilityRequest) (*GetGatewayVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkVisibility not implemented")
}
func (*UnimplementedGatewayVisibilityManagerServer) SetHomeNetworkVisibility(ctx context.Context, req *SetGatewayVisibilityRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkVisibility not implemented")
}

func RegisterGatewayVisibilityManagerServer(s *grpc.Server, srv GatewayVisibilityManagerServer) {
	s.RegisterService(&_GatewayVisibilityManager_serviceDesc, srv)
}

func _GatewayVisibilityManager_GetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetDefaultVisibility(ctx, req.(*GetDefaultGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetDefaultVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetDefaultVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetDefaultVisibility(ctx, req.(*SetGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/GetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).GetHomeNetworkVisibility(ctx, req.(*GetHomeNetworkGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.GatewayVisibilityManager/SetHomeNetworkVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayVisibilityManagerServer).SetHomeNetworkVisibility(ctx, req.(*SetGatewayVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayVisibilityManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v2.GatewayVisibilityManager",
	HandlerType: (*GatewayVisibilityManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_GetDefaultVisibility_Handler,
		},
		{
			MethodName: "SetDefaultVisibility",
			Handler:    _GatewayVisibilityManager_SetDefaultVisibility_Handler,
		},
		{
			MethodName: "GetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_GetHomeNetworkVisibility_Handler,
		},
		{
			MethodName: "SetHomeNetworkVisibility",
			Handler:    _GatewayVisibilityManager_SetHomeNetworkVisibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v2/service.proto",
}

// MapperClient is the client API for Mapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapperClient interface {
	// Update a gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type mapperClient struct {
	cc *grpc.ClientConn
}

func NewMapperClient(cc *grpc.ClientConn) MapperClient {
	return &mapperClient{cc}
}

func (c *mapperClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.mapping.v2.Mapper/UpdateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapperServer is the server API for Mapper service.
type MapperServer interface {
	// Update a gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*types.Empty, error)
}

// UnimplementedMapperServer can be embedded to have forward compatible implementations.
type UnimplementedMapperServer struct {
}

func (*UnimplementedMapperServer) UpdateGateway(ctx context.Context, req *UpdateGatewayRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}

func RegisterMapperServer(s *grpc.Server, srv MapperServer) {
	s.RegisterService(&_Mapper_serviceDesc, srv)
}

func _Mapper_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.mapping.v2.Mapper/UpdateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.mapping.v2.Mapper",
	HandlerType: (*MapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGateway",
			Handler:    _Mapper_UpdateGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/mapping/v2/service.proto",
}
