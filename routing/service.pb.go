// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/routing/v1/service.proto

package routingpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListDefaultPoliciesRequest struct {
	// Timestamp to list from for pagination.
	UpdatedSince *types.Timestamp `protobuf:"bytes,1,opt,name=updated_since,json=updatedSince,proto3" json:"updated_since,omitempty"`
	// Limit number items for pagination.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDefaultPoliciesRequest) Reset()      { *m = ListDefaultPoliciesRequest{} }
func (*ListDefaultPoliciesRequest) ProtoMessage() {}
func (*ListDefaultPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{0}
}
func (m *ListDefaultPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDefaultPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDefaultPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDefaultPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDefaultPoliciesRequest.Merge(m, src)
}
func (m *ListDefaultPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDefaultPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDefaultPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDefaultPoliciesRequest proto.InternalMessageInfo

func (m *ListDefaultPoliciesRequest) GetUpdatedSince() *types.Timestamp {
	if m != nil {
		return m.UpdatedSince
	}
	return nil
}

func (m *ListDefaultPoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListDefaultPoliciesResponse struct {
	Policies []*v3.RoutingPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// Total number of items.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDefaultPoliciesResponse) Reset()      { *m = ListDefaultPoliciesResponse{} }
func (*ListDefaultPoliciesResponse) ProtoMessage() {}
func (*ListDefaultPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{1}
}
func (m *ListDefaultPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDefaultPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDefaultPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDefaultPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDefaultPoliciesResponse.Merge(m, src)
}
func (m *ListDefaultPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDefaultPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDefaultPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDefaultPoliciesResponse proto.InternalMessageInfo

func (m *ListDefaultPoliciesResponse) GetPolicies() []*v3.RoutingPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ListDefaultPoliciesResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetDefaultPolicyRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId    string   `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultPolicyRequest) Reset()      { *m = GetDefaultPolicyRequest{} }
func (*GetDefaultPolicyRequest) ProtoMessage() {}
func (*GetDefaultPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{2}
}
func (m *GetDefaultPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDefaultPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDefaultPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDefaultPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultPolicyRequest.Merge(m, src)
}
func (m *GetDefaultPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDefaultPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultPolicyRequest proto.InternalMessageInfo

func (m *GetDefaultPolicyRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetDefaultPolicyRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

type ListHomeNetworkPoliciesRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Timestamp to list from for pagination.
	UpdatedSince *types.Timestamp `protobuf:"bytes,3,opt,name=updated_since,json=updatedSince,proto3" json:"updated_since,omitempty"`
	// Limit number items for pagination.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHomeNetworkPoliciesRequest) Reset()      { *m = ListHomeNetworkPoliciesRequest{} }
func (*ListHomeNetworkPoliciesRequest) ProtoMessage() {}
func (*ListHomeNetworkPoliciesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{3}
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHomeNetworkPoliciesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHomeNetworkPoliciesRequest.Merge(m, src)
}
func (m *ListHomeNetworkPoliciesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHomeNetworkPoliciesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHomeNetworkPoliciesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHomeNetworkPoliciesRequest proto.InternalMessageInfo

func (m *ListHomeNetworkPoliciesRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *ListHomeNetworkPoliciesRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *ListHomeNetworkPoliciesRequest) GetUpdatedSince() *types.Timestamp {
	if m != nil {
		return m.UpdatedSince
	}
	return nil
}

func (m *ListHomeNetworkPoliciesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListHomeNetworkPoliciesResponse struct {
	Policies []*v3.RoutingPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// Total number of items.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListHomeNetworkPoliciesResponse) Reset()      { *m = ListHomeNetworkPoliciesResponse{} }
func (*ListHomeNetworkPoliciesResponse) ProtoMessage() {}
func (*ListHomeNetworkPoliciesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{4}
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHomeNetworkPoliciesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHomeNetworkPoliciesResponse.Merge(m, src)
}
func (m *ListHomeNetworkPoliciesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListHomeNetworkPoliciesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHomeNetworkPoliciesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHomeNetworkPoliciesResponse proto.InternalMessageInfo

func (m *ListHomeNetworkPoliciesResponse) GetPolicies() []*v3.RoutingPolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ListHomeNetworkPoliciesResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type GetHomeNetworkPolicyRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId  string   `protobuf:"bytes,4,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHomeNetworkPolicyRequest) Reset()      { *m = GetHomeNetworkPolicyRequest{} }
func (*GetHomeNetworkPolicyRequest) ProtoMessage() {}
func (*GetHomeNetworkPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{5}
}
func (m *GetHomeNetworkPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHomeNetworkPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHomeNetworkPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHomeNetworkPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHomeNetworkPolicyRequest.Merge(m, src)
}
func (m *GetHomeNetworkPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHomeNetworkPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHomeNetworkPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHomeNetworkPolicyRequest proto.InternalMessageInfo

func (m *GetHomeNetworkPolicyRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GetHomeNetworkPolicyRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *GetHomeNetworkPolicyRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *GetHomeNetworkPolicyRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

type SetPolicyRequest struct {
	Policy               *v3.RoutingPolicy `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetPolicyRequest) Reset()      { *m = SetPolicyRequest{} }
func (*SetPolicyRequest) ProtoMessage() {}
func (*SetPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{6}
}
func (m *SetPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPolicyRequest.Merge(m, src)
}
func (m *SetPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPolicyRequest proto.InternalMessageInfo

func (m *SetPolicyRequest) GetPolicy() *v3.RoutingPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type GetPolicyResponse struct {
	Policy               *v3.RoutingPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPolicyResponse) Reset()      { *m = GetPolicyResponse{} }
func (*GetPolicyResponse) ProtoMessage() {}
func (*GetPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{7}
}
func (m *GetPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPolicyResponse.Merge(m, src)
}
func (m *GetPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPolicyResponse proto.InternalMessageInfo

func (m *GetPolicyResponse) GetPolicy() *v3.RoutingPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

type PublishUplinkMessageRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,3,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Uplink message to publish.
	Message              *v3.UplinkMessage `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishUplinkMessageRequest) Reset()      { *m = PublishUplinkMessageRequest{} }
func (*PublishUplinkMessageRequest) ProtoMessage() {}
func (*PublishUplinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{8}
}
func (m *PublishUplinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishUplinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishUplinkMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishUplinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishUplinkMessageRequest.Merge(m, src)
}
func (m *PublishUplinkMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishUplinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishUplinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishUplinkMessageRequest proto.InternalMessageInfo

func (m *PublishUplinkMessageRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *PublishUplinkMessageRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *PublishUplinkMessageRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *PublishUplinkMessageRequest) GetMessage() *v3.UplinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PublishUplinkMessageResponse struct {
	// Message identifier generated by the Router.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishUplinkMessageResponse) Reset()      { *m = PublishUplinkMessageResponse{} }
func (*PublishUplinkMessageResponse) ProtoMessage() {}
func (*PublishUplinkMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{9}
}
func (m *PublishUplinkMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishUplinkMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishUplinkMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishUplinkMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishUplinkMessageResponse.Merge(m, src)
}
func (m *PublishUplinkMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishUplinkMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishUplinkMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishUplinkMessageResponse proto.InternalMessageInfo

func (m *PublishUplinkMessageResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PublishDownlinkMessageRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	HomeNetworkTenantId string `protobuf:"bytes,3,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	ForwarderNetId uint32 `protobuf:"varint,4,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	// In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
	// In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
	ForwarderClusterId string `protobuf:"bytes,5,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	// In LoRaWAN Class A downlink, this value must be copied from the RoutedUplinkMessage.
	// In LoRaWAN Class C downlink, this value is typically copied from a recent RoutedUplinkMessage.
	ForwarderTenantId string `protobuf:"bytes,6,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Downlink message to publish.
	Message              *v3.DownlinkMessage `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublishDownlinkMessageRequest) Reset()      { *m = PublishDownlinkMessageRequest{} }
func (*PublishDownlinkMessageRequest) ProtoMessage() {}
func (*PublishDownlinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{10}
}
func (m *PublishDownlinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishDownlinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishDownlinkMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishDownlinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishDownlinkMessageRequest.Merge(m, src)
}
func (m *PublishDownlinkMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishDownlinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishDownlinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishDownlinkMessageRequest proto.InternalMessageInfo

func (m *PublishDownlinkMessageRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *PublishDownlinkMessageRequest) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *PublishDownlinkMessageRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *PublishDownlinkMessageRequest) GetMessage() *v3.DownlinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type PublishDownlinkMessageResponse struct {
	// Message identifier generated by the Router.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishDownlinkMessageResponse) Reset()      { *m = PublishDownlinkMessageResponse{} }
func (*PublishDownlinkMessageResponse) ProtoMessage() {}
func (*PublishDownlinkMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{11}
}
func (m *PublishDownlinkMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishDownlinkMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishDownlinkMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishDownlinkMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishDownlinkMessageResponse.Merge(m, src)
}
func (m *PublishDownlinkMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishDownlinkMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishDownlinkMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishDownlinkMessageResponse proto.InternalMessageInfo

func (m *PublishDownlinkMessageResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SubscribeForwarderRequest struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,3,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Shared subscription group (optional).
	// Queue durability depends on the Router configuration.
	Group                string   `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeForwarderRequest) Reset()      { *m = SubscribeForwarderRequest{} }
func (*SubscribeForwarderRequest) ProtoMessage() {}
func (*SubscribeForwarderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{12}
}
func (m *SubscribeForwarderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeForwarderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeForwarderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeForwarderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeForwarderRequest.Merge(m, src)
}
func (m *SubscribeForwarderRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeForwarderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeForwarderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeForwarderRequest proto.InternalMessageInfo

func (m *SubscribeForwarderRequest) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *SubscribeForwarderRequest) GetForwarderClusterId() string {
	if m != nil {
		return m.ForwarderClusterId
	}
	return ""
}

func (m *SubscribeForwarderRequest) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *SubscribeForwarderRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type SubscribeHomeNetworkRequest struct {
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,1,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,2,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,3,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Routing filters to configure the subscription.
	// A message gets delivered if any of the given filters pass.
	// If no filters are specified, all messages will be delivered.
	Filters []*v3.RoutingFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	// Shared subscription group (optional).
	// Queue durability depends on the Router configuration.
	Group                string   `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeHomeNetworkRequest) Reset()      { *m = SubscribeHomeNetworkRequest{} }
func (*SubscribeHomeNetworkRequest) ProtoMessage() {}
func (*SubscribeHomeNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{13}
}
func (m *SubscribeHomeNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeHomeNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeHomeNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeHomeNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeHomeNetworkRequest.Merge(m, src)
}
func (m *SubscribeHomeNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeHomeNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeHomeNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeHomeNetworkRequest proto.InternalMessageInfo

func (m *SubscribeHomeNetworkRequest) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *SubscribeHomeNetworkRequest) GetHomeNetworkClusterId() string {
	if m != nil {
		return m.HomeNetworkClusterId
	}
	return ""
}

func (m *SubscribeHomeNetworkRequest) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

func (m *SubscribeHomeNetworkRequest) GetFilters() []*v3.RoutingFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *SubscribeHomeNetworkRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type RouteUplinkMessageRequest struct {
	// Uplink message to route.
	Message              *v3.RoutedUplinkMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RouteUplinkMessageRequest) Reset()      { *m = RouteUplinkMessageRequest{} }
func (*RouteUplinkMessageRequest) ProtoMessage() {}
func (*RouteUplinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{14}
}
func (m *RouteUplinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteUplinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteUplinkMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteUplinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteUplinkMessageRequest.Merge(m, src)
}
func (m *RouteUplinkMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *RouteUplinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteUplinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteUplinkMessageRequest proto.InternalMessageInfo

func (m *RouteUplinkMessageRequest) GetMessage() *v3.RoutedUplinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type RouteDownlinkMessageRequest struct {
	// Downlink message to route.
	Message              *v3.RoutedDownlinkMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *RouteDownlinkMessageRequest) Reset()      { *m = RouteDownlinkMessageRequest{} }
func (*RouteDownlinkMessageRequest) ProtoMessage() {}
func (*RouteDownlinkMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{15}
}
func (m *RouteDownlinkMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteDownlinkMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteDownlinkMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteDownlinkMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteDownlinkMessageRequest.Merge(m, src)
}
func (m *RouteDownlinkMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *RouteDownlinkMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteDownlinkMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteDownlinkMessageRequest proto.InternalMessageInfo

func (m *RouteDownlinkMessageRequest) GetMessage() *v3.RoutedDownlinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

type RouteMessageResponse struct {
	// Delivery state of the message.
	State                v3.MessageDeliveryState `protobuf:"varint,1,opt,name=state,proto3,enum=org.packetbroker.v3.MessageDeliveryState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RouteMessageResponse) Reset()      { *m = RouteMessageResponse{} }
func (*RouteMessageResponse) ProtoMessage() {}
func (*RouteMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{16}
}
func (m *RouteMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteMessageResponse.Merge(m, src)
}
func (m *RouteMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *RouteMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteMessageResponse proto.InternalMessageInfo

func (m *RouteMessageResponse) GetState() v3.MessageDeliveryState {
	if m != nil {
		return m.State
	}
	return v3.MessageDeliveryState_ACCEPTED
}

type ListRoutesRequest struct {
	// Select routes that are created since this timestamp.
	CreatedSince *types.Timestamp `protobuf:"bytes,1,opt,name=created_since,json=createdSince,proto3" json:"created_since,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoutesRequest) Reset()      { *m = ListRoutesRequest{} }
func (*ListRoutesRequest) ProtoMessage() {}
func (*ListRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{17}
}
func (m *ListRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoutesRequest.Merge(m, src)
}
func (m *ListRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoutesRequest proto.InternalMessageInfo

func (m *ListRoutesRequest) GetCreatedSince() *types.Timestamp {
	if m != nil {
		return m.CreatedSince
	}
	return nil
}

func (m *ListRoutesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListRoutesResponse struct {
	Routes []*v3.DevAddrPrefixRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	// Total number of routes.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRoutesResponse) Reset()      { *m = ListRoutesResponse{} }
func (*ListRoutesResponse) ProtoMessage() {}
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd6b7e608465b58, []int{18}
}
func (m *ListRoutesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoutesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoutesResponse.Merge(m, src)
}
func (m *ListRoutesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoutesResponse proto.InternalMessageInfo

func (m *ListRoutesResponse) GetRoutes() []*v3.DevAddrPrefixRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ListRoutesResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*ListDefaultPoliciesRequest)(nil), "org.packetbroker.routing.v1.ListDefaultPoliciesRequest")
	golang_proto.RegisterType((*ListDefaultPoliciesRequest)(nil), "org.packetbroker.routing.v1.ListDefaultPoliciesRequest")
	proto.RegisterType((*ListDefaultPoliciesResponse)(nil), "org.packetbroker.routing.v1.ListDefaultPoliciesResponse")
	golang_proto.RegisterType((*ListDefaultPoliciesResponse)(nil), "org.packetbroker.routing.v1.ListDefaultPoliciesResponse")
	proto.RegisterType((*GetDefaultPolicyRequest)(nil), "org.packetbroker.routing.v1.GetDefaultPolicyRequest")
	golang_proto.RegisterType((*GetDefaultPolicyRequest)(nil), "org.packetbroker.routing.v1.GetDefaultPolicyRequest")
	proto.RegisterType((*ListHomeNetworkPoliciesRequest)(nil), "org.packetbroker.routing.v1.ListHomeNetworkPoliciesRequest")
	golang_proto.RegisterType((*ListHomeNetworkPoliciesRequest)(nil), "org.packetbroker.routing.v1.ListHomeNetworkPoliciesRequest")
	proto.RegisterType((*ListHomeNetworkPoliciesResponse)(nil), "org.packetbroker.routing.v1.ListHomeNetworkPoliciesResponse")
	golang_proto.RegisterType((*ListHomeNetworkPoliciesResponse)(nil), "org.packetbroker.routing.v1.ListHomeNetworkPoliciesResponse")
	proto.RegisterType((*GetHomeNetworkPolicyRequest)(nil), "org.packetbroker.routing.v1.GetHomeNetworkPolicyRequest")
	golang_proto.RegisterType((*GetHomeNetworkPolicyRequest)(nil), "org.packetbroker.routing.v1.GetHomeNetworkPolicyRequest")
	proto.RegisterType((*SetPolicyRequest)(nil), "org.packetbroker.routing.v1.SetPolicyRequest")
	golang_proto.RegisterType((*SetPolicyRequest)(nil), "org.packetbroker.routing.v1.SetPolicyRequest")
	proto.RegisterType((*GetPolicyResponse)(nil), "org.packetbroker.routing.v1.GetPolicyResponse")
	golang_proto.RegisterType((*GetPolicyResponse)(nil), "org.packetbroker.routing.v1.GetPolicyResponse")
	proto.RegisterType((*PublishUplinkMessageRequest)(nil), "org.packetbroker.routing.v1.PublishUplinkMessageRequest")
	golang_proto.RegisterType((*PublishUplinkMessageRequest)(nil), "org.packetbroker.routing.v1.PublishUplinkMessageRequest")
	proto.RegisterType((*PublishUplinkMessageResponse)(nil), "org.packetbroker.routing.v1.PublishUplinkMessageResponse")
	golang_proto.RegisterType((*PublishUplinkMessageResponse)(nil), "org.packetbroker.routing.v1.PublishUplinkMessageResponse")
	proto.RegisterType((*PublishDownlinkMessageRequest)(nil), "org.packetbroker.routing.v1.PublishDownlinkMessageRequest")
	golang_proto.RegisterType((*PublishDownlinkMessageRequest)(nil), "org.packetbroker.routing.v1.PublishDownlinkMessageRequest")
	proto.RegisterType((*PublishDownlinkMessageResponse)(nil), "org.packetbroker.routing.v1.PublishDownlinkMessageResponse")
	golang_proto.RegisterType((*PublishDownlinkMessageResponse)(nil), "org.packetbroker.routing.v1.PublishDownlinkMessageResponse")
	proto.RegisterType((*SubscribeForwarderRequest)(nil), "org.packetbroker.routing.v1.SubscribeForwarderRequest")
	golang_proto.RegisterType((*SubscribeForwarderRequest)(nil), "org.packetbroker.routing.v1.SubscribeForwarderRequest")
	proto.RegisterType((*SubscribeHomeNetworkRequest)(nil), "org.packetbroker.routing.v1.SubscribeHomeNetworkRequest")
	golang_proto.RegisterType((*SubscribeHomeNetworkRequest)(nil), "org.packetbroker.routing.v1.SubscribeHomeNetworkRequest")
	proto.RegisterType((*RouteUplinkMessageRequest)(nil), "org.packetbroker.routing.v1.RouteUplinkMessageRequest")
	golang_proto.RegisterType((*RouteUplinkMessageRequest)(nil), "org.packetbroker.routing.v1.RouteUplinkMessageRequest")
	proto.RegisterType((*RouteDownlinkMessageRequest)(nil), "org.packetbroker.routing.v1.RouteDownlinkMessageRequest")
	golang_proto.RegisterType((*RouteDownlinkMessageRequest)(nil), "org.packetbroker.routing.v1.RouteDownlinkMessageRequest")
	proto.RegisterType((*RouteMessageResponse)(nil), "org.packetbroker.routing.v1.RouteMessageResponse")
	golang_proto.RegisterType((*RouteMessageResponse)(nil), "org.packetbroker.routing.v1.RouteMessageResponse")
	proto.RegisterType((*ListRoutesRequest)(nil), "org.packetbroker.routing.v1.ListRoutesRequest")
	golang_proto.RegisterType((*ListRoutesRequest)(nil), "org.packetbroker.routing.v1.ListRoutesRequest")
	proto.RegisterType((*ListRoutesResponse)(nil), "org.packetbroker.routing.v1.ListRoutesResponse")
	golang_proto.RegisterType((*ListRoutesResponse)(nil), "org.packetbroker.routing.v1.ListRoutesResponse")
}

func init() {
	proto.RegisterFile("packetbroker/api/routing/v1/service.proto", fileDescriptor_4dd6b7e608465b58)
}
func init() {
	golang_proto.RegisterFile("packetbroker/api/routing/v1/service.proto", fileDescriptor_4dd6b7e608465b58)
}

var fileDescriptor_4dd6b7e608465b58 = []byte{
	// 1224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x6c, 0x1b, 0xd5,
	0x13, 0xde, 0x67, 0xc7, 0xc9, 0x2f, 0x93, 0x9f, 0x43, 0xb2, 0xb1, 0x9a, 0x74, 0x0d, 0xaf, 0x61,
	0x85, 0x44, 0x82, 0xd4, 0x75, 0xe2, 0xf0, 0x27, 0x34, 0x51, 0x2b, 0x4a, 0x68, 0xa8, 0x44, 0x43,
	0xb4, 0x29, 0x42, 0x20, 0xa1, 0x68, 0x6d, 0xbf, 0x38, 0x4b, 0x6c, 0xef, 0x76, 0xf7, 0xd9, 0x49,
	0x24, 0x84, 0xa2, 0x0a, 0xa1, 0x20, 0x71, 0xe0, 0xc0, 0x81, 0x1b, 0x1c, 0x7b, 0xec, 0xb1, 0x17,
	0xa4, 0x1e, 0x7b, 0x2c, 0xb7, 0x4a, 0x5c, 0xea, 0xf5, 0x81, 0x1c, 0x7b, 0xec, 0x11, 0xf9, 0xed,
	0xae, 0x77, 0x6d, 0xef, 0xb3, 0x63, 0x8b, 0x48, 0x70, 0x8a, 0x76, 0xdf, 0x7c, 0x33, 0x6f, 0xbe,
	0x6f, 0x76, 0x66, 0x62, 0x58, 0x34, 0xb5, 0xfc, 0x01, 0xa1, 0x39, 0xcb, 0x38, 0x20, 0x56, 0x46,
	0x33, 0xf5, 0x8c, 0x65, 0x54, 0xa9, 0x5e, 0x29, 0x66, 0x6a, 0xcb, 0x19, 0x9b, 0x58, 0x35, 0x3d,
	0x4f, 0x14, 0xd3, 0x32, 0xa8, 0x21, 0xa6, 0x0d, 0xab, 0xa8, 0x84, 0xcd, 0x15, 0xcf, 0x54, 0xa9,
	0x2d, 0x4b, 0xe9, 0xa2, 0x61, 0x14, 0x4b, 0x24, 0xc3, 0x4c, 0x73, 0xd5, 0xbd, 0x0c, 0x29, 0x9b,
	0xf4, 0xd8, 0x45, 0x4a, 0x57, 0x3a, 0x0f, 0xa9, 0x5e, 0x26, 0x36, 0xd5, 0xca, 0xa6, 0x6f, 0xd0,
	0x75, 0x8b, 0xda, 0x4a, 0x86, 0x54, 0xaa, 0x65, 0xdb, 0x33, 0x90, 0xa3, 0x0c, 0xca, 0xc4, 0xb6,
	0xb5, 0x22, 0xf1, 0x6d, 0x5e, 0x8f, 0xb2, 0xf1, 0xaf, 0xc8, 0x4c, 0x64, 0x1b, 0xa4, 0x4f, 0x74,
	0x9b, 0x6e, 0x90, 0x3d, 0xad, 0x5a, 0xa2, 0xdb, 0x46, 0x49, 0xcf, 0xeb, 0xc4, 0x56, 0xc9, 0xbd,
	0x2a, 0xb1, 0xa9, 0x78, 0x03, 0x92, 0x55, 0xb3, 0xa0, 0x51, 0x52, 0xd8, 0xb5, 0xf5, 0x4a, 0x9e,
	0xcc, 0xa1, 0x79, 0xb4, 0x30, 0x91, 0x95, 0x14, 0xf7, 0xfa, 0x8a, 0x7f, 0x7d, 0xe5, 0xae, 0x7f,
	0x7d, 0xf5, 0xff, 0x1e, 0x60, 0xa7, 0x69, 0x2f, 0xa6, 0x20, 0x51, 0xd2, 0xcb, 0x3a, 0x9d, 0x8b,
	0xcd, 0xa3, 0x85, 0xa4, 0xea, 0x3e, 0xc8, 0x36, 0xa4, 0x23, 0x83, 0xda, 0xa6, 0x51, 0xb1, 0x89,
	0x78, 0x1d, 0xfe, 0x67, 0x7a, 0xef, 0xe6, 0xd0, 0x7c, 0x7c, 0x61, 0x22, 0x2b, 0x2b, 0x5d, 0x4c,
	0xd7, 0x56, 0x14, 0xd5, 0xcd, 0x84, 0xe1, 0x8f, 0xd5, 0x16, 0xa6, 0x19, 0x94, 0x1a, 0x54, 0x2b,
	0xf9, 0x41, 0xd9, 0x83, 0x6c, 0xc3, 0xec, 0x26, 0x69, 0x8b, 0x79, 0xec, 0xa7, 0xb9, 0x00, 0x53,
	0x7b, 0x86, 0x75, 0xa8, 0x59, 0x05, 0x62, 0xed, 0x56, 0x08, 0xdd, 0xd5, 0x0b, 0x2c, 0xd3, 0xa4,
	0x3a, 0xd9, 0x7a, 0xbf, 0x45, 0xe8, 0xed, 0x82, 0xa8, 0xc0, 0x4c, 0x60, 0x49, 0x49, 0x45, 0xab,
	0x30, 0xe3, 0x66, 0xa0, 0x71, 0x75, 0xba, 0x75, 0x74, 0x97, 0x9d, 0xdc, 0x2e, 0xc8, 0x7f, 0x20,
	0xc0, 0xcd, 0x54, 0x3f, 0x36, 0xca, 0x64, 0x8b, 0xd0, 0x43, 0xc3, 0x3a, 0xe8, 0xe4, 0xf8, 0xc2,
	0x82, 0x77, 0xab, 0x17, 0x1f, 0x56, 0xbd, 0x91, 0xb0, 0x7a, 0x87, 0x70, 0x85, 0x9b, 0xd2, 0x85,
	0x2a, 0xf8, 0x27, 0x82, 0xf4, 0x26, 0xe9, 0x0a, 0x7c, 0xf1, 0x32, 0x8a, 0x57, 0x61, 0x66, 0xdf,
	0x28, 0x93, 0xa6, 0xd3, 0x66, 0x58, 0xdf, 0x79, 0x9c, 0x39, 0x9f, 0xda, 0x0f, 0x2e, 0xe4, 0xba,
	0x5f, 0x81, 0x4b, 0x6d, 0xe6, 0x41, 0x84, 0x11, 0x16, 0x61, 0x26, 0x84, 0x68, 0x95, 0xca, 0x16,
	0x4c, 0xed, 0x90, 0x8e, 0xc2, 0xbc, 0x06, 0xa3, 0x8c, 0x93, 0x63, 0x4f, 0xba, 0xf3, 0xb0, 0xe8,
	0x21, 0xe4, 0x4f, 0x61, 0x7a, 0x33, 0xf0, 0xe7, 0x09, 0x13, 0x38, 0x44, 0x03, 0x3b, 0xfc, 0x0b,
	0x41, 0x7a, 0xbb, 0x9a, 0x2b, 0xe9, 0xf6, 0xfe, 0x67, 0x66, 0x49, 0xaf, 0x1c, 0xdc, 0x71, 0xbb,
	0xcd, 0xe0, 0xf4, 0x2f, 0x41, 0x2a, 0xb0, 0xcc, 0x97, 0xaa, 0x36, 0x25, 0x56, 0xc0, 0xbf, 0xd8,
	0x3a, 0xfb, 0xd0, 0x3d, 0xe2, 0x0b, 0x16, 0xe7, 0x09, 0xb6, 0x0e, 0x63, 0x5e, 0x2f, 0x64, 0x94,
	0xf3, 0x12, 0x6d, 0xcf, 0xc3, 0x87, 0xc8, 0x0a, 0xbc, 0x1a, 0x9d, 0xa8, 0xc7, 0xe2, 0x24, 0xc4,
	0xbc, 0xdc, 0xc6, 0xd5, 0x98, 0x5e, 0x90, 0xbf, 0x8f, 0xc3, 0x6b, 0x1e, 0x60, 0xc3, 0x38, 0xac,
	0x44, 0x70, 0xc3, 0x29, 0x20, 0xc4, 0x29, 0xa0, 0x77, 0x60, 0xb6, 0xcd, 0xbc, 0x8b, 0xa3, 0x54,
	0x08, 0x12, 0xb0, 0xc4, 0xaf, 0xbb, 0x38, 0xb7, 0xee, 0x22, 0x65, 0x1b, 0x19, 0x48, 0xb6, 0xc4,
	0xa0, 0xb2, 0x8d, 0xf2, 0x64, 0xbb, 0x1e, 0xc8, 0x36, 0xc6, 0x64, 0x7b, 0x23, 0x52, 0xb6, 0x4e,
	0x92, 0x5b, 0xc2, 0x2d, 0x01, 0xe6, 0xe9, 0xc0, 0x91, 0xee, 0x77, 0x04, 0x97, 0x77, 0xaa, 0x39,
	0x3b, 0x6f, 0xe9, 0x39, 0x72, 0xcb, 0xbf, 0xd0, 0xbf, 0xb1, 0xa4, 0x53, 0x90, 0x28, 0x5a, 0x46,
	0xd5, 0xf4, 0x7a, 0x88, 0xfb, 0x20, 0xff, 0x18, 0x83, 0x74, 0xeb, 0xfe, 0xa1, 0xce, 0xf8, 0x1f,
	0x28, 0xbc, 0x75, 0x18, 0xdb, 0xd3, 0x4b, 0x94, 0x58, 0xf6, 0xdc, 0x48, 0xff, 0x19, 0x71, 0x8b,
	0x99, 0xaa, 0x3e, 0x24, 0xa0, 0x23, 0x11, 0xa6, 0x63, 0x17, 0x2e, 0x37, 0xed, 0x49, 0x64, 0x83,
	0xba, 0x19, 0x54, 0x97, 0xdb, 0xfd, 0x16, 0xb8, 0x01, 0x49, 0x81, 0xd3, 0x1a, 0xf2, 0x90, 0x66,
	0xe7, 0x9c, 0xef, 0x7c, 0xa3, 0x33, 0xc4, 0x5b, 0x3d, 0x42, 0x70, 0xcb, 0xf8, 0x73, 0x48, 0x31,
	0x8b, 0xce, 0xe2, 0xbd, 0x01, 0x09, 0x9b, 0x6a, 0xd4, 0xf5, 0x3d, 0x99, 0x5d, 0x8c, 0xf4, 0xed,
	0x81, 0x36, 0x48, 0x49, 0xaf, 0x11, 0xeb, 0x78, 0xa7, 0x09, 0x50, 0x5d, 0x9c, 0xfc, 0x35, 0x4c,
	0x37, 0x47, 0x37, 0x73, 0x1e, 0x5e, 0xf2, 0xf2, 0x16, 0x19, 0x6c, 0xc9, 0xf3, 0x00, 0xbd, 0x96,
	0xbc, 0x03, 0x10, 0xc3, 0xb1, 0x5a, 0x29, 0x8c, 0x5a, 0xec, 0x8d, 0xb7, 0x17, 0xbc, 0x19, 0xfd,
	0x81, 0x93, 0xda, 0x07, 0x85, 0x82, 0xb5, 0x6d, 0x91, 0x3d, 0xfd, 0x88, 0x79, 0x50, 0x3d, 0x58,
	0xf4, 0x6a, 0x90, 0x3d, 0x4b, 0x40, 0xd2, 0x1d, 0x57, 0x77, 0xb4, 0x8a, 0x56, 0x24, 0x96, 0x78,
	0x8a, 0x60, 0x26, 0x62, 0xc9, 0x14, 0xdf, 0x53, 0x7a, 0x2c, 0xed, 0x0a, 0x7f, 0x17, 0x96, 0x56,
	0x07, 0x07, 0x7a, 0x39, 0x1f, 0xc1, 0x54, 0xe7, 0xe6, 0x29, 0xbe, 0xdd, 0xd3, 0x1b, 0x67, 0x51,
	0x95, 0x94, 0x7e, 0xa8, 0x8e, 0x71, 0xff, 0x05, 0xdb, 0x29, 0xda, 0x23, 0x5f, 0xed, 0xe9, 0xa3,
	0x73, 0x05, 0x91, 0x2e, 0x75, 0x95, 0xc1, 0x47, 0xcd, 0xff, 0x63, 0xc4, 0x9f, 0x11, 0xcc, 0x72,
	0xd6, 0x40, 0x71, 0xad, 0x2f, 0x55, 0xfc, 0x7d, 0x58, 0x5a, 0x1f, 0x0e, 0xec, 0x65, 0x7c, 0x82,
	0x20, 0x15, 0xb5, 0x23, 0x8a, 0xab, 0xfd, 0xa8, 0xe3, 0xad, 0x95, 0x03, 0x93, 0xfe, 0x15, 0xa4,
	0x76, 0xa2, 0x6e, 0xf0, 0xcf, 0x10, 0x9f, 0xbd, 0x1f, 0x83, 0x64, 0x6b, 0x50, 0x6d, 0x68, 0x54,
	0x13, 0xbf, 0x85, 0x31, 0x6f, 0xea, 0xf5, 0xc9, 0xb2, 0xc7, 0xf6, 0x26, 0xbd, 0x3f, 0x04, 0xd2,
	0x4b, 0xf8, 0x1e, 0x8c, 0xb7, 0x46, 0x90, 0xf8, 0x6e, 0xef, 0x2c, 0x79, 0xa3, 0x56, 0x1a, 0xa0,
	0x51, 0x2e, 0xa1, 0xec, 0x0f, 0x31, 0x78, 0x25, 0xc4, 0x30, 0xa3, 0xe1, 0x3e, 0x0a, 0x78, 0xb8,
	0x76, 0x9e, 0x6c, 0xa2, 0x7b, 0xb8, 0xb4, 0x36, 0x14, 0x36, 0x8a, 0x8b, 0xd5, 0xf3, 0x71, 0xd1,
	0x3d, 0xb6, 0xa5, 0x73, 0x4f, 0xa6, 0x25, 0x94, 0xfd, 0x2e, 0x06, 0xc0, 0x4e, 0xdc, 0x6a, 0x38,
	0x82, 0x89, 0xd0, 0x08, 0xec, 0xa3, 0x07, 0x77, 0x58, 0x4a, 0xcb, 0xfd, 0x71, 0x9d, 0xb9, 0x7f,
	0x03, 0xc9, 0xb6, 0xd9, 0xd8, 0x27, 0xff, 0x1e, 0x73, 0x74, 0x88, 0xe8, 0xd9, 0x43, 0x18, 0x75,
	0x67, 0x8d, 0x58, 0x06, 0x08, 0x26, 0x8f, 0xa8, 0xf4, 0xed, 0x27, 0x6d, 0xe3, 0x50, 0xca, 0x9c,
	0xdb, 0xde, 0x0d, 0x7c, 0xf3, 0x57, 0xf4, 0xa4, 0x8e, 0xd1, 0xd3, 0x3a, 0x46, 0xcf, 0xea, 0x58,
	0x78, 0x5e, 0xc7, 0xc2, 0x59, 0x1d, 0x0b, 0x2f, 0xea, 0x58, 0x78, 0x59, 0xc7, 0xe8, 0xc4, 0xc1,
	0xe8, 0xd4, 0xc1, 0xc2, 0x03, 0x07, 0xa3, 0x87, 0x0e, 0x16, 0x1e, 0x39, 0x58, 0x78, 0xec, 0x60,
	0xe1, 0x89, 0x83, 0xd1, 0x53, 0x07, 0xa3, 0x67, 0x0e, 0x16, 0x9e, 0x3b, 0x18, 0x9d, 0x39, 0x58,
	0x78, 0xe1, 0x60, 0xf4, 0xd2, 0xc1, 0xc2, 0x49, 0x03, 0x0b, 0xa7, 0x0d, 0x8c, 0x7e, 0x6a, 0x60,
	0xe1, 0x97, 0x06, 0x46, 0xbf, 0x35, 0xb0, 0xf0, 0xa0, 0x81, 0x85, 0x87, 0x0d, 0x8c, 0x1e, 0x35,
	0x30, 0x7a, 0xdc, 0xc0, 0xe8, 0xcb, 0xc5, 0xa2, 0xd1, 0x7e, 0x4b, 0xc3, 0x2a, 0x86, 0x7f, 0xae,
	0x5a, 0xf3, 0xfe, 0x9a, 0xb9, 0xdc, 0x28, 0x6b, 0x21, 0x2b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x59, 0x64, 0xc6, 0x39, 0xdb, 0x12, 0x00, 0x00,
}

func (this *ListDefaultPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDefaultPoliciesRequest)
	if !ok {
		that2, ok := that.(ListDefaultPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdatedSince.Equal(that1.UpdatedSince) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ListDefaultPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDefaultPoliciesResponse)
	if !ok {
		that2, ok := that.(ListDefaultPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *GetDefaultPolicyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDefaultPolicyRequest)
	if !ok {
		that2, ok := that.(GetDefaultPolicyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	return true
}
func (this *ListHomeNetworkPoliciesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHomeNetworkPoliciesRequest)
	if !ok {
		that2, ok := that.(ListHomeNetworkPoliciesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if !this.UpdatedSince.Equal(that1.UpdatedSince) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ListHomeNetworkPoliciesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHomeNetworkPoliciesResponse)
	if !ok {
		that2, ok := that.(ListHomeNetworkPoliciesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Policies) != len(that1.Policies) {
		return false
	}
	for i := range this.Policies {
		if !this.Policies[i].Equal(that1.Policies[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *GetHomeNetworkPolicyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHomeNetworkPolicyRequest)
	if !ok {
		that2, ok := that.(GetHomeNetworkPolicyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if this.HomeNetworkTenantId != that1.HomeNetworkTenantId {
		return false
	}
	return true
}
func (this *SetPolicyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetPolicyRequest)
	if !ok {
		that2, ok := that.(SetPolicyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *GetPolicyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPolicyResponse)
	if !ok {
		that2, ok := that.(GetPolicyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Policy.Equal(that1.Policy) {
		return false
	}
	return true
}
func (this *PublishUplinkMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublishUplinkMessageRequest)
	if !ok {
		that2, ok := that.(PublishUplinkMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *PublishUplinkMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublishUplinkMessageResponse)
	if !ok {
		that2, ok := that.(PublishUplinkMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *PublishDownlinkMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublishDownlinkMessageRequest)
	if !ok {
		that2, ok := that.(PublishDownlinkMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if this.HomeNetworkClusterId != that1.HomeNetworkClusterId {
		return false
	}
	if this.HomeNetworkTenantId != that1.HomeNetworkTenantId {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *PublishDownlinkMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublishDownlinkMessageResponse)
	if !ok {
		that2, ok := that.(PublishDownlinkMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SubscribeForwarderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeForwarderRequest)
	if !ok {
		that2, ok := that.(SubscribeForwarderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderClusterId != that1.ForwarderClusterId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if this.Group != that1.Group {
		return false
	}
	return true
}
func (this *SubscribeHomeNetworkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeHomeNetworkRequest)
	if !ok {
		that2, ok := that.(SubscribeHomeNetworkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if this.HomeNetworkClusterId != that1.HomeNetworkClusterId {
		return false
	}
	if this.HomeNetworkTenantId != that1.HomeNetworkTenantId {
		return false
	}
	if len(this.Filters) != len(that1.Filters) {
		return false
	}
	for i := range this.Filters {
		if !this.Filters[i].Equal(that1.Filters[i]) {
			return false
		}
	}
	if this.Group != that1.Group {
		return false
	}
	return true
}
func (this *RouteUplinkMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteUplinkMessageRequest)
	if !ok {
		that2, ok := that.(RouteUplinkMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *RouteDownlinkMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteDownlinkMessageRequest)
	if !ok {
		that2, ok := that.(RouteDownlinkMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *RouteMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteMessageResponse)
	if !ok {
		that2, ok := that.(RouteMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *ListRoutesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoutesRequest)
	if !ok {
		that2, ok := that.(ListRoutesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreatedSince.Equal(that1.CreatedSince) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ListRoutesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoutesResponse)
	if !ok {
		that2, ok := that.(ListRoutesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(that1.Routes[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PolicyManagerClient is the client API for PolicyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicyManagerClient interface {
	// List the Default Routing Policies.
	ListDefaultPolicies(ctx context.Context, in *ListDefaultPoliciesRequest, opts ...grpc.CallOption) (*ListDefaultPoliciesResponse, error)
	// Get the Default Routing Policy.
	GetDefaultPolicy(ctx context.Context, in *GetDefaultPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Set the Default Routing Policy.
	SetDefaultPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// List the Routing Policies with Home Networks.
	ListHomeNetworkPolicies(ctx context.Context, in *ListHomeNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListHomeNetworkPoliciesResponse, error)
	// Get the Routing Policy with the Home Network.
	GetHomeNetworkPolicy(ctx context.Context, in *GetHomeNetworkPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Set the Routing Policy with the Home Network.
	SetHomeNetworkPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type policyManagerClient struct {
	cc *grpc.ClientConn
}

func NewPolicyManagerClient(cc *grpc.ClientConn) PolicyManagerClient {
	return &policyManagerClient{cc}
}

func (c *policyManagerClient) ListDefaultPolicies(ctx context.Context, in *ListDefaultPoliciesRequest, opts ...grpc.CallOption) (*ListDefaultPoliciesResponse, error) {
	out := new(ListDefaultPoliciesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListDefaultPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetDefaultPolicy(ctx context.Context, in *GetDefaultPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/GetDefaultPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) SetDefaultPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/SetDefaultPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) ListHomeNetworkPolicies(ctx context.Context, in *ListHomeNetworkPoliciesRequest, opts ...grpc.CallOption) (*ListHomeNetworkPoliciesResponse, error) {
	out := new(ListHomeNetworkPoliciesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/ListHomeNetworkPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) GetHomeNetworkPolicy(ctx context.Context, in *GetHomeNetworkPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/GetHomeNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyManagerClient) SetHomeNetworkPolicy(ctx context.Context, in *SetPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.PolicyManager/SetHomeNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyManagerServer is the server API for PolicyManager service.
type PolicyManagerServer interface {
	// List the Default Routing Policies.
	ListDefaultPolicies(context.Context, *ListDefaultPoliciesRequest) (*ListDefaultPoliciesResponse, error)
	// Get the Default Routing Policy.
	GetDefaultPolicy(context.Context, *GetDefaultPolicyRequest) (*GetPolicyResponse, error)
	// Set the Default Routing Policy.
	SetDefaultPolicy(context.Context, *SetPolicyRequest) (*types.Empty, error)
	// List the Routing Policies with Home Networks.
	ListHomeNetworkPolicies(context.Context, *ListHomeNetworkPoliciesRequest) (*ListHomeNetworkPoliciesResponse, error)
	// Get the Routing Policy with the Home Network.
	GetHomeNetworkPolicy(context.Context, *GetHomeNetworkPolicyRequest) (*GetPolicyResponse, error)
	// Set the Routing Policy with the Home Network.
	SetHomeNetworkPolicy(context.Context, *SetPolicyRequest) (*types.Empty, error)
}

// UnimplementedPolicyManagerServer can be embedded to have forward compatible implementations.
type UnimplementedPolicyManagerServer struct {
}

func (*UnimplementedPolicyManagerServer) ListDefaultPolicies(ctx context.Context, req *ListDefaultPoliciesRequest) (*ListDefaultPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefaultPolicies not implemented")
}
func (*UnimplementedPolicyManagerServer) GetDefaultPolicy(ctx context.Context, req *GetDefaultPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPolicy not implemented")
}
func (*UnimplementedPolicyManagerServer) SetDefaultPolicy(ctx context.Context, req *SetPolicyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPolicy not implemented")
}
func (*UnimplementedPolicyManagerServer) ListHomeNetworkPolicies(ctx context.Context, req *ListHomeNetworkPoliciesRequest) (*ListHomeNetworkPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworkPolicies not implemented")
}
func (*UnimplementedPolicyManagerServer) GetHomeNetworkPolicy(ctx context.Context, req *GetHomeNetworkPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomeNetworkPolicy not implemented")
}
func (*UnimplementedPolicyManagerServer) SetHomeNetworkPolicy(ctx context.Context, req *SetPolicyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomeNetworkPolicy not implemented")
}

func RegisterPolicyManagerServer(s *grpc.Server, srv PolicyManagerServer) {
	s.RegisterService(&_PolicyManager_serviceDesc, srv)
}

func _PolicyManager_ListDefaultPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefaultPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListDefaultPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListDefaultPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListDefaultPolicies(ctx, req.(*ListDefaultPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetDefaultPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetDefaultPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/GetDefaultPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetDefaultPolicy(ctx, req.(*GetDefaultPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_SetDefaultPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).SetDefaultPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/SetDefaultPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).SetDefaultPolicy(ctx, req.(*SetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_ListHomeNetworkPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomeNetworkPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).ListHomeNetworkPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/ListHomeNetworkPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).ListHomeNetworkPolicies(ctx, req.(*ListHomeNetworkPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_GetHomeNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomeNetworkPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).GetHomeNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/GetHomeNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).GetHomeNetworkPolicy(ctx, req.(*GetHomeNetworkPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyManager_SetHomeNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyManagerServer).SetHomeNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.PolicyManager/SetHomeNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyManagerServer).SetHomeNetworkPolicy(ctx, req.(*SetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.PolicyManager",
	HandlerType: (*PolicyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDefaultPolicies",
			Handler:    _PolicyManager_ListDefaultPolicies_Handler,
		},
		{
			MethodName: "GetDefaultPolicy",
			Handler:    _PolicyManager_GetDefaultPolicy_Handler,
		},
		{
			MethodName: "SetDefaultPolicy",
			Handler:    _PolicyManager_SetDefaultPolicy_Handler,
		},
		{
			MethodName: "ListHomeNetworkPolicies",
			Handler:    _PolicyManager_ListHomeNetworkPolicies_Handler,
		},
		{
			MethodName: "GetHomeNetworkPolicy",
			Handler:    _PolicyManager_GetHomeNetworkPolicy_Handler,
		},
		{
			MethodName: "SetHomeNetworkPolicy",
			Handler:    _PolicyManager_SetHomeNetworkPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// ForwarderDataClient is the client API for ForwarderData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForwarderDataClient interface {
	// Publish an uplink message.
	Publish(ctx context.Context, in *PublishUplinkMessageRequest, opts ...grpc.CallOption) (*PublishUplinkMessageResponse, error)
	// Subscribe to routed downlink messages.
	Subscribe(ctx context.Context, in *SubscribeForwarderRequest, opts ...grpc.CallOption) (ForwarderData_SubscribeClient, error)
}

type forwarderDataClient struct {
	cc *grpc.ClientConn
}

func NewForwarderDataClient(cc *grpc.ClientConn) ForwarderDataClient {
	return &forwarderDataClient{cc}
}

func (c *forwarderDataClient) Publish(ctx context.Context, in *PublishUplinkMessageRequest, opts ...grpc.CallOption) (*PublishUplinkMessageResponse, error) {
	out := new(PublishUplinkMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.ForwarderData/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwarderDataClient) Subscribe(ctx context.Context, in *SubscribeForwarderRequest, opts ...grpc.CallOption) (ForwarderData_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ForwarderData_serviceDesc.Streams[0], "/org.packetbroker.routing.v1.ForwarderData/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwarderDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ForwarderData_SubscribeClient interface {
	Recv() (*v3.RoutedDownlinkMessage, error)
	grpc.ClientStream
}

type forwarderDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *forwarderDataSubscribeClient) Recv() (*v3.RoutedDownlinkMessage, error) {
	m := new(v3.RoutedDownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForwarderDataServer is the server API for ForwarderData service.
type ForwarderDataServer interface {
	// Publish an uplink message.
	Publish(context.Context, *PublishUplinkMessageRequest) (*PublishUplinkMessageResponse, error)
	// Subscribe to routed downlink messages.
	Subscribe(*SubscribeForwarderRequest, ForwarderData_SubscribeServer) error
}

// UnimplementedForwarderDataServer can be embedded to have forward compatible implementations.
type UnimplementedForwarderDataServer struct {
}

func (*UnimplementedForwarderDataServer) Publish(ctx context.Context, req *PublishUplinkMessageRequest) (*PublishUplinkMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedForwarderDataServer) Subscribe(req *SubscribeForwarderRequest, srv ForwarderData_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterForwarderDataServer(s *grpc.Server, srv ForwarderDataServer) {
	s.RegisterService(&_ForwarderData_serviceDesc, srv)
}

func _ForwarderData_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishUplinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwarderDataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.ForwarderData/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwarderDataServer).Publish(ctx, req.(*PublishUplinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForwarderData_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeForwarderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForwarderDataServer).Subscribe(m, &forwarderDataSubscribeServer{stream})
}

type ForwarderData_SubscribeServer interface {
	Send(*v3.RoutedDownlinkMessage) error
	grpc.ServerStream
}

type forwarderDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *forwarderDataSubscribeServer) Send(m *v3.RoutedDownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _ForwarderData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.ForwarderData",
	HandlerType: (*ForwarderDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ForwarderData_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ForwarderData_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// HomeNetworkDataClient is the client API for HomeNetworkData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HomeNetworkDataClient interface {
	// Publish a downlink message.
	Publish(ctx context.Context, in *PublishDownlinkMessageRequest, opts ...grpc.CallOption) (*PublishDownlinkMessageResponse, error)
	// Subscribe to routed uplink messages.
	Subscribe(ctx context.Context, in *SubscribeHomeNetworkRequest, opts ...grpc.CallOption) (HomeNetworkData_SubscribeClient, error)
}

type homeNetworkDataClient struct {
	cc *grpc.ClientConn
}

func NewHomeNetworkDataClient(cc *grpc.ClientConn) HomeNetworkDataClient {
	return &homeNetworkDataClient{cc}
}

func (c *homeNetworkDataClient) Publish(ctx context.Context, in *PublishDownlinkMessageRequest, opts ...grpc.CallOption) (*PublishDownlinkMessageResponse, error) {
	out := new(PublishDownlinkMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.HomeNetworkData/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homeNetworkDataClient) Subscribe(ctx context.Context, in *SubscribeHomeNetworkRequest, opts ...grpc.CallOption) (HomeNetworkData_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HomeNetworkData_serviceDesc.Streams[0], "/org.packetbroker.routing.v1.HomeNetworkData/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &homeNetworkDataSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HomeNetworkData_SubscribeClient interface {
	Recv() (*v3.RoutedUplinkMessage, error)
	grpc.ClientStream
}

type homeNetworkDataSubscribeClient struct {
	grpc.ClientStream
}

func (x *homeNetworkDataSubscribeClient) Recv() (*v3.RoutedUplinkMessage, error) {
	m := new(v3.RoutedUplinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HomeNetworkDataServer is the server API for HomeNetworkData service.
type HomeNetworkDataServer interface {
	// Publish a downlink message.
	Publish(context.Context, *PublishDownlinkMessageRequest) (*PublishDownlinkMessageResponse, error)
	// Subscribe to routed uplink messages.
	Subscribe(*SubscribeHomeNetworkRequest, HomeNetworkData_SubscribeServer) error
}

// UnimplementedHomeNetworkDataServer can be embedded to have forward compatible implementations.
type UnimplementedHomeNetworkDataServer struct {
}

func (*UnimplementedHomeNetworkDataServer) Publish(ctx context.Context, req *PublishDownlinkMessageRequest) (*PublishDownlinkMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedHomeNetworkDataServer) Subscribe(req *SubscribeHomeNetworkRequest, srv HomeNetworkData_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterHomeNetworkDataServer(s *grpc.Server, srv HomeNetworkDataServer) {
	s.RegisterService(&_HomeNetworkData_serviceDesc, srv)
}

func _HomeNetworkData_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomeNetworkDataServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.HomeNetworkData/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomeNetworkDataServer).Publish(ctx, req.(*PublishDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomeNetworkData_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeHomeNetworkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HomeNetworkDataServer).Subscribe(m, &homeNetworkDataSubscribeServer{stream})
}

type HomeNetworkData_SubscribeServer interface {
	Send(*v3.RoutedUplinkMessage) error
	grpc.ServerStream
}

type homeNetworkDataSubscribeServer struct {
	grpc.ServerStream
}

func (x *homeNetworkDataSubscribeServer) Send(m *v3.RoutedUplinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _HomeNetworkData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.HomeNetworkData",
	HandlerType: (*HomeNetworkDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _HomeNetworkData_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _HomeNetworkData_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// RouterDataClient is the client API for RouterData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterDataClient interface {
	// Route an uplink message.
	RouteUplink(ctx context.Context, in *RouteUplinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
	// Route a downlink message.
	RouteDownlink(ctx context.Context, in *RouteDownlinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
}

type routerDataClient struct {
	cc *grpc.ClientConn
}

func NewRouterDataClient(cc *grpc.ClientConn) RouterDataClient {
	return &routerDataClient{cc}
}

func (c *routerDataClient) RouteUplink(ctx context.Context, in *RouteUplinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.RouterData/RouteUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerDataClient) RouteDownlink(ctx context.Context, in *RouteDownlinkMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.RouterData/RouteDownlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterDataServer is the server API for RouterData service.
type RouterDataServer interface {
	// Route an uplink message.
	RouteUplink(context.Context, *RouteUplinkMessageRequest) (*RouteMessageResponse, error)
	// Route a downlink message.
	RouteDownlink(context.Context, *RouteDownlinkMessageRequest) (*RouteMessageResponse, error)
}

// UnimplementedRouterDataServer can be embedded to have forward compatible implementations.
type UnimplementedRouterDataServer struct {
}

func (*UnimplementedRouterDataServer) RouteUplink(ctx context.Context, req *RouteUplinkMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteUplink not implemented")
}
func (*UnimplementedRouterDataServer) RouteDownlink(ctx context.Context, req *RouteDownlinkMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteDownlink not implemented")
}

func RegisterRouterDataServer(s *grpc.Server, srv RouterDataServer) {
	s.RegisterService(&_RouterData_serviceDesc, srv)
}

func _RouterData_RouteUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteUplinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterDataServer).RouteUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.RouterData/RouteUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterDataServer).RouteUplink(ctx, req.(*RouteUplinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterData_RouteDownlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteDownlinkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterDataServer).RouteDownlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.RouterData/RouteDownlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterDataServer).RouteDownlink(ctx, req.(*RouteDownlinkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.RouterData",
	HandlerType: (*RouterDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouteUplink",
			Handler:    _RouterData_RouteUplink_Handler,
		},
		{
			MethodName: "RouteDownlink",
			Handler:    _RouterData_RouteDownlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoutesClient interface {
	// Returns the routes.
	ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
}

type routesClient struct {
	cc *grpc.ClientConn
}

func NewRoutesClient(cc *grpc.ClientConn) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.routing.v1.Routes/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
type RoutesServer interface {
	// Returns the routes.
	ListRoutes(context.Context, *ListRoutesRequest) (*ListRoutesResponse, error)
}

// UnimplementedRoutesServer can be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (*UnimplementedRoutesServer) ListRoutes(ctx context.Context, req *ListRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}

func RegisterRoutesServer(s *grpc.Server, srv RoutesServer) {
	s.RegisterService(&_Routes_serviceDesc, srv)
}

func _Routes_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.routing.v1.Routes/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ListRoutes(ctx, req.(*ListRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Routes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.routing.v1.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoutes",
			Handler:    _Routes_ListRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/routing/v1/service.proto",
}

func (m *ListDefaultPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDefaultPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDefaultPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.UpdatedSince != nil {
		{
			size, err := m.UpdatedSince.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDefaultPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDefaultPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDefaultPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetDefaultPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDefaultPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDefaultPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHomeNetworkPoliciesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHomeNetworkPoliciesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHomeNetworkPoliciesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.UpdatedSince != nil {
		{
			size, err := m.UpdatedSince.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHomeNetworkPoliciesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHomeNetworkPoliciesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHomeNetworkPoliciesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetHomeNetworkPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHomeNetworkPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHomeNetworkPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HomeNetworkTenantId) > 0 {
		i -= len(m.HomeNetworkTenantId)
		copy(dAtA[i:], m.HomeNetworkTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.HomeNetworkTenantId)))
		i--
		dAtA[i] = 0x22
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *GetPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishUplinkMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishUplinkMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishUplinkMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishUplinkMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishUplinkMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishUplinkMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishDownlinkMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishDownlinkMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishDownlinkMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.HomeNetworkTenantId) > 0 {
		i -= len(m.HomeNetworkTenantId)
		copy(dAtA[i:], m.HomeNetworkTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.HomeNetworkTenantId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HomeNetworkClusterId) > 0 {
		i -= len(m.HomeNetworkClusterId)
		copy(dAtA[i:], m.HomeNetworkClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.HomeNetworkClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PublishDownlinkMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishDownlinkMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishDownlinkMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeForwarderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeForwarderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForwarderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintService(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForwarderClusterId) > 0 {
		i -= len(m.ForwarderClusterId)
		copy(dAtA[i:], m.ForwarderClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ForwarderClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeHomeNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeHomeNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeHomeNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintService(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Filters) > 0 {
		for iNdEx := len(m.Filters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Filters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.HomeNetworkTenantId) > 0 {
		i -= len(m.HomeNetworkTenantId)
		copy(dAtA[i:], m.HomeNetworkTenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.HomeNetworkTenantId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HomeNetworkClusterId) > 0 {
		i -= len(m.HomeNetworkClusterId)
		copy(dAtA[i:], m.HomeNetworkClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.HomeNetworkClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteUplinkMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteUplinkMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteUplinkMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteDownlinkMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteDownlinkMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteDownlinkMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RouteMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.CreatedSince != nil {
		{
			size, err := m.CreatedSince.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRoutesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoutesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoutesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedListDefaultPoliciesRequest(r randyService, easy bool) *ListDefaultPoliciesRequest {
	this := &ListDefaultPoliciesRequest{}
	if r.Intn(5) != 0 {
		this.UpdatedSince = types.NewPopulatedTimestamp(r, easy)
	}
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListDefaultPoliciesResponse(r randyService, easy bool) *ListDefaultPoliciesResponse {
	this := &ListDefaultPoliciesResponse{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Policies = make([]*v3.RoutingPolicy, v1)
		for i := 0; i < v1; i++ {
			this.Policies[i] = v3.NewPopulatedRoutingPolicy(r, easy)
		}
	}
	this.Total = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDefaultPolicyRequest(r randyService, easy bool) *GetDefaultPolicyRequest {
	this := &GetDefaultPolicyRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderTenantId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListHomeNetworkPoliciesRequest(r randyService, easy bool) *ListHomeNetworkPoliciesRequest {
	this := &ListHomeNetworkPoliciesRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderTenantId = string(randStringService(r))
	if r.Intn(5) != 0 {
		this.UpdatedSince = types.NewPopulatedTimestamp(r, easy)
	}
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListHomeNetworkPoliciesResponse(r randyService, easy bool) *ListHomeNetworkPoliciesResponse {
	this := &ListHomeNetworkPoliciesResponse{}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Policies = make([]*v3.RoutingPolicy, v2)
		for i := 0; i < v2; i++ {
			this.Policies[i] = v3.NewPopulatedRoutingPolicy(r, easy)
		}
	}
	this.Total = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetHomeNetworkPolicyRequest(r randyService, easy bool) *GetHomeNetworkPolicyRequest {
	this := &GetHomeNetworkPolicyRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderTenantId = string(randStringService(r))
	this.HomeNetworkNetId = uint32(r.Uint32())
	this.HomeNetworkTenantId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetPolicyRequest(r randyService, easy bool) *SetPolicyRequest {
	this := &SetPolicyRequest{}
	if r.Intn(5) != 0 {
		this.Policy = v3.NewPopulatedRoutingPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetPolicyResponse(r randyService, easy bool) *GetPolicyResponse {
	this := &GetPolicyResponse{}
	if r.Intn(5) != 0 {
		this.Policy = v3.NewPopulatedRoutingPolicy(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPublishUplinkMessageRequest(r randyService, easy bool) *PublishUplinkMessageRequest {
	this := &PublishUplinkMessageRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	this.ForwarderTenantId = string(randStringService(r))
	if r.Intn(5) != 0 {
		this.Message = v3.NewPopulatedUplinkMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPublishUplinkMessageResponse(r randyService, easy bool) *PublishUplinkMessageResponse {
	this := &PublishUplinkMessageResponse{}
	this.Id = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPublishDownlinkMessageRequest(r randyService, easy bool) *PublishDownlinkMessageRequest {
	this := &PublishDownlinkMessageRequest{}
	this.HomeNetworkNetId = uint32(r.Uint32())
	this.HomeNetworkClusterId = string(randStringService(r))
	this.HomeNetworkTenantId = string(randStringService(r))
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	this.ForwarderTenantId = string(randStringService(r))
	if r.Intn(5) != 0 {
		this.Message = v3.NewPopulatedDownlinkMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPublishDownlinkMessageResponse(r randyService, easy bool) *PublishDownlinkMessageResponse {
	this := &PublishDownlinkMessageResponse{}
	this.Id = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubscribeForwarderRequest(r randyService, easy bool) *SubscribeForwarderRequest {
	this := &SubscribeForwarderRequest{}
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderClusterId = string(randStringService(r))
	this.ForwarderTenantId = string(randStringService(r))
	this.Group = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubscribeHomeNetworkRequest(r randyService, easy bool) *SubscribeHomeNetworkRequest {
	this := &SubscribeHomeNetworkRequest{}
	this.HomeNetworkNetId = uint32(r.Uint32())
	this.HomeNetworkClusterId = string(randStringService(r))
	this.HomeNetworkTenantId = string(randStringService(r))
	if r.Intn(5) != 0 {
		i3 := r.Intn(5)
		this.Filters = make([]*v3.RoutingFilter, i3)
		for i := 0; i < i3; i++ {
			this.Filters[i] = v3.NewPopulatedRoutingFilter(r, easy)
		}
	}
	this.Group = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteUplinkMessageRequest(r randyService, easy bool) *RouteUplinkMessageRequest {
	this := &RouteUplinkMessageRequest{}
	if r.Intn(5) != 0 {
		this.Message = v3.NewPopulatedRoutedUplinkMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteDownlinkMessageRequest(r randyService, easy bool) *RouteDownlinkMessageRequest {
	this := &RouteDownlinkMessageRequest{}
	if r.Intn(5) != 0 {
		this.Message = v3.NewPopulatedRoutedDownlinkMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRouteMessageResponse(r randyService, easy bool) *RouteMessageResponse {
	this := &RouteMessageResponse{}
	this.State = v3.MessageDeliveryState([]int32{0, 1, 2, 3}[r.Intn(4)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListRoutesRequest(r randyService, easy bool) *ListRoutesRequest {
	this := &ListRoutesRequest{}
	if r.Intn(5) != 0 {
		this.CreatedSince = types.NewPopulatedTimestamp(r, easy)
	}
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListRoutesResponse(r randyService, easy bool) *ListRoutesResponse {
	this := &ListRoutesResponse{}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.Routes = make([]*v3.DevAddrPrefixRoute, v4)
		for i := 0; i < v4; i++ {
			this.Routes[i] = v3.NewPopulatedDevAddrPrefixRoute(r, easy)
		}
	}
	this.Total = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneService(r randyService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringService(r randyService) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneService(r)
	}
	return string(tmps)
}
func randUnrecognizedService(r randyService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldService(dAtA []byte, r randyService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateService(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ListDefaultPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatedSince != nil {
		l = m.UpdatedSince.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	return n
}

func (m *ListDefaultPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	return n
}

func (m *GetDefaultPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListHomeNetworkPoliciesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.UpdatedSince != nil {
		l = m.UpdatedSince.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	return n
}

func (m *ListHomeNetworkPoliciesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	return n
}

func (m *GetHomeNetworkPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	l = len(m.HomeNetworkTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SetPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *GetPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PublishUplinkMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PublishUplinkMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PublishDownlinkMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	l = len(m.HomeNetworkClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.HomeNetworkTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *PublishDownlinkMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SubscribeForwarderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwarderNetId != 0 {
		n += 1 + sovService(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *SubscribeHomeNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovService(uint64(m.HomeNetworkNetId))
	}
	l = len(m.HomeNetworkClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.HomeNetworkTenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RouteUplinkMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RouteDownlinkMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *RouteMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovService(uint64(m.State))
	}
	return n
}

func (m *ListRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedSince != nil {
		l = m.CreatedSince.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	return n
}

func (m *ListRoutesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListDefaultPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDefaultPoliciesRequest{`,
		`UpdatedSince:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedSince), "Timestamp", "types.Timestamp", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDefaultPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicies := "[]*RoutingPolicy{"
	for _, f := range this.Policies {
		repeatedStringForPolicies += strings.Replace(fmt.Sprintf("%v", f), "RoutingPolicy", "v3.RoutingPolicy", 1) + ","
	}
	repeatedStringForPolicies += "}"
	s := strings.Join([]string{`&ListDefaultPoliciesResponse{`,
		`Policies:` + repeatedStringForPolicies + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDefaultPolicyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDefaultPolicyRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHomeNetworkPoliciesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListHomeNetworkPoliciesRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`UpdatedSince:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedSince), "Timestamp", "types.Timestamp", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHomeNetworkPoliciesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicies := "[]*RoutingPolicy{"
	for _, f := range this.Policies {
		repeatedStringForPolicies += strings.Replace(fmt.Sprintf("%v", f), "RoutingPolicy", "v3.RoutingPolicy", 1) + ","
	}
	repeatedStringForPolicies += "}"
	s := strings.Join([]string{`&ListHomeNetworkPoliciesResponse{`,
		`Policies:` + repeatedStringForPolicies + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHomeNetworkPolicyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHomeNetworkPolicyRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`HomeNetworkTenantId:` + fmt.Sprintf("%v", this.HomeNetworkTenantId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetPolicyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetPolicyRequest{`,
		`Policy:` + strings.Replace(fmt.Sprintf("%v", this.Policy), "RoutingPolicy", "v3.RoutingPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPolicyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPolicyResponse{`,
		`Policy:` + strings.Replace(fmt.Sprintf("%v", this.Policy), "RoutingPolicy", "v3.RoutingPolicy", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishUplinkMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishUplinkMessageRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "UplinkMessage", "v3.UplinkMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishUplinkMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishUplinkMessageResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishDownlinkMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishDownlinkMessageRequest{`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`HomeNetworkClusterId:` + fmt.Sprintf("%v", this.HomeNetworkClusterId) + `,`,
		`HomeNetworkTenantId:` + fmt.Sprintf("%v", this.HomeNetworkTenantId) + `,`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "DownlinkMessage", "v3.DownlinkMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishDownlinkMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishDownlinkMessageResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeForwarderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeForwarderRequest{`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderClusterId:` + fmt.Sprintf("%v", this.ForwarderClusterId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeHomeNetworkRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFilters := "[]*RoutingFilter{"
	for _, f := range this.Filters {
		repeatedStringForFilters += strings.Replace(fmt.Sprintf("%v", f), "RoutingFilter", "v3.RoutingFilter", 1) + ","
	}
	repeatedStringForFilters += "}"
	s := strings.Join([]string{`&SubscribeHomeNetworkRequest{`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`HomeNetworkClusterId:` + fmt.Sprintf("%v", this.HomeNetworkClusterId) + `,`,
		`HomeNetworkTenantId:` + fmt.Sprintf("%v", this.HomeNetworkTenantId) + `,`,
		`Filters:` + repeatedStringForFilters + `,`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteUplinkMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteUplinkMessageRequest{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "RoutedUplinkMessage", "v3.RoutedUplinkMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteDownlinkMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteDownlinkMessageRequest{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "RoutedDownlinkMessage", "v3.RoutedDownlinkMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteMessageResponse{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoutesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoutesRequest{`,
		`CreatedSince:` + strings.Replace(fmt.Sprintf("%v", this.CreatedSince), "Timestamp", "types.Timestamp", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoutesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutes := "[]*DevAddrPrefixRoute{"
	for _, f := range this.Routes {
		repeatedStringForRoutes += strings.Replace(fmt.Sprintf("%v", f), "DevAddrPrefixRoute", "v3.DevAddrPrefixRoute", 1) + ","
	}
	repeatedStringForRoutes += "}"
	s := strings.Join([]string{`&ListRoutesResponse{`,
		`Routes:` + repeatedStringForRoutes + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListDefaultPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDefaultPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDefaultPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedSince", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedSince == nil {
				m.UpdatedSince = &types.Timestamp{}
			}
			if err := m.UpdatedSince.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDefaultPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDefaultPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDefaultPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &v3.RoutingPolicy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDefaultPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDefaultPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDefaultPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHomeNetworkPoliciesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHomeNetworkPoliciesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHomeNetworkPoliciesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedSince", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedSince == nil {
				m.UpdatedSince = &types.Timestamp{}
			}
			if err := m.UpdatedSince.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHomeNetworkPoliciesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHomeNetworkPoliciesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHomeNetworkPoliciesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, &v3.RoutingPolicy{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHomeNetworkPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHomeNetworkPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHomeNetworkPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &v3.RoutingPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &v3.RoutingPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishUplinkMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishUplinkMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishUplinkMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &v3.UplinkMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishUplinkMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishUplinkMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishUplinkMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishDownlinkMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishDownlinkMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishDownlinkMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &v3.DownlinkMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishDownlinkMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishDownlinkMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishDownlinkMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeForwarderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeForwarderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeForwarderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeHomeNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeHomeNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeHomeNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &v3.RoutingFilter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteUplinkMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteUplinkMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteUplinkMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &v3.RoutedUplinkMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteDownlinkMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteDownlinkMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteDownlinkMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &v3.RoutedDownlinkMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v3.MessageDeliveryState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedSince", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedSince == nil {
				m.CreatedSince = &types.Timestamp{}
			}
			if err := m.CreatedSince.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoutesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoutesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoutesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &v3.DevAddrPrefixRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
