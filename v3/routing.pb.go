// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.8
// source: packetbroker/api/v3/routing.proto

package packetbroker

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DevAddrPrefixRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Prefix of the route.
	Prefix *DevAddrPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Tenant ID assigned by the Member (optional).
	TenantId string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Timestamp when the route was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Cluster of the Home Network Member (optional).
	HomeNetworkClusterId string `protobuf:"bytes,5,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// Target information (optional).
	Target *Target `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *DevAddrPrefixRoute) Reset() {
	*x = DevAddrPrefixRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevAddrPrefixRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevAddrPrefixRoute) ProtoMessage() {}

func (x *DevAddrPrefixRoute) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevAddrPrefixRoute.ProtoReflect.Descriptor instead.
func (*DevAddrPrefixRoute) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{0}
}

func (x *DevAddrPrefixRoute) GetPrefix() *DevAddrPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *DevAddrPrefixRoute) GetNetId() uint32 {
	if x != nil {
		return x.NetId
	}
	return 0
}

func (x *DevAddrPrefixRoute) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DevAddrPrefixRoute) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DevAddrPrefixRoute) GetHomeNetworkClusterId() string {
	if x != nil {
		return x.HomeNetworkClusterId
	}
	return ""
}

func (x *DevAddrPrefixRoute) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

// Routing policy between a Forwarder and a Home Network.
type RoutingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,2,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,3,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,4,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Timestamp when the policy got last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Uplink policy.
	Uplink *RoutingPolicy_Uplink `protobuf:"bytes,5,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// Downlink policy.
	Downlink *RoutingPolicy_Downlink `protobuf:"bytes,6,opt,name=downlink,proto3" json:"downlink,omitempty"`
}

func (x *RoutingPolicy) Reset() {
	*x = RoutingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy) ProtoMessage() {}

func (x *RoutingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy.ProtoReflect.Descriptor instead.
func (*RoutingPolicy) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{1}
}

func (x *RoutingPolicy) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *RoutingPolicy) GetForwarderTenantId() string {
	if x != nil {
		return x.ForwarderTenantId
	}
	return ""
}

func (x *RoutingPolicy) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *RoutingPolicy) GetHomeNetworkTenantId() string {
	if x != nil {
		return x.HomeNetworkTenantId
	}
	return ""
}

func (x *RoutingPolicy) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RoutingPolicy) GetUplink() *RoutingPolicy_Uplink {
	if x != nil {
		return x.Uplink
	}
	return nil
}

func (x *RoutingPolicy) GetDownlink() *RoutingPolicy_Downlink {
	if x != nil {
		return x.Downlink
	}
	return nil
}

// Filter for Home Networks to subscribe to forwarded messages.
type RoutingFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*RoutingFilter_JoinRequest_
	//	*RoutingFilter_Mac
	Message isRoutingFilter_Message `protobuf_oneof:"message"`
	// Pass gateway metadata. If not set, pass gateway metadata if available.
	GatewayMetadata *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=gateway_metadata,json=gatewayMetadata,proto3" json:"gateway_metadata,omitempty"`
}

func (x *RoutingFilter) Reset() {
	*x = RoutingFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingFilter) ProtoMessage() {}

func (x *RoutingFilter) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingFilter.ProtoReflect.Descriptor instead.
func (*RoutingFilter) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{2}
}

func (m *RoutingFilter) GetMessage() isRoutingFilter_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *RoutingFilter) GetJoinRequest() *RoutingFilter_JoinRequest {
	if x, ok := x.GetMessage().(*RoutingFilter_JoinRequest_); ok {
		return x.JoinRequest
	}
	return nil
}

func (x *RoutingFilter) GetMac() *RoutingFilter_MACPayload {
	if x, ok := x.GetMessage().(*RoutingFilter_Mac); ok {
		return x.Mac
	}
	return nil
}

func (x *RoutingFilter) GetGatewayMetadata() *wrapperspb.BoolValue {
	if x != nil {
		return x.GatewayMetadata
	}
	return nil
}

type isRoutingFilter_Message interface {
	isRoutingFilter_Message()
}

type RoutingFilter_JoinRequest_ struct {
	JoinRequest *RoutingFilter_JoinRequest `protobuf:"bytes,3,opt,name=join_request,json=joinRequest,proto3,oneof"`
}

type RoutingFilter_Mac struct {
	Mac *RoutingFilter_MACPayload `protobuf:"bytes,4,opt,name=mac,proto3,oneof"`
}

func (*RoutingFilter_JoinRequest_) isRoutingFilter_Message() {}

func (*RoutingFilter_Mac) isRoutingFilter_Message() {}

type RouteHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time when the server received the message.
	ReceivedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	// Sender of the message, typically the authorized client identifier.
	SenderName string `protobuf:"bytes,2,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	// Sender IP address or host name.
	SenderAddress string `protobuf:"bytes,3,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// Receiver of the message.
	ReceiverName string `protobuf:"bytes,4,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	// Receiver agent.
	ReceiverAgent string `protobuf:"bytes,5,opt,name=receiver_agent,json=receiverAgent,proto3" json:"receiver_agent,omitempty"`
}

func (x *RouteHop) Reset() {
	*x = RouteHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteHop) ProtoMessage() {}

func (x *RouteHop) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteHop.ProtoReflect.Descriptor instead.
func (*RouteHop) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{3}
}

func (x *RouteHop) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *RouteHop) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *RouteHop) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *RouteHop) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *RouteHop) GetReceiverAgent() string {
	if x != nil {
		return x.ReceiverAgent
	}
	return ""
}

// Uplink message routed from a Forwarder to a Home Network.
type RoutedUplinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message identifier generated by the Router.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,2,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,3,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,4,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,5,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,9,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	// This value is empty if it cannot be determined by the Router.
	HomeNetworkTenantId string `protobuf:"bytes,6,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Uplink message.
	Message *UplinkMessage `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	// Hops that the message passed. Each Router appends an entry.
	Hops []*RouteHop `protobuf:"bytes,8,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (x *RoutedUplinkMessage) Reset() {
	*x = RoutedUplinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutedUplinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutedUplinkMessage) ProtoMessage() {}

func (x *RoutedUplinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutedUplinkMessage.ProtoReflect.Descriptor instead.
func (*RoutedUplinkMessage) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{4}
}

func (x *RoutedUplinkMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoutedUplinkMessage) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *RoutedUplinkMessage) GetForwarderTenantId() string {
	if x != nil {
		return x.ForwarderTenantId
	}
	return ""
}

func (x *RoutedUplinkMessage) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *RoutedUplinkMessage) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *RoutedUplinkMessage) GetHomeNetworkClusterId() string {
	if x != nil {
		return x.HomeNetworkClusterId
	}
	return ""
}

func (x *RoutedUplinkMessage) GetHomeNetworkTenantId() string {
	if x != nil {
		return x.HomeNetworkTenantId
	}
	return ""
}

func (x *RoutedUplinkMessage) GetMessage() *UplinkMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RoutedUplinkMessage) GetHops() []*RouteHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

// Downlink message routed from a Home Network to a Forwarder.
type RoutedDownlinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message identifier generated by the Router.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,2,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,9,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,3,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,4,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,5,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,6,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Downlink message.
	Message *DownlinkMessage `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	// Hops that the message passed. Each Router appends an entry.
	Hops []*RouteHop `protobuf:"bytes,8,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (x *RoutedDownlinkMessage) Reset() {
	*x = RoutedDownlinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutedDownlinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutedDownlinkMessage) ProtoMessage() {}

func (x *RoutedDownlinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutedDownlinkMessage.ProtoReflect.Descriptor instead.
func (*RoutedDownlinkMessage) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{5}
}

func (x *RoutedDownlinkMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoutedDownlinkMessage) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *RoutedDownlinkMessage) GetHomeNetworkClusterId() string {
	if x != nil {
		return x.HomeNetworkClusterId
	}
	return ""
}

func (x *RoutedDownlinkMessage) GetHomeNetworkTenantId() string {
	if x != nil {
		return x.HomeNetworkTenantId
	}
	return ""
}

func (x *RoutedDownlinkMessage) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *RoutedDownlinkMessage) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *RoutedDownlinkMessage) GetForwarderTenantId() string {
	if x != nil {
		return x.ForwarderTenantId
	}
	return ""
}

func (x *RoutedDownlinkMessage) GetMessage() *DownlinkMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *RoutedDownlinkMessage) GetHops() []*RouteHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

type UplinkMessageProcessingErrorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value UplinkMessageProcessingError `protobuf:"varint,1,opt,name=value,proto3,enum=org.packetbroker.v3.UplinkMessageProcessingError" json:"value,omitempty"`
}

func (x *UplinkMessageProcessingErrorValue) Reset() {
	*x = UplinkMessageProcessingErrorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessageProcessingErrorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessageProcessingErrorValue) ProtoMessage() {}

func (x *UplinkMessageProcessingErrorValue) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessageProcessingErrorValue.ProtoReflect.Descriptor instead.
func (*UplinkMessageProcessingErrorValue) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{6}
}

func (x *UplinkMessageProcessingErrorValue) GetValue() UplinkMessageProcessingError {
	if x != nil {
		return x.Value
	}
	return UplinkMessageProcessingError_UPLINK_UNKNOWN_ERROR
}

type UplinkMessageDeliveryStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message identifier generated by the Router.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,2,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,3,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,4,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,5,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,6,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,7,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Forwarder uplink token. This value must be copied from the UplinkMessage.
	ForwarderUplinkToken []byte `protobuf:"bytes,8,opt,name=forwarder_uplink_token,json=forwarderUplinkToken,proto3" json:"forwarder_uplink_token,omitempty"`
	// New delivery state of the message.
	State MessageDeliveryState `protobuf:"varint,9,opt,name=state,proto3,enum=org.packetbroker.v3.MessageDeliveryState" json:"state,omitempty"`
	// Any error.
	Error *UplinkMessageProcessingErrorValue `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UplinkMessageDeliveryStateChange) Reset() {
	*x = UplinkMessageDeliveryStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkMessageDeliveryStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkMessageDeliveryStateChange) ProtoMessage() {}

func (x *UplinkMessageDeliveryStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkMessageDeliveryStateChange.ProtoReflect.Descriptor instead.
func (*UplinkMessageDeliveryStateChange) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{7}
}

func (x *UplinkMessageDeliveryStateChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UplinkMessageDeliveryStateChange) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *UplinkMessageDeliveryStateChange) GetHomeNetworkClusterId() string {
	if x != nil {
		return x.HomeNetworkClusterId
	}
	return ""
}

func (x *UplinkMessageDeliveryStateChange) GetHomeNetworkTenantId() string {
	if x != nil {
		return x.HomeNetworkTenantId
	}
	return ""
}

func (x *UplinkMessageDeliveryStateChange) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *UplinkMessageDeliveryStateChange) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *UplinkMessageDeliveryStateChange) GetForwarderTenantId() string {
	if x != nil {
		return x.ForwarderTenantId
	}
	return ""
}

func (x *UplinkMessageDeliveryStateChange) GetForwarderUplinkToken() []byte {
	if x != nil {
		return x.ForwarderUplinkToken
	}
	return nil
}

func (x *UplinkMessageDeliveryStateChange) GetState() MessageDeliveryState {
	if x != nil {
		return x.State
	}
	return MessageDeliveryState_ACCEPTED
}

func (x *UplinkMessageDeliveryStateChange) GetError() *UplinkMessageProcessingErrorValue {
	if x != nil {
		return x.Error
	}
	return nil
}

type DownlinkMessageDeliveryStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message identifier generated by the Router.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,2,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Home Network cluster of the Home Network Member.
	HomeNetworkClusterId string `protobuf:"bytes,3,opt,name=home_network_cluster_id,json=homeNetworkClusterId,proto3" json:"home_network_cluster_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,4,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,5,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,6,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,7,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// Downlink token. This value must be copied from the DownlinkMessage.
	DownlinkToken []byte `protobuf:"bytes,8,opt,name=downlink_token,json=downlinkToken,proto3" json:"downlink_token,omitempty"`
	// New delivery state of the message.
	State MessageDeliveryState `protobuf:"varint,9,opt,name=state,proto3,enum=org.packetbroker.v3.MessageDeliveryState" json:"state,omitempty"`
	// Types that are assignable to Result:
	//	*DownlinkMessageDeliveryStateChange_Error
	//	*DownlinkMessageDeliveryStateChange_Success
	Result isDownlinkMessageDeliveryStateChange_Result `protobuf_oneof:"result"`
}

func (x *DownlinkMessageDeliveryStateChange) Reset() {
	*x = DownlinkMessageDeliveryStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessageDeliveryStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessageDeliveryStateChange) ProtoMessage() {}

func (x *DownlinkMessageDeliveryStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessageDeliveryStateChange.ProtoReflect.Descriptor instead.
func (*DownlinkMessageDeliveryStateChange) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{8}
}

func (x *DownlinkMessageDeliveryStateChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DownlinkMessageDeliveryStateChange) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *DownlinkMessageDeliveryStateChange) GetHomeNetworkClusterId() string {
	if x != nil {
		return x.HomeNetworkClusterId
	}
	return ""
}

func (x *DownlinkMessageDeliveryStateChange) GetHomeNetworkTenantId() string {
	if x != nil {
		return x.HomeNetworkTenantId
	}
	return ""
}

func (x *DownlinkMessageDeliveryStateChange) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *DownlinkMessageDeliveryStateChange) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *DownlinkMessageDeliveryStateChange) GetForwarderTenantId() string {
	if x != nil {
		return x.ForwarderTenantId
	}
	return ""
}

func (x *DownlinkMessageDeliveryStateChange) GetDownlinkToken() []byte {
	if x != nil {
		return x.DownlinkToken
	}
	return nil
}

func (x *DownlinkMessageDeliveryStateChange) GetState() MessageDeliveryState {
	if x != nil {
		return x.State
	}
	return MessageDeliveryState_ACCEPTED
}

func (m *DownlinkMessageDeliveryStateChange) GetResult() isDownlinkMessageDeliveryStateChange_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DownlinkMessageDeliveryStateChange) GetError() DownlinkMessageProcessingError {
	if x, ok := x.GetResult().(*DownlinkMessageDeliveryStateChange_Error); ok {
		return x.Error
	}
	return DownlinkMessageProcessingError_DOWNLINK_UNKNOWN_ERROR
}

func (x *DownlinkMessageDeliveryStateChange) GetSuccess() *DownlinkMessageDeliveryStateChange_TransmissionResult {
	if x, ok := x.GetResult().(*DownlinkMessageDeliveryStateChange_Success); ok {
		return x.Success
	}
	return nil
}

type isDownlinkMessageDeliveryStateChange_Result interface {
	isDownlinkMessageDeliveryStateChange_Result()
}

type DownlinkMessageDeliveryStateChange_Error struct {
	// Any error.
	Error DownlinkMessageProcessingError `protobuf:"varint,10,opt,name=error,proto3,enum=org.packetbroker.v3.DownlinkMessageProcessingError,oneof"`
}

type DownlinkMessageDeliveryStateChange_Success struct {
	// Transmission result.
	Success *DownlinkMessageDeliveryStateChange_TransmissionResult `protobuf:"bytes,11,opt,name=success,proto3,oneof"`
}

func (*DownlinkMessageDeliveryStateChange_Error) isDownlinkMessageDeliveryStateChange_Result() {}

func (*DownlinkMessageDeliveryStateChange_Success) isDownlinkMessageDeliveryStateChange_Result() {}

type RoutingPolicy_Uplink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Forward join-request messages.
	JoinRequest bool `protobuf:"varint,1,opt,name=join_request,json=joinRequest,proto3" json:"join_request,omitempty"`
	// Forward uplink messages with FPort of 0.
	MacData bool `protobuf:"varint,2,opt,name=mac_data,json=macData,proto3" json:"mac_data,omitempty"`
	// Forward uplink messages with FPort between 1 and 255.
	ApplicationData bool `protobuf:"varint,3,opt,name=application_data,json=applicationData,proto3" json:"application_data,omitempty"`
	// Forward RSSI and SNR.
	SignalQuality bool `protobuf:"varint,4,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
	// Forward gateway location, RSSI, SNR and fine timestamp.
	Localization bool `protobuf:"varint,5,opt,name=localization,proto3" json:"localization,omitempty"`
}

func (x *RoutingPolicy_Uplink) Reset() {
	*x = RoutingPolicy_Uplink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_Uplink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_Uplink) ProtoMessage() {}

func (x *RoutingPolicy_Uplink) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_Uplink.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_Uplink) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RoutingPolicy_Uplink) GetJoinRequest() bool {
	if x != nil {
		return x.JoinRequest
	}
	return false
}

func (x *RoutingPolicy_Uplink) GetMacData() bool {
	if x != nil {
		return x.MacData
	}
	return false
}

func (x *RoutingPolicy_Uplink) GetApplicationData() bool {
	if x != nil {
		return x.ApplicationData
	}
	return false
}

func (x *RoutingPolicy_Uplink) GetSignalQuality() bool {
	if x != nil {
		return x.SignalQuality
	}
	return false
}

func (x *RoutingPolicy_Uplink) GetLocalization() bool {
	if x != nil {
		return x.Localization
	}
	return false
}

type RoutingPolicy_Downlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow join-accept messages.
	JoinAccept bool `protobuf:"varint,1,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	// Allow downlink messages with FPort of 0.
	MacData bool `protobuf:"varint,2,opt,name=mac_data,json=macData,proto3" json:"mac_data,omitempty"`
	// Allow downlink messages with FPort between 1 and 255.
	ApplicationData bool `protobuf:"varint,3,opt,name=application_data,json=applicationData,proto3" json:"application_data,omitempty"`
}

func (x *RoutingPolicy_Downlink) Reset() {
	*x = RoutingPolicy_Downlink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingPolicy_Downlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingPolicy_Downlink) ProtoMessage() {}

func (x *RoutingPolicy_Downlink) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingPolicy_Downlink.ProtoReflect.Descriptor instead.
func (*RoutingPolicy_Downlink) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RoutingPolicy_Downlink) GetJoinAccept() bool {
	if x != nil {
		return x.JoinAccept
	}
	return false
}

func (x *RoutingPolicy_Downlink) GetMacData() bool {
	if x != nil {
		return x.MacData
	}
	return false
}

func (x *RoutingPolicy_Downlink) GetApplicationData() bool {
	if x != nil {
		return x.ApplicationData
	}
	return false
}

type RoutingFilter_JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pass join-request EUIs by prefix. If empty, allow all join-requests.
	EuiPrefixes []*RoutingFilter_JoinRequest_EUIPrefixes `protobuf:"bytes,1,rep,name=eui_prefixes,json=euiPrefixes,proto3" json:"eui_prefixes,omitempty"`
}

func (x *RoutingFilter_JoinRequest) Reset() {
	*x = RoutingFilter_JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingFilter_JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingFilter_JoinRequest) ProtoMessage() {}

func (x *RoutingFilter_JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingFilter_JoinRequest.ProtoReflect.Descriptor instead.
func (*RoutingFilter_JoinRequest) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{2, 0}
}

func (x *RoutingFilter_JoinRequest) GetEuiPrefixes() []*RoutingFilter_JoinRequest_EUIPrefixes {
	if x != nil {
		return x.EuiPrefixes
	}
	return nil
}

type RoutingFilter_MACPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pass (un)confirmed uplink data messages.
	Confirmed *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Pass DevAddrs by prefix. If empty, allow all DevAddrs.
	DevAddrPrefixes []*DevAddrPrefix `protobuf:"bytes,2,rep,name=dev_addr_prefixes,json=devAddrPrefixes,proto3" json:"dev_addr_prefixes,omitempty"`
	// Pass messages with or without FOpts.
	FOpts *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
	// Pass for FPort ranges. If empty, allow all FPorts.
	FPortRanges []*RoutingFilter_MACPayload_FPortRange `protobuf:"bytes,4,rep,name=f_port_ranges,json=fPortRanges,proto3" json:"f_port_ranges,omitempty"`
}

func (x *RoutingFilter_MACPayload) Reset() {
	*x = RoutingFilter_MACPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingFilter_MACPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingFilter_MACPayload) ProtoMessage() {}

func (x *RoutingFilter_MACPayload) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingFilter_MACPayload.ProtoReflect.Descriptor instead.
func (*RoutingFilter_MACPayload) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{2, 1}
}

func (x *RoutingFilter_MACPayload) GetConfirmed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Confirmed
	}
	return nil
}

func (x *RoutingFilter_MACPayload) GetDevAddrPrefixes() []*DevAddrPrefix {
	if x != nil {
		return x.DevAddrPrefixes
	}
	return nil
}

func (x *RoutingFilter_MACPayload) GetFOpts() *wrapperspb.BoolValue {
	if x != nil {
		return x.FOpts
	}
	return nil
}

func (x *RoutingFilter_MACPayload) GetFPortRanges() []*RoutingFilter_MACPayload_FPortRange {
	if x != nil {
		return x.FPortRanges
	}
	return nil
}

type RoutingFilter_JoinRequest_EUIPrefixes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinEui uint64 `protobuf:"fixed64,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// Significant bits of join_eui.
	JoinEuiLength uint32 `protobuf:"varint,2,opt,name=join_eui_length,json=joinEuiLength,proto3" json:"join_eui_length,omitempty"`
	DevEui        uint64 `protobuf:"fixed64,3,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Significant bits of dev_eui.
	DevEuiLength uint32 `protobuf:"varint,4,opt,name=dev_eui_length,json=devEuiLength,proto3" json:"dev_eui_length,omitempty"`
}

func (x *RoutingFilter_JoinRequest_EUIPrefixes) Reset() {
	*x = RoutingFilter_JoinRequest_EUIPrefixes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingFilter_JoinRequest_EUIPrefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingFilter_JoinRequest_EUIPrefixes) ProtoMessage() {}

func (x *RoutingFilter_JoinRequest_EUIPrefixes) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingFilter_JoinRequest_EUIPrefixes.ProtoReflect.Descriptor instead.
func (*RoutingFilter_JoinRequest_EUIPrefixes) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *RoutingFilter_JoinRequest_EUIPrefixes) GetJoinEui() uint64 {
	if x != nil {
		return x.JoinEui
	}
	return 0
}

func (x *RoutingFilter_JoinRequest_EUIPrefixes) GetJoinEuiLength() uint32 {
	if x != nil {
		return x.JoinEuiLength
	}
	return 0
}

func (x *RoutingFilter_JoinRequest_EUIPrefixes) GetDevEui() uint64 {
	if x != nil {
		return x.DevEui
	}
	return 0
}

func (x *RoutingFilter_JoinRequest_EUIPrefixes) GetDevEuiLength() uint32 {
	if x != nil {
		return x.DevEuiLength
	}
	return 0
}

type RoutingFilter_MACPayload_FPortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inclusive start value of the range.
	Low uint32 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	// Inclusive end value of the range.
	High uint32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *RoutingFilter_MACPayload_FPortRange) Reset() {
	*x = RoutingFilter_MACPayload_FPortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingFilter_MACPayload_FPortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingFilter_MACPayload_FPortRange) ProtoMessage() {}

func (x *RoutingFilter_MACPayload_FPortRange) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingFilter_MACPayload_FPortRange.ProtoReflect.Descriptor instead.
func (*RoutingFilter_MACPayload_FPortRange) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *RoutingFilter_MACPayload_FPortRange) GetLow() uint32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *RoutingFilter_MACPayload_FPortRange) GetHigh() uint32 {
	if x != nil {
		return x.High
	}
	return 0
}

type DownlinkMessageDeliveryStateChange_TransmissionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether RX1 was used for transmission.
	Rx1 bool `protobuf:"varint,1,opt,name=rx1,proto3" json:"rx1,omitempty"`
	// Whether RX2 was used for transmission.
	Rx2 bool `protobuf:"varint,2,opt,name=rx2,proto3" json:"rx2,omitempty"`
}

func (x *DownlinkMessageDeliveryStateChange_TransmissionResult) Reset() {
	*x = DownlinkMessageDeliveryStateChange_TransmissionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_routing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkMessageDeliveryStateChange_TransmissionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkMessageDeliveryStateChange_TransmissionResult) ProtoMessage() {}

func (x *DownlinkMessageDeliveryStateChange_TransmissionResult) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_routing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkMessageDeliveryStateChange_TransmissionResult.ProtoReflect.Descriptor instead.
func (*DownlinkMessageDeliveryStateChange_TransmissionResult) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_routing_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DownlinkMessageDeliveryStateChange_TransmissionResult) GetRx1() bool {
	if x != nil {
		return x.Rx1
	}
	return false
}

func (x *DownlinkMessageDeliveryStateChange_TransmissionResult) GetRx2() bool {
	if x != nil {
		return x.Rx2
	}
	return false
}

var File_packetbroker_api_v3_routing_proto protoreflect.FileDescriptor

var file_packetbroker_api_v3_routing_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x33, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x44, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x22, 0xc6, 0x05, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x6d,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x47,
	0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x08, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0xbc, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x71, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe4, 0x06, 0x0a, 0x0d, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x41, 0x43, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x45, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xfe, 0x01, 0x0a, 0x0b, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0c, 0x65, 0x75,
	0x69, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x55, 0x49, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x0b, 0x65, 0x75,
	0x69, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x0b, 0x45, 0x55,
	0x49, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x6a, 0x6f, 0x69,
	0x6e, 0x45, 0x75, 0x69, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x69,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6a,
	0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0xdb, 0x02, 0x0a, 0x0a,
	0x4d, 0x41, 0x43, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x66, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x66, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x41, 0x43, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x46, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x32, 0x0a, 0x0a, 0x46, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x22, 0xdb, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x6f, 0x70, 0x12, 0x3b, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xbd,
	0x03, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x68,
	0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x22, 0xc1,
	0x03, 0x0a, 0x15, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f,
	0x70, 0x73, 0x22, 0x6c, 0x0a, 0x21, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x9e, 0x04, 0x0a, 0x20, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x6d,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xbc, 0x05, 0x0a, 0x22, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x38, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x72, 0x78, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x78, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x72, 0x78, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x29, 0x5a, 0x27, 0x67, 0x6f, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x3b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_packetbroker_api_v3_routing_proto_rawDescOnce sync.Once
	file_packetbroker_api_v3_routing_proto_rawDescData = file_packetbroker_api_v3_routing_proto_rawDesc
)

func file_packetbroker_api_v3_routing_proto_rawDescGZIP() []byte {
	file_packetbroker_api_v3_routing_proto_rawDescOnce.Do(func() {
		file_packetbroker_api_v3_routing_proto_rawDescData = protoimpl.X.CompressGZIP(file_packetbroker_api_v3_routing_proto_rawDescData)
	})
	return file_packetbroker_api_v3_routing_proto_rawDescData
}

var file_packetbroker_api_v3_routing_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_packetbroker_api_v3_routing_proto_goTypes = []interface{}{
	(*DevAddrPrefixRoute)(nil),                                    // 0: org.packetbroker.v3.DevAddrPrefixRoute
	(*RoutingPolicy)(nil),                                         // 1: org.packetbroker.v3.RoutingPolicy
	(*RoutingFilter)(nil),                                         // 2: org.packetbroker.v3.RoutingFilter
	(*RouteHop)(nil),                                              // 3: org.packetbroker.v3.RouteHop
	(*RoutedUplinkMessage)(nil),                                   // 4: org.packetbroker.v3.RoutedUplinkMessage
	(*RoutedDownlinkMessage)(nil),                                 // 5: org.packetbroker.v3.RoutedDownlinkMessage
	(*UplinkMessageProcessingErrorValue)(nil),                     // 6: org.packetbroker.v3.UplinkMessageProcessingErrorValue
	(*UplinkMessageDeliveryStateChange)(nil),                      // 7: org.packetbroker.v3.UplinkMessageDeliveryStateChange
	(*DownlinkMessageDeliveryStateChange)(nil),                    // 8: org.packetbroker.v3.DownlinkMessageDeliveryStateChange
	(*RoutingPolicy_Uplink)(nil),                                  // 9: org.packetbroker.v3.RoutingPolicy.Uplink
	(*RoutingPolicy_Downlink)(nil),                                // 10: org.packetbroker.v3.RoutingPolicy.Downlink
	(*RoutingFilter_JoinRequest)(nil),                             // 11: org.packetbroker.v3.RoutingFilter.JoinRequest
	(*RoutingFilter_MACPayload)(nil),                              // 12: org.packetbroker.v3.RoutingFilter.MACPayload
	(*RoutingFilter_JoinRequest_EUIPrefixes)(nil),                 // 13: org.packetbroker.v3.RoutingFilter.JoinRequest.EUIPrefixes
	(*RoutingFilter_MACPayload_FPortRange)(nil),                   // 14: org.packetbroker.v3.RoutingFilter.MACPayload.FPortRange
	(*DownlinkMessageDeliveryStateChange_TransmissionResult)(nil), // 15: org.packetbroker.v3.DownlinkMessageDeliveryStateChange.TransmissionResult
	(*DevAddrPrefix)(nil),                                         // 16: org.packetbroker.v3.DevAddrPrefix
	(*timestamppb.Timestamp)(nil),                                 // 17: google.protobuf.Timestamp
	(*Target)(nil),                                                // 18: org.packetbroker.v3.Target
	(*wrapperspb.BoolValue)(nil),                                  // 19: google.protobuf.BoolValue
	(*UplinkMessage)(nil),                                         // 20: org.packetbroker.v3.UplinkMessage
	(*DownlinkMessage)(nil),                                       // 21: org.packetbroker.v3.DownlinkMessage
	(UplinkMessageProcessingError)(0),                             // 22: org.packetbroker.v3.UplinkMessageProcessingError
	(MessageDeliveryState)(0),                                     // 23: org.packetbroker.v3.MessageDeliveryState
	(DownlinkMessageProcessingError)(0),                           // 24: org.packetbroker.v3.DownlinkMessageProcessingError
}
var file_packetbroker_api_v3_routing_proto_depIdxs = []int32{
	16, // 0: org.packetbroker.v3.DevAddrPrefixRoute.prefix:type_name -> org.packetbroker.v3.DevAddrPrefix
	17, // 1: org.packetbroker.v3.DevAddrPrefixRoute.created_at:type_name -> google.protobuf.Timestamp
	18, // 2: org.packetbroker.v3.DevAddrPrefixRoute.target:type_name -> org.packetbroker.v3.Target
	17, // 3: org.packetbroker.v3.RoutingPolicy.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 4: org.packetbroker.v3.RoutingPolicy.uplink:type_name -> org.packetbroker.v3.RoutingPolicy.Uplink
	10, // 5: org.packetbroker.v3.RoutingPolicy.downlink:type_name -> org.packetbroker.v3.RoutingPolicy.Downlink
	11, // 6: org.packetbroker.v3.RoutingFilter.join_request:type_name -> org.packetbroker.v3.RoutingFilter.JoinRequest
	12, // 7: org.packetbroker.v3.RoutingFilter.mac:type_name -> org.packetbroker.v3.RoutingFilter.MACPayload
	19, // 8: org.packetbroker.v3.RoutingFilter.gateway_metadata:type_name -> google.protobuf.BoolValue
	17, // 9: org.packetbroker.v3.RouteHop.received_at:type_name -> google.protobuf.Timestamp
	20, // 10: org.packetbroker.v3.RoutedUplinkMessage.message:type_name -> org.packetbroker.v3.UplinkMessage
	3,  // 11: org.packetbroker.v3.RoutedUplinkMessage.hops:type_name -> org.packetbroker.v3.RouteHop
	21, // 12: org.packetbroker.v3.RoutedDownlinkMessage.message:type_name -> org.packetbroker.v3.DownlinkMessage
	3,  // 13: org.packetbroker.v3.RoutedDownlinkMessage.hops:type_name -> org.packetbroker.v3.RouteHop
	22, // 14: org.packetbroker.v3.UplinkMessageProcessingErrorValue.value:type_name -> org.packetbroker.v3.UplinkMessageProcessingError
	23, // 15: org.packetbroker.v3.UplinkMessageDeliveryStateChange.state:type_name -> org.packetbroker.v3.MessageDeliveryState
	6,  // 16: org.packetbroker.v3.UplinkMessageDeliveryStateChange.error:type_name -> org.packetbroker.v3.UplinkMessageProcessingErrorValue
	23, // 17: org.packetbroker.v3.DownlinkMessageDeliveryStateChange.state:type_name -> org.packetbroker.v3.MessageDeliveryState
	24, // 18: org.packetbroker.v3.DownlinkMessageDeliveryStateChange.error:type_name -> org.packetbroker.v3.DownlinkMessageProcessingError
	15, // 19: org.packetbroker.v3.DownlinkMessageDeliveryStateChange.success:type_name -> org.packetbroker.v3.DownlinkMessageDeliveryStateChange.TransmissionResult
	13, // 20: org.packetbroker.v3.RoutingFilter.JoinRequest.eui_prefixes:type_name -> org.packetbroker.v3.RoutingFilter.JoinRequest.EUIPrefixes
	19, // 21: org.packetbroker.v3.RoutingFilter.MACPayload.confirmed:type_name -> google.protobuf.BoolValue
	16, // 22: org.packetbroker.v3.RoutingFilter.MACPayload.dev_addr_prefixes:type_name -> org.packetbroker.v3.DevAddrPrefix
	19, // 23: org.packetbroker.v3.RoutingFilter.MACPayload.f_opts:type_name -> google.protobuf.BoolValue
	14, // 24: org.packetbroker.v3.RoutingFilter.MACPayload.f_port_ranges:type_name -> org.packetbroker.v3.RoutingFilter.MACPayload.FPortRange
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_packetbroker_api_v3_routing_proto_init() }
func file_packetbroker_api_v3_routing_proto_init() {
	if File_packetbroker_api_v3_routing_proto != nil {
		return
	}
	file_packetbroker_api_v3_enums_proto_init()
	file_packetbroker_api_v3_messages_proto_init()
	file_packetbroker_api_v3_networks_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_packetbroker_api_v3_routing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevAddrPrefixRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutedUplinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutedDownlinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessageProcessingErrorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkMessageDeliveryStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessageDeliveryStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_Uplink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingPolicy_Downlink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingFilter_JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingFilter_MACPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingFilter_JoinRequest_EUIPrefixes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingFilter_MACPayload_FPortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_routing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkMessageDeliveryStateChange_TransmissionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_packetbroker_api_v3_routing_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*RoutingFilter_JoinRequest_)(nil),
		(*RoutingFilter_Mac)(nil),
	}
	file_packetbroker_api_v3_routing_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DownlinkMessageDeliveryStateChange_Error)(nil),
		(*DownlinkMessageDeliveryStateChange_Success)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packetbroker_api_v3_routing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packetbroker_api_v3_routing_proto_goTypes,
		DependencyIndexes: file_packetbroker_api_v3_routing_proto_depIdxs,
		MessageInfos:      file_packetbroker_api_v3_routing_proto_msgTypes,
	}.Build()
	File_packetbroker_api_v3_routing_proto = out.File
	file_packetbroker_api_v3_routing_proto_rawDesc = nil
	file_packetbroker_api_v3_routing_proto_goTypes = nil
	file_packetbroker_api_v3_routing_proto_depIdxs = nil
}
