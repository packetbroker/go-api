// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v3/gateway.proto

package packetbroker

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GatewayVisibility struct {
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,10,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,11,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,12,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,13,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Timestamp when the policy got last updated.
	UpdatedAt *types.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Show location.
	Location bool `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
	// Show antenna placement (indoor/outdoor).
	AntennaPlacement bool `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3" json:"antenna_placement,omitempty"`
	// Show antenna count.
	AntennaCount bool `protobuf:"varint,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Show whether the gateway produces fine timestamps.
	FineTimestamps bool `protobuf:"varint,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
	// Show contact information.
	ContactInfo bool `protobuf:"varint,5,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	// Show status (online/offline).
	Status bool `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// Show frequency plan.
	FrequencyPlan bool `protobuf:"varint,8,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// Show receive and transmission packet rates.
	PacketRates          bool     `protobuf:"varint,9,opt,name=packet_rates,json=packetRates,proto3" json:"packet_rates,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayVisibility) Reset()      { *m = GatewayVisibility{} }
func (*GatewayVisibility) ProtoMessage() {}
func (*GatewayVisibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{0}
}
func (m *GatewayVisibility) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayVisibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayVisibility.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayVisibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayVisibility.Merge(m, src)
}
func (m *GatewayVisibility) XXX_Size() int {
	return m.Size()
}
func (m *GatewayVisibility) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayVisibility.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayVisibility proto.InternalMessageInfo

func (m *GatewayVisibility) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *GatewayVisibility) GetForwarderTenantId() string {
	if m != nil {
		return m.ForwarderTenantId
	}
	return ""
}

func (m *GatewayVisibility) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *GatewayVisibility) GetHomeNetworkTenantId() string {
	if m != nil {
		return m.HomeNetworkTenantId
	}
	return ""
}

func (m *GatewayVisibility) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *GatewayVisibility) GetLocation() bool {
	if m != nil {
		return m.Location
	}
	return false
}

func (m *GatewayVisibility) GetAntennaPlacement() bool {
	if m != nil {
		return m.AntennaPlacement
	}
	return false
}

func (m *GatewayVisibility) GetAntennaCount() bool {
	if m != nil {
		return m.AntennaCount
	}
	return false
}

func (m *GatewayVisibility) GetFineTimestamps() bool {
	if m != nil {
		return m.FineTimestamps
	}
	return false
}

func (m *GatewayVisibility) GetContactInfo() bool {
	if m != nil {
		return m.ContactInfo
	}
	return false
}

func (m *GatewayVisibility) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *GatewayVisibility) GetFrequencyPlan() bool {
	if m != nil {
		return m.FrequencyPlan
	}
	return false
}

func (m *GatewayVisibility) GetPacketRates() bool {
	if m != nil {
		return m.PacketRates
	}
	return false
}

type GatewayFrequencyPlan struct {
	// Region of the frequency plan.
	Region Region `protobuf:"varint,1,opt,name=region,proto3,enum=org.packetbroker.v3.Region" json:"region,omitempty"`
	// LoRa channels demodulating multiple spreading factors per channel.
	LoraMultiSfChannels []*GatewayFrequencyPlan_LoRaMultiSFChannel `protobuf:"bytes,3,rep,name=lora_multi_sf_channels,json=loraMultiSfChannels,proto3" json:"lora_multi_sf_channels,omitempty"`
	// LoRa channels for a single spreading factor and bandwidth.
	// This is typically used for LoRa 2.4 GHz gateways.
	LoraSingleSfChannels []*GatewayFrequencyPlan_LoRaSingleSFChannel `protobuf:"bytes,4,rep,name=lora_single_sf_channels,json=loraSingleSfChannels,proto3" json:"lora_single_sf_channels,omitempty"`
	// FSK channel.
	FskChannel           *GatewayFrequencyPlan_FSKChannel `protobuf:"bytes,5,opt,name=fsk_channel,json=fskChannel,proto3" json:"fsk_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GatewayFrequencyPlan) Reset()      { *m = GatewayFrequencyPlan{} }
func (*GatewayFrequencyPlan) ProtoMessage() {}
func (*GatewayFrequencyPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{1}
}
func (m *GatewayFrequencyPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayFrequencyPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayFrequencyPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayFrequencyPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayFrequencyPlan.Merge(m, src)
}
func (m *GatewayFrequencyPlan) XXX_Size() int {
	return m.Size()
}
func (m *GatewayFrequencyPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayFrequencyPlan.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayFrequencyPlan proto.InternalMessageInfo

func (m *GatewayFrequencyPlan) GetRegion() Region {
	if m != nil {
		return m.Region
	}
	return Region_UNKNOWN_REGION
}

func (m *GatewayFrequencyPlan) GetLoraMultiSfChannels() []*GatewayFrequencyPlan_LoRaMultiSFChannel {
	if m != nil {
		return m.LoraMultiSfChannels
	}
	return nil
}

func (m *GatewayFrequencyPlan) GetLoraSingleSfChannels() []*GatewayFrequencyPlan_LoRaSingleSFChannel {
	if m != nil {
		return m.LoraSingleSfChannels
	}
	return nil
}

func (m *GatewayFrequencyPlan) GetFskChannel() *GatewayFrequencyPlan_FSKChannel {
	if m != nil {
		return m.FskChannel
	}
	return nil
}

type GatewayFrequencyPlan_LoRaMultiSFChannel struct {
	// Frequency (Hz).
	Frequency            uint64   `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) Reset() {
	*m = GatewayFrequencyPlan_LoRaMultiSFChannel{}
}
func (*GatewayFrequencyPlan_LoRaMultiSFChannel) ProtoMessage() {}
func (*GatewayFrequencyPlan_LoRaMultiSFChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{1, 0}
}
func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayFrequencyPlan_LoRaMultiSFChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayFrequencyPlan_LoRaMultiSFChannel.Merge(m, src)
}
func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) XXX_Size() int {
	return m.Size()
}
func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayFrequencyPlan_LoRaMultiSFChannel.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayFrequencyPlan_LoRaMultiSFChannel proto.InternalMessageInfo

func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type GatewayFrequencyPlan_LoRaSingleSFChannel struct {
	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// LoRa spreading factor.
	SpreadingFactor uint32 `protobuf:"varint,2,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// LoRa bandwidth (Hz).
	Bandwidth            uint32   `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) Reset() {
	*m = GatewayFrequencyPlan_LoRaSingleSFChannel{}
}
func (*GatewayFrequencyPlan_LoRaSingleSFChannel) ProtoMessage() {}
func (*GatewayFrequencyPlan_LoRaSingleSFChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{1, 1}
}
func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayFrequencyPlan_LoRaSingleSFChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayFrequencyPlan_LoRaSingleSFChannel.Merge(m, src)
}
func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) XXX_Size() int {
	return m.Size()
}
func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayFrequencyPlan_LoRaSingleSFChannel.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayFrequencyPlan_LoRaSingleSFChannel proto.InternalMessageInfo

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) GetSpreadingFactor() uint32 {
	if m != nil {
		return m.SpreadingFactor
	}
	return 0
}

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) GetBandwidth() uint32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

type GatewayFrequencyPlan_FSKChannel struct {
	// Frequency (Hz).
	Frequency            uint64   `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayFrequencyPlan_FSKChannel) Reset()      { *m = GatewayFrequencyPlan_FSKChannel{} }
func (*GatewayFrequencyPlan_FSKChannel) ProtoMessage() {}
func (*GatewayFrequencyPlan_FSKChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{1, 2}
}
func (m *GatewayFrequencyPlan_FSKChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayFrequencyPlan_FSKChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayFrequencyPlan_FSKChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayFrequencyPlan_FSKChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayFrequencyPlan_FSKChannel.Merge(m, src)
}
func (m *GatewayFrequencyPlan_FSKChannel) XXX_Size() int {
	return m.Size()
}
func (m *GatewayFrequencyPlan_FSKChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayFrequencyPlan_FSKChannel.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayFrequencyPlan_FSKChannel proto.InternalMessageInfo

func (m *GatewayFrequencyPlan_FSKChannel) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type GatewayIdentifier struct {
	// Extended unique identifier of the gateway.
	Eui *types.UInt64Value `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Types that are valid to be assigned to Id:
	//	*GatewayIdentifier_Plain
	//	*GatewayIdentifier_Hash
	Id                   isGatewayIdentifier_Id `protobuf_oneof:"id"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *GatewayIdentifier) Reset()      { *m = GatewayIdentifier{} }
func (*GatewayIdentifier) ProtoMessage() {}
func (*GatewayIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{2}
}
func (m *GatewayIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayIdentifier.Merge(m, src)
}
func (m *GatewayIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *GatewayIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayIdentifier proto.InternalMessageInfo

type isGatewayIdentifier_Id interface {
	isGatewayIdentifier_Id()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GatewayIdentifier_Plain struct {
	Plain string `protobuf:"bytes,2,opt,name=plain,proto3,oneof" json:"plain,omitempty"`
}
type GatewayIdentifier_Hash struct {
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
}

func (*GatewayIdentifier_Plain) isGatewayIdentifier_Id() {}
func (*GatewayIdentifier_Hash) isGatewayIdentifier_Id()  {}

func (m *GatewayIdentifier) GetId() isGatewayIdentifier_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GatewayIdentifier) GetEui() *types.UInt64Value {
	if m != nil {
		return m.Eui
	}
	return nil
}

func (m *GatewayIdentifier) GetPlain() string {
	if x, ok := m.GetId().(*GatewayIdentifier_Plain); ok {
		return x.Plain
	}
	return ""
}

func (m *GatewayIdentifier) GetHash() []byte {
	if x, ok := m.GetId().(*GatewayIdentifier_Hash); ok {
		return x.Hash
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GatewayIdentifier) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GatewayIdentifier_Plain)(nil),
		(*GatewayIdentifier_Hash)(nil),
	}
}

type GatewayLocation struct {
	// Types that are valid to be assigned to Value:
	//	*GatewayLocation_Terrestrial_
	//	*GatewayLocation_Satellite_
	Value                isGatewayLocation_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GatewayLocation) Reset()      { *m = GatewayLocation{} }
func (*GatewayLocation) ProtoMessage() {}
func (*GatewayLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{3}
}
func (m *GatewayLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayLocation.Merge(m, src)
}
func (m *GatewayLocation) XXX_Size() int {
	return m.Size()
}
func (m *GatewayLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayLocation.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayLocation proto.InternalMessageInfo

type isGatewayLocation_Value interface {
	isGatewayLocation_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type GatewayLocation_Terrestrial_ struct {
	Terrestrial *GatewayLocation_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof" json:"terrestrial,omitempty"`
}
type GatewayLocation_Satellite_ struct {
	Satellite *GatewayLocation_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof" json:"satellite,omitempty"`
}

func (*GatewayLocation_Terrestrial_) isGatewayLocation_Value() {}
func (*GatewayLocation_Satellite_) isGatewayLocation_Value()   {}

func (m *GatewayLocation) GetValue() isGatewayLocation_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GatewayLocation) GetTerrestrial() *GatewayLocation_Terrestrial {
	if x, ok := m.GetValue().(*GatewayLocation_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (m *GatewayLocation) GetSatellite() *GatewayLocation_Satellite {
	if x, ok := m.GetValue().(*GatewayLocation_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GatewayLocation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GatewayLocation_Terrestrial_)(nil),
		(*GatewayLocation_Satellite_)(nil),
	}
}

type GatewayLocation_Terrestrial struct {
	// Location of the (first) antenna.
	// Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Antenna placement (indoor/outdoor).
	// Home Networks receive this value if the Gateway Visibility has antenna_placement set.
	AntennaPlacement TerrestrialAntennaPlacement `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3,enum=org.packetbroker.v3.TerrestrialAntennaPlacement" json:"antenna_placement,omitempty"`
	// Number of antennas.
	// Home Networks receive this value if the Gateway Visibility has antenna_count set.
	AntennaCount *types.UInt32Value `protobuf:"bytes,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Indicates whether the gateway produces fine timestamps.
	// Home Networks receive this value if the Gateway Visibility has fine_timestamps set.
	FineTimestamps       *types.BoolValue `protobuf:"bytes,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GatewayLocation_Terrestrial) Reset()      { *m = GatewayLocation_Terrestrial{} }
func (*GatewayLocation_Terrestrial) ProtoMessage() {}
func (*GatewayLocation_Terrestrial) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{3, 0}
}
func (m *GatewayLocation_Terrestrial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayLocation_Terrestrial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayLocation_Terrestrial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayLocation_Terrestrial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayLocation_Terrestrial.Merge(m, src)
}
func (m *GatewayLocation_Terrestrial) XXX_Size() int {
	return m.Size()
}
func (m *GatewayLocation_Terrestrial) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayLocation_Terrestrial.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayLocation_Terrestrial proto.InternalMessageInfo

func (m *GatewayLocation_Terrestrial) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GatewayLocation_Terrestrial) GetAntennaPlacement() TerrestrialAntennaPlacement {
	if m != nil {
		return m.AntennaPlacement
	}
	return TerrestrialAntennaPlacement_UNKNOWN_PLACEMENT
}

func (m *GatewayLocation_Terrestrial) GetAntennaCount() *types.UInt32Value {
	if m != nil {
		return m.AntennaCount
	}
	return nil
}

func (m *GatewayLocation_Terrestrial) GetFineTimestamps() *types.BoolValue {
	if m != nil {
		return m.FineTimestamps
	}
	return nil
}

type GatewayLocation_Satellite struct {
	// Satellite location.
	// Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Field of view (meters).
	// Home Networks receive this value if the Gateway Visibility has location set.
	FieldOfView float64 `protobuf:"fixed64,2,opt,name=field_of_view,json=fieldOfView,proto3" json:"field_of_view,omitempty"`
	// Trajectory, typically containing the recent past and projected path.
	// Home Networks receive this value if the Gateway Visibility has location set.
	Trajectory           []*TimedLocation `protobuf:"bytes,3,rep,name=trajectory,proto3" json:"trajectory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GatewayLocation_Satellite) Reset()      { *m = GatewayLocation_Satellite{} }
func (*GatewayLocation_Satellite) ProtoMessage() {}
func (*GatewayLocation_Satellite) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{3, 1}
}
func (m *GatewayLocation_Satellite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayLocation_Satellite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayLocation_Satellite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayLocation_Satellite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayLocation_Satellite.Merge(m, src)
}
func (m *GatewayLocation_Satellite) XXX_Size() int {
	return m.Size()
}
func (m *GatewayLocation_Satellite) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayLocation_Satellite.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayLocation_Satellite proto.InternalMessageInfo

func (m *GatewayLocation_Satellite) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GatewayLocation_Satellite) GetFieldOfView() float64 {
	if m != nil {
		return m.FieldOfView
	}
	return 0
}

func (m *GatewayLocation_Satellite) GetTrajectory() []*TimedLocation {
	if m != nil {
		return m.Trajectory
	}
	return nil
}

type GatewayLocationValue struct {
	Location             *GatewayLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GatewayLocationValue) Reset()      { *m = GatewayLocationValue{} }
func (*GatewayLocationValue) ProtoMessage() {}
func (*GatewayLocationValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{4}
}
func (m *GatewayLocationValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayLocationValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayLocationValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayLocationValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayLocationValue.Merge(m, src)
}
func (m *GatewayLocationValue) XXX_Size() int {
	return m.Size()
}
func (m *GatewayLocationValue) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayLocationValue.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayLocationValue proto.InternalMessageInfo

func (m *GatewayLocationValue) GetLocation() *GatewayLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

type Gateway struct {
	// LoRa Alliance NetID of the Forwarder Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	TenantId string `protobuf:"bytes,14,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Forwarder cluster of the Forwarder Member (optional).
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Identifier of the gateway.
	GatewayId *GatewayIdentifier `protobuf:"bytes,15,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Timestamp when the gateway was last updated.
	UpdatedAt *types.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Gateway location.
	Location *GatewayLocation `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Administrative contact.
	// Home Networks receive this value if the Gateway Visibility has contact_info set.
	AdministrativeContact *ContactInfo `protobuf:"bytes,16,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	// Home Networks receive this value if the Gateway Visibility has contact_info set.
	TechnicalContact *ContactInfo `protobuf:"bytes,17,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the gateway is online.
	// Home Networks receive this value if the Gateway Visibility has status set.
	Online *types.BoolValue `protobuf:"bytes,10,opt,name=online,proto3" json:"online,omitempty"`
	// Frequency plan of the gateway.
	// Home Networks receive this value if the Gateway Visibility has frequency_plan set.
	FrequencyPlan *GatewayFrequencyPlan `protobuf:"bytes,13,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// Received packets rate (number of packets per hour).
	// Home Networks receive this value if the Gateway Visibility has packet_rates set.
	RxRate *types.FloatValue `protobuf:"bytes,18,opt,name=rx_rate,json=rxRate,proto3" json:"rx_rate,omitempty"`
	// Transmitted packets rate (number of packets per hour).
	// Home Networks receive this value if the Gateway Visibility has packet_rates set.
	TxRate               *types.FloatValue `protobuf:"bytes,19,opt,name=tx_rate,json=txRate,proto3" json:"tx_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Gateway) Reset()      { *m = Gateway{} }
func (*Gateway) ProtoMessage() {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_56f115301d3f8940, []int{5}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(m, src)
}
func (m *Gateway) XXX_Size() int {
	return m.Size()
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

func (m *Gateway) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *Gateway) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Gateway) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *Gateway) GetGatewayId() *GatewayIdentifier {
	if m != nil {
		return m.GatewayId
	}
	return nil
}

func (m *Gateway) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Gateway) GetLocation() *GatewayLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Gateway) GetAdministrativeContact() *ContactInfo {
	if m != nil {
		return m.AdministrativeContact
	}
	return nil
}

func (m *Gateway) GetTechnicalContact() *ContactInfo {
	if m != nil {
		return m.TechnicalContact
	}
	return nil
}

func (m *Gateway) GetOnline() *types.BoolValue {
	if m != nil {
		return m.Online
	}
	return nil
}

func (m *Gateway) GetFrequencyPlan() *GatewayFrequencyPlan {
	if m != nil {
		return m.FrequencyPlan
	}
	return nil
}

func (m *Gateway) GetRxRate() *types.FloatValue {
	if m != nil {
		return m.RxRate
	}
	return nil
}

func (m *Gateway) GetTxRate() *types.FloatValue {
	if m != nil {
		return m.TxRate
	}
	return nil
}

func init() {
	proto.RegisterType((*GatewayVisibility)(nil), "org.packetbroker.v3.GatewayVisibility")
	golang_proto.RegisterType((*GatewayVisibility)(nil), "org.packetbroker.v3.GatewayVisibility")
	proto.RegisterType((*GatewayFrequencyPlan)(nil), "org.packetbroker.v3.GatewayFrequencyPlan")
	golang_proto.RegisterType((*GatewayFrequencyPlan)(nil), "org.packetbroker.v3.GatewayFrequencyPlan")
	proto.RegisterType((*GatewayFrequencyPlan_LoRaMultiSFChannel)(nil), "org.packetbroker.v3.GatewayFrequencyPlan.LoRaMultiSFChannel")
	golang_proto.RegisterType((*GatewayFrequencyPlan_LoRaMultiSFChannel)(nil), "org.packetbroker.v3.GatewayFrequencyPlan.LoRaMultiSFChannel")
	proto.RegisterType((*GatewayFrequencyPlan_LoRaSingleSFChannel)(nil), "org.packetbroker.v3.GatewayFrequencyPlan.LoRaSingleSFChannel")
	golang_proto.RegisterType((*GatewayFrequencyPlan_LoRaSingleSFChannel)(nil), "org.packetbroker.v3.GatewayFrequencyPlan.LoRaSingleSFChannel")
	proto.RegisterType((*GatewayFrequencyPlan_FSKChannel)(nil), "org.packetbroker.v3.GatewayFrequencyPlan.FSKChannel")
	golang_proto.RegisterType((*GatewayFrequencyPlan_FSKChannel)(nil), "org.packetbroker.v3.GatewayFrequencyPlan.FSKChannel")
	proto.RegisterType((*GatewayIdentifier)(nil), "org.packetbroker.v3.GatewayIdentifier")
	golang_proto.RegisterType((*GatewayIdentifier)(nil), "org.packetbroker.v3.GatewayIdentifier")
	proto.RegisterType((*GatewayLocation)(nil), "org.packetbroker.v3.GatewayLocation")
	golang_proto.RegisterType((*GatewayLocation)(nil), "org.packetbroker.v3.GatewayLocation")
	proto.RegisterType((*GatewayLocation_Terrestrial)(nil), "org.packetbroker.v3.GatewayLocation.Terrestrial")
	golang_proto.RegisterType((*GatewayLocation_Terrestrial)(nil), "org.packetbroker.v3.GatewayLocation.Terrestrial")
	proto.RegisterType((*GatewayLocation_Satellite)(nil), "org.packetbroker.v3.GatewayLocation.Satellite")
	golang_proto.RegisterType((*GatewayLocation_Satellite)(nil), "org.packetbroker.v3.GatewayLocation.Satellite")
	proto.RegisterType((*GatewayLocationValue)(nil), "org.packetbroker.v3.GatewayLocationValue")
	golang_proto.RegisterType((*GatewayLocationValue)(nil), "org.packetbroker.v3.GatewayLocationValue")
	proto.RegisterType((*Gateway)(nil), "org.packetbroker.v3.Gateway")
	golang_proto.RegisterType((*Gateway)(nil), "org.packetbroker.v3.Gateway")
}

func init() { proto.RegisterFile("packetbroker/api/v3/gateway.proto", fileDescriptor_56f115301d3f8940) }
func init() {
	golang_proto.RegisterFile("packetbroker/api/v3/gateway.proto", fileDescriptor_56f115301d3f8940)
}

var fileDescriptor_56f115301d3f8940 = []byte{
	// 1322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x3f, 0x6c, 0xdb, 0xc6,
	0x17, 0x26, 0x6d, 0x5a, 0xa6, 0x9e, 0x2c, 0x9b, 0x3e, 0x3b, 0xfe, 0x09, 0x4a, 0x72, 0x71, 0xf4,
	0x6b, 0x1b, 0xa7, 0x45, 0xe5, 0x42, 0x0e, 0x0a, 0x04, 0x6d, 0x81, 0xc6, 0x46, 0x5d, 0x5b, 0x4d,
	0xd2, 0x80, 0x76, 0xd2, 0xa2, 0x40, 0x41, 0x9c, 0xc5, 0xa3, 0x7c, 0x35, 0x75, 0x54, 0xc8, 0x93,
	0x15, 0x03, 0x1d, 0x32, 0x66, 0xec, 0xd8, 0xa5, 0x40, 0x81, 0x2e, 0x99, 0xd2, 0x8c, 0x19, 0x33,
	0x66, 0xcc, 0x98, 0x31, 0x92, 0x96, 0xa0, 0x4b, 0x33, 0x66, 0x2c, 0x78, 0xfc, 0x23, 0xd9, 0x66,
	0x0c, 0xa7, 0xdd, 0xc8, 0xf7, 0xbe, 0xf7, 0x7d, 0xef, 0xde, 0xdd, 0xbd, 0x77, 0x70, 0xb1, 0x4d,
	0x1a, 0x7b, 0x54, 0xec, 0xf8, 0xde, 0x1e, 0xf5, 0x97, 0x49, 0x9b, 0x2d, 0xef, 0xaf, 0x2c, 0x37,
	0x89, 0xa0, 0x5d, 0x72, 0x50, 0x6d, 0xfb, 0x9e, 0xf0, 0xd0, 0x9c, 0xe7, 0x37, 0xab, 0xa3, 0xb0,
	0xea, 0xfe, 0x4a, 0xf9, 0x42, 0xd3, 0xf3, 0x9a, 0x2e, 0x5d, 0x96, 0x90, 0x9d, 0x8e, 0xb3, 0x2c,
	0x58, 0x8b, 0x06, 0x82, 0xb4, 0xda, 0x51, 0x54, 0x19, 0x1f, 0x05, 0x74, 0x7d, 0xd2, 0x6e, 0x53,
	0x3f, 0x88, 0xfd, 0x17, 0xb2, 0x84, 0x29, 0xef, 0xb4, 0x12, 0x40, 0x66, 0x66, 0x0d, 0x8f, 0x0b,
	0xd2, 0x10, 0x31, 0xa4, 0x92, 0x05, 0x71, 0xbd, 0x06, 0x11, 0xcc, 0xe3, 0x11, 0xa6, 0xf2, 0x48,
	0x83, 0xd9, 0xaf, 0xa3, 0xf5, 0xdc, 0x61, 0x01, 0xdb, 0x61, 0x2e, 0x13, 0x07, 0x68, 0x09, 0x0c,
	0xc7, 0xf3, 0xbb, 0xc4, 0xb7, 0xa9, 0x6f, 0x71, 0x2a, 0x2c, 0x66, 0x97, 0x60, 0x51, 0x5d, 0x2a,
	0x9a, 0xd3, 0xa9, 0xfd, 0x26, 0x15, 0x9b, 0x36, 0xaa, 0xc2, 0xdc, 0x10, 0x29, 0x28, 0x27, 0x5c,
	0x82, 0x0b, 0x8b, 0xea, 0x52, 0xde, 0x9c, 0x4d, 0x5d, 0xdb, 0xd2, 0xb3, 0x69, 0xa3, 0x8f, 0x61,
	0x6e, 0xd7, 0x6b, 0xd1, 0x90, 0xb4, 0xeb, 0xf9, 0x7b, 0x09, 0xf9, 0x94, 0x24, 0x37, 0x42, 0xd7,
	0xcd, 0xc8, 0x13, 0xd1, 0xaf, 0xc0, 0xc2, 0x21, 0xf8, 0x50, 0xa1, 0x28, 0x15, 0xe6, 0x46, 0x22,
	0x52, 0x8d, 0xab, 0x00, 0x9d, 0xb6, 0x4d, 0x04, 0xb5, 0x2d, 0x22, 0x4a, 0xd3, 0x8b, 0xea, 0x52,
	0xa1, 0x56, 0xae, 0x46, 0x05, 0xaf, 0x26, 0x05, 0xaf, 0x6e, 0x27, 0x3b, 0x62, 0xe6, 0x63, 0xf4,
	0x35, 0x81, 0xca, 0xa0, 0x27, 0x05, 0x2a, 0xa9, 0x8b, 0xea, 0x92, 0x6e, 0xa6, 0xff, 0xe8, 0x23,
	0x98, 0x25, 0x5c, 0x50, 0xce, 0x89, 0xd5, 0x76, 0x49, 0x83, 0xb6, 0x28, 0x17, 0xa5, 0x31, 0x09,
	0x32, 0x62, 0xc7, 0xad, 0xc4, 0x8e, 0xfe, 0x0f, 0xc5, 0x04, 0xdc, 0xf0, 0x3a, 0x5c, 0x94, 0xc6,
	0x25, 0x70, 0x2a, 0x36, 0xae, 0x85, 0x36, 0x74, 0x09, 0x66, 0x1c, 0xc6, 0xa9, 0x95, 0x1e, 0x8e,
	0xa0, 0xa4, 0x49, 0xd8, 0x74, 0x68, 0x4e, 0x13, 0x0c, 0xd0, 0x45, 0x98, 0x8a, 0xb7, 0xd6, 0x62,
	0xdc, 0xf1, 0x4a, 0x13, 0x12, 0x55, 0x88, 0x6d, 0x9b, 0xdc, 0xf1, 0xd0, 0x02, 0xe4, 0x02, 0x41,
	0x44, 0x27, 0x28, 0xe5, 0xa4, 0x33, 0xfe, 0x43, 0xef, 0xc3, 0xb4, 0xe3, 0xd3, 0xbb, 0x1d, 0xca,
	0x1b, 0x07, 0x61, 0xde, 0xbc, 0xa4, 0x4b, 0x7f, 0x31, 0xb5, 0xde, 0x72, 0x09, 0x0f, 0x15, 0xa2,
	0xd3, 0x62, 0xf9, 0x44, 0xd0, 0xa0, 0x94, 0x8f, 0x14, 0x22, 0x9b, 0x19, 0x9a, 0xea, 0x9a, 0x3e,
	0x69, 0xe8, 0x95, 0xbf, 0x35, 0x98, 0x8f, 0x0f, 0xcc, 0xfa, 0x21, 0x86, 0x15, 0xc8, 0xf9, 0xb4,
	0x99, 0x14, 0x6e, 0xba, 0x76, 0xb6, 0x9a, 0x71, 0x31, 0xaa, 0xa6, 0x84, 0x98, 0x31, 0x14, 0xdd,
	0x85, 0x05, 0xd7, 0xf3, 0x89, 0xd5, 0xea, 0xb8, 0x82, 0x59, 0x81, 0x63, 0x35, 0x76, 0x09, 0xe7,
	0xd4, 0x0d, 0x4a, 0xe3, 0x8b, 0xe3, 0x4b, 0x85, 0xda, 0xe7, 0x99, 0x24, 0x59, 0xfa, 0xd5, 0xeb,
	0x9e, 0x49, 0x6e, 0x84, 0x34, 0x5b, 0xeb, 0x6b, 0x11, 0x89, 0x39, 0x17, 0x72, 0x47, 0x36, 0x27,
	0xb6, 0x05, 0x48, 0xc0, 0xff, 0xa4, 0x64, 0xc0, 0x78, 0xd3, 0xa5, 0x87, 0x34, 0x35, 0xa9, 0xf9,
	0xc5, 0xbb, 0x69, 0x6e, 0x49, 0x9e, 0xa1, 0xe8, 0x7c, 0xc8, 0x1e, 0x1b, 0x87, 0xaa, 0xb7, 0xa1,
	0xe0, 0x04, 0x7b, 0x89, 0x94, 0xdc, 0xc0, 0x42, 0xed, 0xca, 0xe9, 0x95, 0xd6, 0xb7, 0xbe, 0x49,
	0x04, 0xc0, 0x09, 0xf6, 0xe2, 0xef, 0x72, 0x0d, 0xd0, 0xf1, 0x75, 0xa3, 0x73, 0x90, 0x4f, 0x77,
	0x57, 0xee, 0x86, 0x66, 0x0e, 0x0d, 0xe5, 0x9f, 0x61, 0x2e, 0x23, 0xef, 0x93, 0x83, 0xd0, 0x65,
	0x30, 0x82, 0xb6, 0x4f, 0x89, 0xcd, 0x78, 0xd3, 0x72, 0x48, 0x43, 0x78, 0xbe, 0x3c, 0xfb, 0x45,
	0x73, 0x26, 0xb5, 0xaf, 0x4b, 0x73, 0x48, 0xb4, 0x43, 0xb8, 0xdd, 0x65, 0xb6, 0xd8, 0x95, 0xc7,
	0xbe, 0x68, 0x0e, 0x0d, 0xe5, 0x0f, 0x01, 0x86, 0x6b, 0x39, 0x59, 0xb4, 0xae, 0xe9, 0x63, 0xc6,
	0x78, 0xa5, 0x9b, 0x76, 0xa8, 0x4d, 0x9b, 0x72, 0xc1, 0x1c, 0x46, 0x7d, 0x54, 0x85, 0x71, 0xda,
	0x61, 0x32, 0xa4, 0x50, 0x3b, 0x77, 0xec, 0x72, 0xdf, 0xde, 0xe4, 0xe2, 0xd3, 0x2b, 0x77, 0x88,
	0xdb, 0xa1, 0x66, 0x08, 0x44, 0x0b, 0x30, 0xd1, 0x76, 0x09, 0xe3, 0x32, 0xe9, 0xfc, 0x86, 0x62,
	0x46, 0xbf, 0x68, 0x1e, 0xb4, 0x5d, 0x12, 0x44, 0x79, 0x4e, 0x6d, 0x28, 0xa6, 0xfc, 0x5b, 0xd5,
	0x60, 0x8c, 0xd9, 0x95, 0x3f, 0x26, 0x60, 0x26, 0x56, 0xbe, 0x9e, 0x34, 0x81, 0x6d, 0x28, 0x08,
	0xea, 0xfb, 0x34, 0x10, 0x3e, 0x23, 0x6e, 0xac, 0xff, 0xc9, 0x49, 0xfb, 0x98, 0x84, 0x56, 0xb7,
	0x87, 0x71, 0x1b, 0x8a, 0x39, 0x4a, 0x83, 0x6e, 0x42, 0x3e, 0x20, 0x82, 0xba, 0x2e, 0x13, 0x54,
	0x66, 0x58, 0xa8, 0x55, 0x4f, 0xc5, 0xb9, 0x95, 0x44, 0x6d, 0x28, 0xe6, 0x90, 0xa2, 0xfc, 0xe7,
	0x18, 0x14, 0x46, 0xe4, 0xd0, 0xd5, 0x23, 0x6d, 0xad, 0x50, 0x3b, 0x9f, 0x49, 0x9f, 0xf0, 0x8e,
	0x74, 0xbd, 0x1f, 0xdf, 0xd6, 0xf5, 0xa6, 0xdf, 0xb2, 0xec, 0x11, 0xdd, 0x6b, 0x47, 0xba, 0x62,
	0x46, 0x9f, 0xbc, 0x96, 0xd5, 0x27, 0xdf, 0xb6, 0xa3, 0x2b, 0xb5, 0x68, 0x47, 0x0f, 0x77, 0xd1,
	0xb5, 0xec, 0x2e, 0x9a, 0xd5, 0xf3, 0x57, 0x3d, 0xcf, 0x8d, 0x28, 0x8e, 0x74, 0xd8, 0xf2, 0x23,
	0x15, 0xf2, 0x69, 0x31, 0xff, 0x4b, 0xbd, 0x2a, 0x50, 0x74, 0x18, 0x75, 0x6d, 0xcb, 0x73, 0xac,
	0x7d, 0x46, 0xbb, 0xb2, 0x56, 0xaa, 0x59, 0x90, 0xc6, 0x6f, 0x9d, 0x3b, 0x8c, 0x76, 0xd1, 0x2a,
	0x80, 0xf0, 0xc9, 0x4f, 0x34, 0xbc, 0x2e, 0x07, 0x71, 0xa7, 0xab, 0x64, 0x17, 0x93, 0xb5, 0xa8,
	0x9d, 0xaa, 0x8c, 0x44, 0xad, 0x4e, 0xc2, 0xc4, 0x7e, 0xb8, 0x92, 0xca, 0xf7, 0x69, 0x3f, 0x4e,
	0x70, 0x72, 0x85, 0xe8, 0xcb, 0x63, 0x6b, 0x78, 0xef, 0x34, 0x47, 0x6a, 0xb8, 0x94, 0xca, 0x5f,
	0x13, 0x30, 0x19, 0x7b, 0xd1, 0x19, 0xc8, 0xc5, 0xa3, 0x5a, 0x95, 0x37, 0x7a, 0x82, 0xcb, 0xf9,
	0x7c, 0x16, 0xf2, 0xc3, 0x91, 0x3c, 0x2d, 0x47, 0xb2, 0x2e, 0x92, 0x39, 0x7c, 0x1e, 0xa0, 0xe1,
	0x76, 0x02, 0x41, 0xfd, 0xd0, 0x2b, 0x2f, 0x9e, 0x99, 0x8f, 0x2d, 0x9b, 0x36, 0xfa, 0x0a, 0x20,
	0x7e, 0x49, 0x85, 0xee, 0x19, 0x99, 0xe2, 0x07, 0x27, 0xa5, 0x38, 0xbc, 0xfe, 0x66, 0xbe, 0x99,
	0x98, 0x8e, 0x4c, 0x7b, 0xed, 0x5d, 0xa6, 0xfd, 0x68, 0x89, 0xe6, 0xff, 0x4d, 0x89, 0xd0, 0x77,
	0xb0, 0x40, 0xec, 0x16, 0xe3, 0x2c, 0x10, 0x3e, 0x11, 0x6c, 0x9f, 0x5a, 0xf1, 0x4c, 0x2e, 0x19,
	0x92, 0x6f, 0x31, 0x93, 0x6f, 0x6d, 0x38, 0xb7, 0xcd, 0x33, 0x87, 0xe3, 0x63, 0x17, 0xba, 0x01,
	0xb3, 0x82, 0x36, 0x76, 0x39, 0x6b, 0x10, 0x37, 0xe5, 0x9c, 0x3d, 0x25, 0xa7, 0x91, 0x86, 0x26,
	0x74, 0x35, 0xc8, 0x79, 0xdc, 0x65, 0x9c, 0xca, 0x67, 0xdc, 0xc9, 0x57, 0x23, 0x46, 0xa2, 0x5b,
	0xc7, 0x5e, 0x0e, 0x45, 0x19, 0x7b, 0xf9, 0xd4, 0x53, 0xeb, 0xe8, 0x23, 0xe3, 0x0a, 0x4c, 0xfa,
	0xf7, 0xe4, 0x03, 0xa3, 0x84, 0x24, 0xd5, 0xd9, 0x63, 0x69, 0xac, 0xbb, 0x1e, 0x11, 0x71, 0x1e,
	0xfe, 0xbd, 0xf0, 0xe1, 0x11, 0x46, 0x89, 0x38, 0x6a, 0xee, 0x14, 0x51, 0x42, 0x46, 0xd5, 0x35,
	0x7d, 0xdc, 0xd0, 0xea, 0x9a, 0x3e, 0x61, 0xe4, 0xea, 0x9a, 0x9e, 0x33, 0x26, 0xa3, 0xf7, 0x4b,
	0x5d, 0xd3, 0x75, 0x23, 0x5f, 0xd7, 0xf4, 0xbc, 0x01, 0x75, 0x4d, 0x2f, 0x18, 0x53, 0x75, 0x4d,
	0x9f, 0x32, 0x8a, 0xab, 0xbf, 0xa9, 0xcf, 0x7a, 0x58, 0x7d, 0xde, 0xc3, 0xea, 0x8b, 0x1e, 0x56,
	0x5e, 0xf6, 0xb0, 0xf2, 0xaa, 0x87, 0x95, 0xd7, 0x3d, 0xac, 0xbc, 0xe9, 0x61, 0xf5, 0x7e, 0x1f,
	0xab, 0x0f, 0xfa, 0x58, 0x79, 0xd8, 0xc7, 0xea, 0xe3, 0x3e, 0x56, 0x9e, 0xf4, 0xb1, 0xf2, 0xb4,
	0x8f, 0x95, 0x67, 0x7d, 0xac, 0x3e, 0xef, 0x63, 0xf5, 0x45, 0x1f, 0x2b, 0x2f, 0xfb, 0x58, 0x7d,
	0xd5, 0xc7, 0xca, 0xeb, 0x3e, 0x56, 0xdf, 0xf4, 0xb1, 0x72, 0x7f, 0x80, 0x95, 0x07, 0x03, 0xac,
	0xfe, 0x32, 0xc0, 0xca, 0xaf, 0x03, 0xac, 0xfe, 0x3e, 0xc0, 0xca, 0xc3, 0x01, 0x56, 0x1e, 0x0f,
	0xb0, 0xfa, 0x64, 0x80, 0xd5, 0xa7, 0x03, 0xac, 0xfe, 0x70, 0xa9, 0xe9, 0x1d, 0x2e, 0xa5, 0xe7,
	0x37, 0xe3, 0xa7, 0xfa, 0x67, 0xa3, 0xf6, 0x9d, 0x9c, 0x5c, 0xec, 0xca, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xd6, 0x40, 0x1f, 0xa9, 0x92, 0x0c, 0x00, 0x00,
}

func (this *GatewayVisibility) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayVisibility)
	if !ok {
		that2, ok := that.(GatewayVisibility)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ForwarderNetId != that1.ForwarderNetId {
		return false
	}
	if this.ForwarderTenantId != that1.ForwarderTenantId {
		return false
	}
	if this.HomeNetworkNetId != that1.HomeNetworkNetId {
		return false
	}
	if this.HomeNetworkTenantId != that1.HomeNetworkTenantId {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if this.AntennaPlacement != that1.AntennaPlacement {
		return false
	}
	if this.AntennaCount != that1.AntennaCount {
		return false
	}
	if this.FineTimestamps != that1.FineTimestamps {
		return false
	}
	if this.ContactInfo != that1.ContactInfo {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return false
	}
	if this.PacketRates != that1.PacketRates {
		return false
	}
	return true
}
func (this *GatewayFrequencyPlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayFrequencyPlan)
	if !ok {
		that2, ok := that.(GatewayFrequencyPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if len(this.LoraMultiSfChannels) != len(that1.LoraMultiSfChannels) {
		return false
	}
	for i := range this.LoraMultiSfChannels {
		if !this.LoraMultiSfChannels[i].Equal(that1.LoraMultiSfChannels[i]) {
			return false
		}
	}
	if len(this.LoraSingleSfChannels) != len(that1.LoraSingleSfChannels) {
		return false
	}
	for i := range this.LoraSingleSfChannels {
		if !this.LoraSingleSfChannels[i].Equal(that1.LoraSingleSfChannels[i]) {
			return false
		}
	}
	if !this.FskChannel.Equal(that1.FskChannel) {
		return false
	}
	return true
}
func (this *GatewayFrequencyPlan_LoRaMultiSFChannel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayFrequencyPlan_LoRaMultiSFChannel)
	if !ok {
		that2, ok := that.(GatewayFrequencyPlan_LoRaMultiSFChannel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	return true
}
func (this *GatewayFrequencyPlan_LoRaSingleSFChannel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayFrequencyPlan_LoRaSingleSFChannel)
	if !ok {
		that2, ok := that.(GatewayFrequencyPlan_LoRaSingleSFChannel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.SpreadingFactor != that1.SpreadingFactor {
		return false
	}
	if this.Bandwidth != that1.Bandwidth {
		return false
	}
	return true
}
func (this *GatewayFrequencyPlan_FSKChannel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayFrequencyPlan_FSKChannel)
	if !ok {
		that2, ok := that.(GatewayFrequencyPlan_FSKChannel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	return true
}
func (this *GatewayIdentifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayIdentifier)
	if !ok {
		that2, ok := that.(GatewayIdentifier)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Eui.Equal(that1.Eui) {
		return false
	}
	if that1.Id == nil {
		if this.Id != nil {
			return false
		}
	} else if this.Id == nil {
		return false
	} else if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *GatewayIdentifier_Plain) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayIdentifier_Plain)
	if !ok {
		that2, ok := that.(GatewayIdentifier_Plain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Plain != that1.Plain {
		return false
	}
	return true
}
func (this *GatewayIdentifier_Hash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayIdentifier_Hash)
	if !ok {
		that2, ok := that.(GatewayIdentifier_Hash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	return true
}
func (this *GatewayLocation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayLocation)
	if !ok {
		that2, ok := that.(GatewayLocation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *GatewayLocation_Terrestrial_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayLocation_Terrestrial_)
	if !ok {
		that2, ok := that.(GatewayLocation_Terrestrial_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Terrestrial.Equal(that1.Terrestrial) {
		return false
	}
	return true
}
func (this *GatewayLocation_Satellite_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayLocation_Satellite_)
	if !ok {
		that2, ok := that.(GatewayLocation_Satellite_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Satellite.Equal(that1.Satellite) {
		return false
	}
	return true
}
func (this *GatewayLocation_Terrestrial) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayLocation_Terrestrial)
	if !ok {
		that2, ok := that.(GatewayLocation_Terrestrial)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.AntennaPlacement != that1.AntennaPlacement {
		return false
	}
	if !this.AntennaCount.Equal(that1.AntennaCount) {
		return false
	}
	if !this.FineTimestamps.Equal(that1.FineTimestamps) {
		return false
	}
	return true
}
func (this *GatewayLocation_Satellite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayLocation_Satellite)
	if !ok {
		that2, ok := that.(GatewayLocation_Satellite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.FieldOfView != that1.FieldOfView {
		return false
	}
	if len(this.Trajectory) != len(that1.Trajectory) {
		return false
	}
	for i := range this.Trajectory {
		if !this.Trajectory[i].Equal(that1.Trajectory[i]) {
			return false
		}
	}
	return true
}
func (this *GatewayLocationValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayLocationValue)
	if !ok {
		that2, ok := that.(GatewayLocationValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	return true
}
func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if !this.GatewayId.Equal(that1.GatewayId) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if !this.AdministrativeContact.Equal(that1.AdministrativeContact) {
		return false
	}
	if !this.TechnicalContact.Equal(that1.TechnicalContact) {
		return false
	}
	if !this.Online.Equal(that1.Online) {
		return false
	}
	if !this.FrequencyPlan.Equal(that1.FrequencyPlan) {
		return false
	}
	if !this.RxRate.Equal(that1.RxRate) {
		return false
	}
	if !this.TxRate.Equal(that1.TxRate) {
		return false
	}
	return true
}
func (m *GatewayVisibility) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayVisibility) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayVisibility) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.HomeNetworkTenantId) > 0 {
		i -= len(m.HomeNetworkTenantId)
		copy(dAtA[i:], m.HomeNetworkTenantId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.HomeNetworkTenantId)))
		i--
		dAtA[i] = 0x6a
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ForwarderTenantId) > 0 {
		i -= len(m.ForwarderTenantId)
		copy(dAtA[i:], m.ForwarderTenantId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ForwarderTenantId)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x50
	}
	if m.PacketRates {
		i--
		if m.PacketRates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.FrequencyPlan {
		i--
		if m.FrequencyPlan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ContactInfo {
		i--
		if m.ContactInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.FineTimestamps {
		i--
		if m.FineTimestamps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AntennaCount {
		i--
		if m.AntennaCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AntennaPlacement {
		i--
		if m.AntennaPlacement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Location {
		i--
		if m.Location {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayFrequencyPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayFrequencyPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayFrequencyPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FskChannel != nil {
		{
			size, err := m.FskChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LoraSingleSfChannels) > 0 {
		for iNdEx := len(m.LoraSingleSfChannels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoraSingleSfChannels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LoraMultiSfChannels) > 0 {
		for iNdEx := len(m.LoraMultiSfChannels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoraMultiSfChannels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Region != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Region))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bandwidth != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x18
	}
	if m.SpreadingFactor != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.SpreadingFactor))
		i--
		dAtA[i] = 0x10
	}
	if m.Frequency != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayFrequencyPlan_FSKChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayFrequencyPlan_FSKChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayFrequencyPlan_FSKChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Frequency != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Eui != nil {
		{
			size, err := m.Eui.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayIdentifier_Plain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayIdentifier_Plain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Plain)
	copy(dAtA[i:], m.Plain)
	i = encodeVarintGateway(dAtA, i, uint64(len(m.Plain)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *GatewayIdentifier_Hash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayIdentifier_Hash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hash != nil {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *GatewayLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayLocation_Terrestrial_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayLocation_Terrestrial_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Terrestrial != nil {
		{
			size, err := m.Terrestrial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GatewayLocation_Satellite_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayLocation_Satellite_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Satellite != nil {
		{
			size, err := m.Satellite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GatewayLocation_Terrestrial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayLocation_Terrestrial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayLocation_Terrestrial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FineTimestamps != nil {
		{
			size, err := m.FineTimestamps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AntennaCount != nil {
		{
			size, err := m.AntennaCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AntennaPlacement != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.AntennaPlacement))
		i--
		dAtA[i] = 0x10
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayLocation_Satellite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayLocation_Satellite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayLocation_Satellite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trajectory) > 0 {
		for iNdEx := len(m.Trajectory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trajectory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.FieldOfView != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FieldOfView))))
		i--
		dAtA[i] = 0x11
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewayLocationValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayLocationValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayLocationValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Gateway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gateway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gateway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TxRate != nil {
		{
			size, err := m.TxRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.RxRate != nil {
		{
			size, err := m.RxRate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.TechnicalContact != nil {
		{
			size, err := m.TechnicalContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.AdministrativeContact != nil {
		{
			size, err := m.AdministrativeContact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.GatewayId != nil {
		{
			size, err := m.GatewayId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x72
	}
	if m.FrequencyPlan != nil {
		{
			size, err := m.FrequencyPlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Online != nil {
		{
			size, err := m.Online.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	offset -= sovGateway(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGatewayVisibility(r randyGateway, easy bool) *GatewayVisibility {
	this := &GatewayVisibility{}
	this.Location = bool(bool(r.Intn(2) == 0))
	this.AntennaPlacement = bool(bool(r.Intn(2) == 0))
	this.AntennaCount = bool(bool(r.Intn(2) == 0))
	this.FineTimestamps = bool(bool(r.Intn(2) == 0))
	this.ContactInfo = bool(bool(r.Intn(2) == 0))
	this.Status = bool(bool(r.Intn(2) == 0))
	this.FrequencyPlan = bool(bool(r.Intn(2) == 0))
	this.PacketRates = bool(bool(r.Intn(2) == 0))
	this.ForwarderNetId = uint32(r.Uint32())
	this.ForwarderTenantId = string(randStringGateway(r))
	this.HomeNetworkNetId = uint32(r.Uint32())
	this.HomeNetworkTenantId = string(randStringGateway(r))
	if r.Intn(5) != 0 {
		this.UpdatedAt = types.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayFrequencyPlan(r randyGateway, easy bool) *GatewayFrequencyPlan {
	this := &GatewayFrequencyPlan{}
	this.Region = Region([]int32{0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 8, 9, 10, 14}[r.Intn(15)])
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.LoraMultiSfChannels = make([]*GatewayFrequencyPlan_LoRaMultiSFChannel, v1)
		for i := 0; i < v1; i++ {
			this.LoraMultiSfChannels[i] = NewPopulatedGatewayFrequencyPlan_LoRaMultiSFChannel(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.LoraSingleSfChannels = make([]*GatewayFrequencyPlan_LoRaSingleSFChannel, v2)
		for i := 0; i < v2; i++ {
			this.LoraSingleSfChannels[i] = NewPopulatedGatewayFrequencyPlan_LoRaSingleSFChannel(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.FskChannel = NewPopulatedGatewayFrequencyPlan_FSKChannel(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayFrequencyPlan_LoRaMultiSFChannel(r randyGateway, easy bool) *GatewayFrequencyPlan_LoRaMultiSFChannel {
	this := &GatewayFrequencyPlan_LoRaMultiSFChannel{}
	this.Frequency = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayFrequencyPlan_LoRaSingleSFChannel(r randyGateway, easy bool) *GatewayFrequencyPlan_LoRaSingleSFChannel {
	this := &GatewayFrequencyPlan_LoRaSingleSFChannel{}
	this.Frequency = uint64(uint64(r.Uint32()))
	this.SpreadingFactor = uint32(r.Uint32())
	this.Bandwidth = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayFrequencyPlan_FSKChannel(r randyGateway, easy bool) *GatewayFrequencyPlan_FSKChannel {
	this := &GatewayFrequencyPlan_FSKChannel{}
	this.Frequency = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayIdentifier(r randyGateway, easy bool) *GatewayIdentifier {
	this := &GatewayIdentifier{}
	if r.Intn(5) != 0 {
		this.Eui = types.NewPopulatedUInt64Value(r, easy)
	}
	oneofNumber_Id := []int32{2, 3}[r.Intn(2)]
	switch oneofNumber_Id {
	case 2:
		this.Id = NewPopulatedGatewayIdentifier_Plain(r, easy)
	case 3:
		this.Id = NewPopulatedGatewayIdentifier_Hash(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayIdentifier_Plain(r randyGateway, easy bool) *GatewayIdentifier_Plain {
	this := &GatewayIdentifier_Plain{}
	this.Plain = string(randStringGateway(r))
	return this
}
func NewPopulatedGatewayIdentifier_Hash(r randyGateway, easy bool) *GatewayIdentifier_Hash {
	this := &GatewayIdentifier_Hash{}
	v3 := r.Intn(100)
	this.Hash = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Hash[i] = byte(r.Intn(256))
	}
	return this
}
func NewPopulatedGatewayLocation(r randyGateway, easy bool) *GatewayLocation {
	this := &GatewayLocation{}
	oneofNumber_Value := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_Value {
	case 1:
		this.Value = NewPopulatedGatewayLocation_Terrestrial_(r, easy)
	case 2:
		this.Value = NewPopulatedGatewayLocation_Satellite_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayLocation_Terrestrial_(r randyGateway, easy bool) *GatewayLocation_Terrestrial_ {
	this := &GatewayLocation_Terrestrial_{}
	this.Terrestrial = NewPopulatedGatewayLocation_Terrestrial(r, easy)
	return this
}
func NewPopulatedGatewayLocation_Satellite_(r randyGateway, easy bool) *GatewayLocation_Satellite_ {
	this := &GatewayLocation_Satellite_{}
	this.Satellite = NewPopulatedGatewayLocation_Satellite(r, easy)
	return this
}
func NewPopulatedGatewayLocation_Terrestrial(r randyGateway, easy bool) *GatewayLocation_Terrestrial {
	this := &GatewayLocation_Terrestrial{}
	if r.Intn(5) != 0 {
		this.Location = NewPopulatedLocation(r, easy)
	}
	this.AntennaPlacement = TerrestrialAntennaPlacement([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(5) != 0 {
		this.AntennaCount = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FineTimestamps = types.NewPopulatedBoolValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayLocation_Satellite(r randyGateway, easy bool) *GatewayLocation_Satellite {
	this := &GatewayLocation_Satellite{}
	if r.Intn(5) != 0 {
		this.Location = NewPopulatedLocation(r, easy)
	}
	this.FieldOfView = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.FieldOfView *= -1
	}
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.Trajectory = make([]*TimedLocation, v4)
		for i := 0; i < v4; i++ {
			this.Trajectory[i] = NewPopulatedTimedLocation(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayLocationValue(r randyGateway, easy bool) *GatewayLocationValue {
	this := &GatewayLocationValue{}
	if r.Intn(5) != 0 {
		this.Location = NewPopulatedGatewayLocation(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGateway(r randyGateway, easy bool) *Gateway {
	this := &Gateway{}
	this.NetId = uint32(r.Uint32())
	this.ClusterId = string(randStringGateway(r))
	if r.Intn(5) != 0 {
		this.UpdatedAt = types.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Online = types.NewPopulatedBoolValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.FrequencyPlan = NewPopulatedGatewayFrequencyPlan(r, easy)
	}
	this.TenantId = string(randStringGateway(r))
	if r.Intn(5) != 0 {
		this.GatewayId = NewPopulatedGatewayIdentifier(r, easy)
	}
	if r.Intn(5) != 0 {
		this.AdministrativeContact = NewPopulatedContactInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TechnicalContact = NewPopulatedContactInfo(r, easy)
	}
	if r.Intn(5) != 0 {
		this.RxRate = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TxRate = types.NewPopulatedFloatValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Location = NewPopulatedGatewayLocation(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGateway interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGateway(r randyGateway) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGateway(r randyGateway) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneGateway(r)
	}
	return string(tmps)
}
func randUnrecognizedGateway(r randyGateway, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGateway(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGateway(dAtA []byte, r randyGateway, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGateway(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GatewayVisibility) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location {
		n += 2
	}
	if m.AntennaPlacement {
		n += 2
	}
	if m.AntennaCount {
		n += 2
	}
	if m.FineTimestamps {
		n += 2
	}
	if m.ContactInfo {
		n += 2
	}
	if m.Status {
		n += 2
	}
	if m.FrequencyPlan {
		n += 2
	}
	if m.PacketRates {
		n += 2
	}
	if m.ForwarderNetId != 0 {
		n += 1 + sovGateway(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderTenantId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovGateway(uint64(m.HomeNetworkNetId))
	}
	l = len(m.HomeNetworkTenantId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayFrequencyPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Region != 0 {
		n += 1 + sovGateway(uint64(m.Region))
	}
	if len(m.LoraMultiSfChannels) > 0 {
		for _, e := range m.LoraMultiSfChannels {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.LoraSingleSfChannels) > 0 {
		for _, e := range m.LoraSingleSfChannels {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.FskChannel != nil {
		l = m.FskChannel.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovGateway(uint64(m.Frequency))
	}
	return n
}

func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovGateway(uint64(m.Frequency))
	}
	if m.SpreadingFactor != 0 {
		n += 1 + sovGateway(uint64(m.SpreadingFactor))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovGateway(uint64(m.Bandwidth))
	}
	return n
}

func (m *GatewayFrequencyPlan_FSKChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovGateway(uint64(m.Frequency))
	}
	return n
}

func (m *GatewayIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eui != nil {
		l = m.Eui.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Id != nil {
		n += m.Id.Size()
	}
	return n
}

func (m *GatewayIdentifier_Plain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Plain)
	n += 1 + l + sovGateway(uint64(l))
	return n
}
func (m *GatewayIdentifier_Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}
func (m *GatewayLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *GatewayLocation_Terrestrial_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terrestrial != nil {
		l = m.Terrestrial.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}
func (m *GatewayLocation_Satellite_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Satellite != nil {
		l = m.Satellite.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}
func (m *GatewayLocation_Terrestrial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.AntennaPlacement != 0 {
		n += 1 + sovGateway(uint64(m.AntennaPlacement))
	}
	if m.AntennaCount != nil {
		l = m.AntennaCount.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.FineTimestamps != nil {
		l = m.FineTimestamps.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayLocation_Satellite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.FieldOfView != 0 {
		n += 9
	}
	if len(m.Trajectory) > 0 {
		for _, e := range m.Trajectory {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GatewayLocationValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Gateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovGateway(uint64(m.NetId))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Online != nil {
		l = m.Online.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.FrequencyPlan != nil {
		l = m.FrequencyPlan.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.GatewayId != nil {
		l = m.GatewayId.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.AdministrativeContact != nil {
		l = m.AdministrativeContact.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.TechnicalContact != nil {
		l = m.TechnicalContact.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.RxRate != nil {
		l = m.RxRate.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.TxRate != nil {
		l = m.TxRate.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func sovGateway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GatewayVisibility) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayVisibility{`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`AntennaPlacement:` + fmt.Sprintf("%v", this.AntennaPlacement) + `,`,
		`AntennaCount:` + fmt.Sprintf("%v", this.AntennaCount) + `,`,
		`FineTimestamps:` + fmt.Sprintf("%v", this.FineTimestamps) + `,`,
		`ContactInfo:` + fmt.Sprintf("%v", this.ContactInfo) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`FrequencyPlan:` + fmt.Sprintf("%v", this.FrequencyPlan) + `,`,
		`PacketRates:` + fmt.Sprintf("%v", this.PacketRates) + `,`,
		`ForwarderNetId:` + fmt.Sprintf("%v", this.ForwarderNetId) + `,`,
		`ForwarderTenantId:` + fmt.Sprintf("%v", this.ForwarderTenantId) + `,`,
		`HomeNetworkNetId:` + fmt.Sprintf("%v", this.HomeNetworkNetId) + `,`,
		`HomeNetworkTenantId:` + fmt.Sprintf("%v", this.HomeNetworkTenantId) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayFrequencyPlan) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLoraMultiSfChannels := "[]*GatewayFrequencyPlan_LoRaMultiSFChannel{"
	for _, f := range this.LoraMultiSfChannels {
		repeatedStringForLoraMultiSfChannels += strings.Replace(fmt.Sprintf("%v", f), "GatewayFrequencyPlan_LoRaMultiSFChannel", "GatewayFrequencyPlan_LoRaMultiSFChannel", 1) + ","
	}
	repeatedStringForLoraMultiSfChannels += "}"
	repeatedStringForLoraSingleSfChannels := "[]*GatewayFrequencyPlan_LoRaSingleSFChannel{"
	for _, f := range this.LoraSingleSfChannels {
		repeatedStringForLoraSingleSfChannels += strings.Replace(fmt.Sprintf("%v", f), "GatewayFrequencyPlan_LoRaSingleSFChannel", "GatewayFrequencyPlan_LoRaSingleSFChannel", 1) + ","
	}
	repeatedStringForLoraSingleSfChannels += "}"
	s := strings.Join([]string{`&GatewayFrequencyPlan{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`LoraMultiSfChannels:` + repeatedStringForLoraMultiSfChannels + `,`,
		`LoraSingleSfChannels:` + repeatedStringForLoraSingleSfChannels + `,`,
		`FskChannel:` + strings.Replace(fmt.Sprintf("%v", this.FskChannel), "GatewayFrequencyPlan_FSKChannel", "GatewayFrequencyPlan_FSKChannel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayFrequencyPlan_LoRaMultiSFChannel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayFrequencyPlan_LoRaMultiSFChannel{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayFrequencyPlan_LoRaSingleSFChannel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayFrequencyPlan_LoRaSingleSFChannel{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`SpreadingFactor:` + fmt.Sprintf("%v", this.SpreadingFactor) + `,`,
		`Bandwidth:` + fmt.Sprintf("%v", this.Bandwidth) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayFrequencyPlan_FSKChannel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayFrequencyPlan_FSKChannel{`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayIdentifier{`,
		`Eui:` + strings.Replace(fmt.Sprintf("%v", this.Eui), "UInt64Value", "types.UInt64Value", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayIdentifier_Plain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayIdentifier_Plain{`,
		`Plain:` + fmt.Sprintf("%v", this.Plain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayIdentifier_Hash) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayIdentifier_Hash{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayLocation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayLocation{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayLocation_Terrestrial_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayLocation_Terrestrial_{`,
		`Terrestrial:` + strings.Replace(fmt.Sprintf("%v", this.Terrestrial), "GatewayLocation_Terrestrial", "GatewayLocation_Terrestrial", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayLocation_Satellite_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayLocation_Satellite_{`,
		`Satellite:` + strings.Replace(fmt.Sprintf("%v", this.Satellite), "GatewayLocation_Satellite", "GatewayLocation_Satellite", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayLocation_Terrestrial) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayLocation_Terrestrial{`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1) + `,`,
		`AntennaPlacement:` + fmt.Sprintf("%v", this.AntennaPlacement) + `,`,
		`AntennaCount:` + strings.Replace(fmt.Sprintf("%v", this.AntennaCount), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`FineTimestamps:` + strings.Replace(fmt.Sprintf("%v", this.FineTimestamps), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayLocation_Satellite) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTrajectory := "[]*TimedLocation{"
	for _, f := range this.Trajectory {
		repeatedStringForTrajectory += strings.Replace(fmt.Sprintf("%v", f), "TimedLocation", "TimedLocation", 1) + ","
	}
	repeatedStringForTrajectory += "}"
	s := strings.Join([]string{`&GatewayLocation_Satellite{`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1) + `,`,
		`FieldOfView:` + fmt.Sprintf("%v", this.FieldOfView) + `,`,
		`Trajectory:` + repeatedStringForTrajectory + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayLocationValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayLocationValue{`,
		`Location:` + strings.Replace(this.Location.String(), "GatewayLocation", "GatewayLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Gateway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Gateway{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Online:` + strings.Replace(fmt.Sprintf("%v", this.Online), "BoolValue", "types.BoolValue", 1) + `,`,
		`FrequencyPlan:` + strings.Replace(this.FrequencyPlan.String(), "GatewayFrequencyPlan", "GatewayFrequencyPlan", 1) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`GatewayId:` + strings.Replace(this.GatewayId.String(), "GatewayIdentifier", "GatewayIdentifier", 1) + `,`,
		`AdministrativeContact:` + strings.Replace(fmt.Sprintf("%v", this.AdministrativeContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`TechnicalContact:` + strings.Replace(fmt.Sprintf("%v", this.TechnicalContact), "ContactInfo", "ContactInfo", 1) + `,`,
		`RxRate:` + strings.Replace(fmt.Sprintf("%v", this.RxRate), "FloatValue", "types.FloatValue", 1) + `,`,
		`TxRate:` + strings.Replace(fmt.Sprintf("%v", this.TxRate), "FloatValue", "types.FloatValue", 1) + `,`,
		`Location:` + strings.Replace(this.Location.String(), "GatewayLocation", "GatewayLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GatewayVisibility) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayVisibility: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayVisibility: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Location = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaPlacement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AntennaPlacement = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AntennaCount = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineTimestamps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FineTimestamps = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContactInfo = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FrequencyPlan = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketRates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PacketRates = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkTenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeNetworkTenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayFrequencyPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayFrequencyPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayFrequencyPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= Region(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoraMultiSfChannels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoraMultiSfChannels = append(m.LoraMultiSfChannels, &GatewayFrequencyPlan_LoRaMultiSFChannel{})
			if err := m.LoraMultiSfChannels[len(m.LoraMultiSfChannels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoraSingleSfChannels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoraSingleSfChannels = append(m.LoraSingleSfChannels, &GatewayFrequencyPlan_LoRaSingleSFChannel{})
			if err := m.LoraSingleSfChannels[len(m.LoraSingleSfChannels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FskChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FskChannel == nil {
				m.FskChannel = &GatewayFrequencyPlan_FSKChannel{}
			}
			if err := m.FskChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayFrequencyPlan_LoRaMultiSFChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaMultiSFChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaMultiSFChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayFrequencyPlan_LoRaSingleSFChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaSingleSFChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaSingleSFChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadingFactor", wireType)
			}
			m.SpreadingFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpreadingFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayFrequencyPlan_FSKChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSKChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSKChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eui", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eui == nil {
				m.Eui = &types.UInt64Value{}
			}
			if err := m.Eui.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = &GatewayIdentifier_Plain{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Id = &GatewayIdentifier_Hash{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terrestrial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayLocation_Terrestrial{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayLocation_Terrestrial_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Satellite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayLocation_Satellite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayLocation_Satellite_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayLocation_Terrestrial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Terrestrial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Terrestrial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaPlacement", wireType)
			}
			m.AntennaPlacement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AntennaPlacement |= TerrestrialAntennaPlacement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AntennaCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AntennaCount == nil {
				m.AntennaCount = &types.UInt32Value{}
			}
			if err := m.AntennaCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineTimestamps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FineTimestamps == nil {
				m.FineTimestamps = &types.BoolValue{}
			}
			if err := m.FineTimestamps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayLocation_Satellite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Satellite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Satellite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldOfView", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FieldOfView = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trajectory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trajectory = append(m.Trajectory, &TimedLocation{})
			if err := m.Trajectory[len(m.Trajectory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayLocationValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayLocationValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayLocationValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &GatewayLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Gateway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gateway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gateway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Online == nil {
				m.Online = &types.BoolValue{}
			}
			if err := m.Online.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrequencyPlan == nil {
				m.FrequencyPlan = &GatewayFrequencyPlan{}
			}
			if err := m.FrequencyPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayId == nil {
				m.GatewayId = &GatewayIdentifier{}
			}
			if err := m.GatewayId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdministrativeContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdministrativeContact == nil {
				m.AdministrativeContact = &ContactInfo{}
			}
			if err := m.AdministrativeContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnicalContact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TechnicalContact == nil {
				m.TechnicalContact = &ContactInfo{}
			}
			if err := m.TechnicalContact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RxRate == nil {
				m.RxRate = &types.FloatValue{}
			}
			if err := m.RxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxRate == nil {
				m.TxRate = &types.FloatValue{}
			}
			if err := m.TxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &GatewayLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGateway
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGateway
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGateway        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGateway = fmt.Errorf("proto: unexpected end of group")
)
