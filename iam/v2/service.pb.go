// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/iam/v2/service.proto

package iampb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	v3 "go.packetbroker.org/api/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListNetworkAPIKeysRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId *types.UInt32Value `protobuf:"bytes,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId *types.StringValue `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member.
	ClusterId            *types.StringValue `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListNetworkAPIKeysRequest) Reset()      { *m = ListNetworkAPIKeysRequest{} }
func (*ListNetworkAPIKeysRequest) ProtoMessage() {}
func (*ListNetworkAPIKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{0}
}
func (m *ListNetworkAPIKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNetworkAPIKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNetworkAPIKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNetworkAPIKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkAPIKeysRequest.Merge(m, src)
}
func (m *ListNetworkAPIKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNetworkAPIKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkAPIKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkAPIKeysRequest proto.InternalMessageInfo

func (m *ListNetworkAPIKeysRequest) GetNetId() *types.UInt32Value {
	if m != nil {
		return m.NetId
	}
	return nil
}

func (m *ListNetworkAPIKeysRequest) GetTenantId() *types.StringValue {
	if m != nil {
		return m.TenantId
	}
	return nil
}

func (m *ListNetworkAPIKeysRequest) GetClusterId() *types.StringValue {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

type ListNetworkAPIKeysResponse struct {
	Keys                 []*v3.NetworkAPIKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListNetworkAPIKeysResponse) Reset()      { *m = ListNetworkAPIKeysResponse{} }
func (*ListNetworkAPIKeysResponse) ProtoMessage() {}
func (*ListNetworkAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{1}
}
func (m *ListNetworkAPIKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNetworkAPIKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNetworkAPIKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNetworkAPIKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworkAPIKeysResponse.Merge(m, src)
}
func (m *ListNetworkAPIKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNetworkAPIKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworkAPIKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworkAPIKeysResponse proto.InternalMessageInfo

func (m *ListNetworkAPIKeysResponse) GetKeys() []*v3.NetworkAPIKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CreateNetworkAPIKeyRequest struct {
	// LoRa Alliance NetID of the Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// ID assigned by the Member.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Cluster of the Member.
	ClusterId string `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Network rights.
	Rights               []v3.Right `protobuf:"varint,4,rep,packed,name=rights,proto3,enum=org.packetbroker.v3.Right" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateNetworkAPIKeyRequest) Reset()      { *m = CreateNetworkAPIKeyRequest{} }
func (*CreateNetworkAPIKeyRequest) ProtoMessage() {}
func (*CreateNetworkAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{2}
}
func (m *CreateNetworkAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNetworkAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNetworkAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNetworkAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkAPIKeyRequest.Merge(m, src)
}
func (m *CreateNetworkAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNetworkAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkAPIKeyRequest proto.InternalMessageInfo

func (m *CreateNetworkAPIKeyRequest) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *CreateNetworkAPIKeyRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *CreateNetworkAPIKeyRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreateNetworkAPIKeyRequest) GetRights() []v3.Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type APIKeyRequest struct {
	KeyId                string   `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIKeyRequest) Reset()      { *m = APIKeyRequest{} }
func (*APIKeyRequest) ProtoMessage() {}
func (*APIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{3}
}
func (m *APIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKeyRequest.Merge(m, src)
}
func (m *APIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *APIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_APIKeyRequest proto.InternalMessageInfo

func (m *APIKeyRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

type CreateNetworkAPIKeyResponse struct {
	Key                  *v3.NetworkAPIKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateNetworkAPIKeyResponse) Reset()      { *m = CreateNetworkAPIKeyResponse{} }
func (*CreateNetworkAPIKeyResponse) ProtoMessage() {}
func (*CreateNetworkAPIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{4}
}
func (m *CreateNetworkAPIKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNetworkAPIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNetworkAPIKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNetworkAPIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNetworkAPIKeyResponse.Merge(m, src)
}
func (m *CreateNetworkAPIKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateNetworkAPIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNetworkAPIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNetworkAPIKeyResponse proto.InternalMessageInfo

func (m *CreateNetworkAPIKeyResponse) GetKey() *v3.NetworkAPIKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type ListClusterAPIKeysRequest struct {
	// Cluster identifier.
	ClusterId            *types.StringValue `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListClusterAPIKeysRequest) Reset()      { *m = ListClusterAPIKeysRequest{} }
func (*ListClusterAPIKeysRequest) ProtoMessage() {}
func (*ListClusterAPIKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{5}
}
func (m *ListClusterAPIKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClusterAPIKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClusterAPIKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClusterAPIKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterAPIKeysRequest.Merge(m, src)
}
func (m *ListClusterAPIKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListClusterAPIKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterAPIKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterAPIKeysRequest proto.InternalMessageInfo

func (m *ListClusterAPIKeysRequest) GetClusterId() *types.StringValue {
	if m != nil {
		return m.ClusterId
	}
	return nil
}

type ListClusterAPIKeysResponse struct {
	Keys                 []*v3.ClusterAPIKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ListClusterAPIKeysResponse) Reset()      { *m = ListClusterAPIKeysResponse{} }
func (*ListClusterAPIKeysResponse) ProtoMessage() {}
func (*ListClusterAPIKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{6}
}
func (m *ListClusterAPIKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClusterAPIKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClusterAPIKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClusterAPIKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterAPIKeysResponse.Merge(m, src)
}
func (m *ListClusterAPIKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListClusterAPIKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterAPIKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterAPIKeysResponse proto.InternalMessageInfo

func (m *ListClusterAPIKeysResponse) GetKeys() []*v3.ClusterAPIKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CreateClusterAPIKeyRequest struct {
	// Cluster identifier.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Network rights.
	Rights               []v3.Right `protobuf:"varint,2,rep,packed,name=rights,proto3,enum=org.packetbroker.v3.Right" json:"rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateClusterAPIKeyRequest) Reset()      { *m = CreateClusterAPIKeyRequest{} }
func (*CreateClusterAPIKeyRequest) ProtoMessage() {}
func (*CreateClusterAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{7}
}
func (m *CreateClusterAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClusterAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClusterAPIKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClusterAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAPIKeyRequest.Merge(m, src)
}
func (m *CreateClusterAPIKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateClusterAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAPIKeyRequest proto.InternalMessageInfo

func (m *CreateClusterAPIKeyRequest) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *CreateClusterAPIKeyRequest) GetRights() []v3.Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

type CreateClusterAPIKeyResponse struct {
	Key                  *v3.ClusterAPIKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateClusterAPIKeyResponse) Reset()      { *m = CreateClusterAPIKeyResponse{} }
func (*CreateClusterAPIKeyResponse) ProtoMessage() {}
func (*CreateClusterAPIKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{8}
}
func (m *CreateClusterAPIKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClusterAPIKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClusterAPIKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClusterAPIKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAPIKeyResponse.Merge(m, src)
}
func (m *CreateClusterAPIKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateClusterAPIKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAPIKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAPIKeyResponse proto.InternalMessageInfo

func (m *CreateClusterAPIKeyResponse) GetKey() *v3.ClusterAPIKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type ListNetworksRequest struct {
	// Number of items to skip.
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Limit the number of items.
	// If 0, use the server's default.
	// The actual limit may be capped by the server.
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksRequest) Reset()      { *m = ListNetworksRequest{} }
func (*ListNetworksRequest) ProtoMessage() {}
func (*ListNetworksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{9}
}
func (m *ListNetworksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNetworksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNetworksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNetworksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksRequest.Merge(m, src)
}
func (m *ListNetworksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNetworksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksRequest proto.InternalMessageInfo

func (m *ListNetworksRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListNetworksRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListNetworksResponse struct {
	Networks []*v3.NetworkOrTenant `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Total number of networks.
	Total                uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNetworksResponse) Reset()      { *m = ListNetworksResponse{} }
func (*ListNetworksResponse) ProtoMessage() {}
func (*ListNetworksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04cdaf08feadd3d4, []int{10}
}
func (m *ListNetworksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNetworksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNetworksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNetworksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNetworksResponse.Merge(m, src)
}
func (m *ListNetworksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNetworksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNetworksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNetworksResponse proto.InternalMessageInfo

func (m *ListNetworksResponse) GetNetworks() []*v3.NetworkOrTenant {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *ListNetworksResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*ListNetworkAPIKeysRequest)(nil), "org.packetbroker.iam.v2.ListNetworkAPIKeysRequest")
	golang_proto.RegisterType((*ListNetworkAPIKeysRequest)(nil), "org.packetbroker.iam.v2.ListNetworkAPIKeysRequest")
	proto.RegisterType((*ListNetworkAPIKeysResponse)(nil), "org.packetbroker.iam.v2.ListNetworkAPIKeysResponse")
	golang_proto.RegisterType((*ListNetworkAPIKeysResponse)(nil), "org.packetbroker.iam.v2.ListNetworkAPIKeysResponse")
	proto.RegisterType((*CreateNetworkAPIKeyRequest)(nil), "org.packetbroker.iam.v2.CreateNetworkAPIKeyRequest")
	golang_proto.RegisterType((*CreateNetworkAPIKeyRequest)(nil), "org.packetbroker.iam.v2.CreateNetworkAPIKeyRequest")
	proto.RegisterType((*APIKeyRequest)(nil), "org.packetbroker.iam.v2.APIKeyRequest")
	golang_proto.RegisterType((*APIKeyRequest)(nil), "org.packetbroker.iam.v2.APIKeyRequest")
	proto.RegisterType((*CreateNetworkAPIKeyResponse)(nil), "org.packetbroker.iam.v2.CreateNetworkAPIKeyResponse")
	golang_proto.RegisterType((*CreateNetworkAPIKeyResponse)(nil), "org.packetbroker.iam.v2.CreateNetworkAPIKeyResponse")
	proto.RegisterType((*ListClusterAPIKeysRequest)(nil), "org.packetbroker.iam.v2.ListClusterAPIKeysRequest")
	golang_proto.RegisterType((*ListClusterAPIKeysRequest)(nil), "org.packetbroker.iam.v2.ListClusterAPIKeysRequest")
	proto.RegisterType((*ListClusterAPIKeysResponse)(nil), "org.packetbroker.iam.v2.ListClusterAPIKeysResponse")
	golang_proto.RegisterType((*ListClusterAPIKeysResponse)(nil), "org.packetbroker.iam.v2.ListClusterAPIKeysResponse")
	proto.RegisterType((*CreateClusterAPIKeyRequest)(nil), "org.packetbroker.iam.v2.CreateClusterAPIKeyRequest")
	golang_proto.RegisterType((*CreateClusterAPIKeyRequest)(nil), "org.packetbroker.iam.v2.CreateClusterAPIKeyRequest")
	proto.RegisterType((*CreateClusterAPIKeyResponse)(nil), "org.packetbroker.iam.v2.CreateClusterAPIKeyResponse")
	golang_proto.RegisterType((*CreateClusterAPIKeyResponse)(nil), "org.packetbroker.iam.v2.CreateClusterAPIKeyResponse")
	proto.RegisterType((*ListNetworksRequest)(nil), "org.packetbroker.iam.v2.ListNetworksRequest")
	golang_proto.RegisterType((*ListNetworksRequest)(nil), "org.packetbroker.iam.v2.ListNetworksRequest")
	proto.RegisterType((*ListNetworksResponse)(nil), "org.packetbroker.iam.v2.ListNetworksResponse")
	golang_proto.RegisterType((*ListNetworksResponse)(nil), "org.packetbroker.iam.v2.ListNetworksResponse")
}

func init() {
	proto.RegisterFile("packetbroker/api/iam/v2/service.proto", fileDescriptor_04cdaf08feadd3d4)
}
func init() {
	golang_proto.RegisterFile("packetbroker/api/iam/v2/service.proto", fileDescriptor_04cdaf08feadd3d4)
}

var fileDescriptor_04cdaf08feadd3d4 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x3f, 0x4c, 0xdb, 0x58,
	0x18, 0xf7, 0x23, 0x90, 0x23, 0x0f, 0x38, 0x9d, 0x7c, 0x1c, 0xc7, 0x85, 0xbb, 0xef, 0xa8, 0x45,
	0x11, 0x43, 0xeb, 0x48, 0x0e, 0xaa, 0x54, 0xb1, 0xb4, 0x4d, 0x2b, 0x35, 0x6a, 0x45, 0x2b, 0x43,
	0x51, 0xd5, 0xa5, 0x72, 0xc8, 0xc3, 0xb5, 0xec, 0xf8, 0xb9, 0xf6, 0x4b, 0x50, 0x36, 0x46, 0xc6,
	0x8e, 0x55, 0xa7, 0x4a, 0x5d, 0x18, 0x19, 0x19, 0x19, 0x19, 0xd9, 0xca, 0x48, 0xec, 0xa1, 0x8c,
	0x8c, 0x8c, 0x55, 0xec, 0x97, 0x28, 0x4e, 0xec, 0x92, 0x54, 0xa8, 0xe3, 0xf3, 0xfb, 0xfd, 0xbe,
	0x3f, 0xbf, 0xdf, 0xf7, 0xbd, 0x04, 0xdf, 0x76, 0xb4, 0x6d, 0x93, 0xb0, 0x8a, 0x4b, 0x4d, 0xe2,
	0x16, 0x34, 0xc7, 0x28, 0x18, 0x5a, 0xad, 0xd0, 0x50, 0x0a, 0x1e, 0x71, 0x1b, 0xc6, 0x36, 0x91,
	0x1d, 0x97, 0x32, 0x2a, 0xfe, 0x4d, 0x5d, 0x5d, 0xee, 0x85, 0xca, 0x86, 0x56, 0x93, 0x1b, 0x4a,
	0x7e, 0x41, 0xa7, 0x54, 0xb7, 0x48, 0x21, 0x84, 0x55, 0xea, 0x3b, 0x05, 0x52, 0x73, 0x58, 0x33,
	0x62, 0xe5, 0xa1, 0xff, 0x72, 0xd7, 0xd5, 0x1c, 0x87, 0xb8, 0x1e, 0xbf, 0xff, 0x7f, 0x20, 0x79,
	0xa3, 0x58, 0x20, 0x76, 0xbd, 0xd6, 0x01, 0xdc, 0x4a, 0x02, 0x6c, 0x5b, 0x75, 0x8f, 0x11, 0x97,
	0x43, 0xa4, 0x24, 0x88, 0x4d, 0xd8, 0x2e, 0x75, 0x4d, 0x1e, 0x46, 0x3a, 0x41, 0xf8, 0x9f, 0xe7,
	0x86, 0xc7, 0xd6, 0xa3, 0xcf, 0x0f, 0x5f, 0x96, 0x9f, 0x91, 0xa6, 0xa7, 0x92, 0xf7, 0x75, 0xe2,
	0x31, 0xb1, 0x88, 0xb3, 0x36, 0x61, 0x6f, 0x8d, 0xea, 0x3c, 0x5a, 0x44, 0x2b, 0x53, 0xca, 0xbf,
	0x72, 0x54, 0xb6, 0xdc, 0x29, 0x5b, 0x7e, 0x55, 0xb6, 0x59, 0x51, 0xd9, 0xd2, 0xac, 0x3a, 0x51,
	0x27, 0x6c, 0xc2, 0xca, 0x55, 0xf1, 0x3e, 0xce, 0x31, 0x62, 0x6b, 0x76, 0xc8, 0x1b, 0x4b, 0xe1,
	0x6d, 0x30, 0xd7, 0xb0, 0xf5, 0x88, 0x37, 0x19, 0xc1, 0xcb, 0x55, 0x71, 0x0d, 0x63, 0xde, 0x42,
	0x9b, 0x9b, 0x19, 0x82, 0x9b, 0xe3, 0xf8, 0x72, 0x55, 0xda, 0xc4, 0xf9, 0xa4, 0x4e, 0x3c, 0x87,
	0xda, 0x1e, 0x11, 0xef, 0xe1, 0x71, 0x93, 0x34, 0xbd, 0x79, 0xb4, 0x98, 0x59, 0x99, 0x52, 0x24,
	0x79, 0xc0, 0xb5, 0x46, 0x51, 0x8e, 0x51, 0xd5, 0x10, 0x2f, 0x7d, 0x41, 0x38, 0x5f, 0x72, 0x89,
	0xc6, 0x48, 0xfc, 0x96, 0x2b, 0xf4, 0x57, 0x4c, 0xa1, 0x99, 0x8e, 0x06, 0x0b, 0xfd, 0x1a, 0xe4,
	0x7a, 0xba, 0xfc, 0x6f, 0xa0, 0xcb, 0x5c, 0x4f, 0x1f, 0xa2, 0x82, 0xb3, 0xae, 0xa1, 0xbf, 0x63,
	0xde, 0xfc, 0xf8, 0x62, 0x66, 0xe5, 0x77, 0x25, 0x9f, 0x58, 0xab, 0xda, 0x86, 0xa8, 0x1c, 0x29,
	0x2d, 0xe3, 0x99, 0x81, 0xba, 0x4c, 0xd2, 0xec, 0xd4, 0x95, 0x53, 0x27, 0x4c, 0xd2, 0x2c, 0x57,
	0xa5, 0x0d, 0xbc, 0x90, 0xd8, 0x0c, 0x17, 0x69, 0x15, 0x67, 0x4c, 0xd2, 0xe4, 0x66, 0x0f, 0xa3,
	0x51, 0x1b, 0x2e, 0xbd, 0x8e, 0x46, 0xa8, 0x14, 0x75, 0xd0, 0x37, 0x42, 0x37, 0x61, 0x69, 0x7f,
	0xe4, 0x11, 0x2c, 0x8d, 0x51, 0xb9, 0xa5, 0xb4, 0xe3, 0x68, 0xfc, 0x92, 0x17, 0x1c, 0x77, 0x07,
	0xa5, 0xbb, 0x33, 0x36, 0xb4, 0x3b, 0x5d, 0xd5, 0xfb, 0x12, 0x0e, 0xaf, 0x7a, 0x9c, 0x18, 0xaa,
	0x5e, 0xc2, 0x7f, 0xf6, 0x8c, 0x7b, 0x57, 0xef, 0x39, 0x9c, 0xa5, 0x3b, 0x3b, 0x1e, 0x61, 0x7c,
	0x20, 0xf9, 0x49, 0x9c, 0xc5, 0x13, 0x96, 0x51, 0x33, 0x58, 0x38, 0x8d, 0x33, 0x6a, 0x74, 0x90,
	0x6c, 0x3c, 0x1b, 0x0f, 0xc2, 0x4b, 0x7a, 0x80, 0x27, 0x3b, 0x0f, 0x05, 0x97, 0x77, 0xe9, 0x47,
	0xd3, 0xf0, 0xc2, 0xdd, 0x0c, 0x87, 0x5b, 0xed, 0xb2, 0xda, 0xf9, 0x18, 0x65, 0x9a, 0xd5, 0xc9,
	0x17, 0x1e, 0x94, 0xaf, 0x63, 0x58, 0x8c, 0x4d, 0xd0, 0x96, 0x56, 0xb7, 0x98, 0xd8, 0xc0, 0x53,
	0xed, 0x32, 0xb8, 0xc1, 0xa2, 0x22, 0xa7, 0xbc, 0xa9, 0x72, 0xea, 0x53, 0x95, 0x2f, 0x8e, 0xc4,
	0xe1, 0x6d, 0x36, 0xf1, 0x74, 0x64, 0x4c, 0x74, 0x21, 0xa6, 0x07, 0x49, 0x7f, 0x02, 0xf2, 0xab,
	0xa3, 0x91, 0x78, 0xea, 0x75, 0x3c, 0xfd, 0x98, 0x58, 0xa4, 0x9b, 0x7a, 0x39, 0x35, 0x4a, 0x3c,
	0xdb, 0xdc, 0xc0, 0xee, 0x3c, 0x69, 0xff, 0xac, 0x84, 0xca, 0xc6, 0xa6, 0xe4, 0x27, 0x94, 0x4d,
	0xdc, 0xe0, 0x6b, 0x94, 0x4d, 0xd9, 0xcd, 0x51, 0x95, 0x4d, 0x5a, 0xc5, 0x6b, 0x95, 0x4d, 0x5e,
	0xa7, 0x9b, 0x56, 0xf6, 0x1b, 0xc2, 0xbf, 0x95, 0x34, 0xa6, 0x59, 0x54, 0x17, 0x4d, 0x3c, 0xdd,
	0xbb, 0x2f, 0xe2, 0x9d, 0x61, 0xa6, 0xae, 0xab, 0xe4, 0xdd, 0x21, 0xd1, 0xbc, 0x11, 0x8a, 0xff,
	0x68, 0x7f, 0x7f, 0x4a, 0x6b, 0xe4, 0x97, 0x24, 0x7c, 0xf4, 0x09, 0x9d, 0xb4, 0x00, 0x9d, 0xb6,
	0x00, 0x9d, 0xb5, 0x40, 0x38, 0x6f, 0x81, 0x70, 0xd1, 0x02, 0xe1, 0xb2, 0x05, 0xc2, 0x55, 0x0b,
	0xd0, 0x9e, 0x0f, 0x68, 0xdf, 0x07, 0xe1, 0xc0, 0x07, 0x74, 0xe8, 0x83, 0x70, 0xe4, 0x83, 0x70,
	0xec, 0x83, 0x70, 0xe2, 0x03, 0x3a, 0xf5, 0x01, 0x9d, 0xf9, 0x20, 0x9c, 0xfb, 0x80, 0x2e, 0x7c,
	0x10, 0x2e, 0x7d, 0x40, 0x57, 0x3e, 0x08, 0x7b, 0x01, 0x08, 0xfb, 0x01, 0xa0, 0x0f, 0x01, 0x08,
	0x1f, 0x03, 0x40, 0x9f, 0x03, 0x10, 0x0e, 0x02, 0x10, 0x0e, 0x03, 0x40, 0x47, 0x01, 0xa0, 0xe3,
	0x00, 0xd0, 0x9b, 0x25, 0x9d, 0xc6, 0x6b, 0xa4, 0xae, 0xde, 0xf3, 0x7f, 0x6b, 0xcd, 0xd0, 0x6a,
	0x4e, 0xa5, 0x92, 0x0d, 0x6d, 0x29, 0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x57, 0x03, 0x6a, 0x7e,
	0x97, 0x09, 0x00, 0x00,
}

func (this *ListNetworkAPIKeysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNetworkAPIKeysRequest)
	if !ok {
		that2, ok := that.(ListNetworkAPIKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NetId.Equal(that1.NetId) {
		return false
	}
	if !this.TenantId.Equal(that1.TenantId) {
		return false
	}
	if !this.ClusterId.Equal(that1.ClusterId) {
		return false
	}
	return true
}
func (this *ListNetworkAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNetworkAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListNetworkAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *CreateNetworkAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNetworkAPIKeyRequest)
	if !ok {
		that2, ok := that.(CreateNetworkAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetId != that1.NetId {
		return false
	}
	if this.TenantId != that1.TenantId {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *APIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIKeyRequest)
	if !ok {
		that2, ok := that.(APIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	return true
}
func (this *CreateNetworkAPIKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNetworkAPIKeyResponse)
	if !ok {
		that2, ok := that.(CreateNetworkAPIKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}
func (this *ListClusterAPIKeysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClusterAPIKeysRequest)
	if !ok {
		that2, ok := that.(ListClusterAPIKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterId.Equal(that1.ClusterId) {
		return false
	}
	return true
}
func (this *ListClusterAPIKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClusterAPIKeysResponse)
	if !ok {
		that2, ok := that.(ListClusterAPIKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if !this.Keys[i].Equal(that1.Keys[i]) {
			return false
		}
	}
	return true
}
func (this *CreateClusterAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClusterAPIKeyRequest)
	if !ok {
		that2, ok := that.(CreateClusterAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	return true
}
func (this *CreateClusterAPIKeyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClusterAPIKeyResponse)
	if !ok {
		that2, ok := that.(CreateClusterAPIKeyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Key.Equal(that1.Key) {
		return false
	}
	return true
}
func (this *ListNetworksRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNetworksRequest)
	if !ok {
		that2, ok := that.(ListNetworksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ListNetworksResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNetworksResponse)
	if !ok {
		that2, ok := that.(ListNetworksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Networks) != len(that1.Networks) {
		return false
	}
	for i := range this.Networks {
		if !this.Networks[i].Equal(that1.Networks[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkAPIKeyVaultClient is the client API for NetworkAPIKeyVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkAPIKeyVaultClient interface {
	// List API keys.
	ListAPIKeys(ctx context.Context, in *ListNetworkAPIKeysRequest, opts ...grpc.CallOption) (*ListNetworkAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(ctx context.Context, in *CreateNetworkAPIKeyRequest, opts ...grpc.CallOption) (*CreateNetworkAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type networkAPIKeyVaultClient struct {
	cc *grpc.ClientConn
}

func NewNetworkAPIKeyVaultClient(cc *grpc.ClientConn) NetworkAPIKeyVaultClient {
	return &networkAPIKeyVaultClient{cc}
}

func (c *networkAPIKeyVaultClient) ListAPIKeys(ctx context.Context, in *ListNetworkAPIKeysRequest, opts ...grpc.CallOption) (*ListNetworkAPIKeysResponse, error) {
	out := new(ListNetworkAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) CreateAPIKey(ctx context.Context, in *CreateNetworkAPIKeyRequest, opts ...grpc.CallOption) (*CreateNetworkAPIKeyResponse, error) {
	out := new(CreateNetworkAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIKeyVaultClient) DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.NetworkAPIKeyVault/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAPIKeyVaultServer is the server API for NetworkAPIKeyVault service.
type NetworkAPIKeyVaultServer interface {
	// List API keys.
	ListAPIKeys(context.Context, *ListNetworkAPIKeysRequest) (*ListNetworkAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(context.Context, *CreateNetworkAPIKeyRequest) (*CreateNetworkAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(context.Context, *APIKeyRequest) (*types.Empty, error)
}

// UnimplementedNetworkAPIKeyVaultServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkAPIKeyVaultServer struct {
}

func (*UnimplementedNetworkAPIKeyVaultServer) ListAPIKeys(ctx context.Context, req *ListNetworkAPIKeysRequest) (*ListNetworkAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedNetworkAPIKeyVaultServer) CreateAPIKey(ctx context.Context, req *CreateNetworkAPIKeyRequest) (*CreateNetworkAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedNetworkAPIKeyVaultServer) DeleteAPIKey(ctx context.Context, req *APIKeyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}

func RegisterNetworkAPIKeyVaultServer(s *grpc.Server, srv NetworkAPIKeyVaultServer) {
	s.RegisterService(&_NetworkAPIKeyVault_serviceDesc, srv)
}

func _NetworkAPIKeyVault_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).ListAPIKeys(ctx, req.(*ListNetworkAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).CreateAPIKey(ctx, req.(*CreateNetworkAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPIKeyVault_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIKeyVaultServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.NetworkAPIKeyVault/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIKeyVaultServer).DeleteAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkAPIKeyVault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.NetworkAPIKeyVault",
	HandlerType: (*NetworkAPIKeyVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeys",
			Handler:    _NetworkAPIKeyVault_ListAPIKeys_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _NetworkAPIKeyVault_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _NetworkAPIKeyVault_DeleteAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

// ClusterAPIKeyVaultClient is the client API for ClusterAPIKeyVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterAPIKeyVaultClient interface {
	// List API keys.
	ListAPIKeys(ctx context.Context, in *ListClusterAPIKeysRequest, opts ...grpc.CallOption) (*ListClusterAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(ctx context.Context, in *CreateClusterAPIKeyRequest, opts ...grpc.CallOption) (*CreateClusterAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type clusterAPIKeyVaultClient struct {
	cc *grpc.ClientConn
}

func NewClusterAPIKeyVaultClient(cc *grpc.ClientConn) ClusterAPIKeyVaultClient {
	return &clusterAPIKeyVaultClient{cc}
}

func (c *clusterAPIKeyVaultClient) ListAPIKeys(ctx context.Context, in *ListClusterAPIKeysRequest, opts ...grpc.CallOption) (*ListClusterAPIKeysResponse, error) {
	out := new(ListClusterAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) CreateAPIKey(ctx context.Context, in *CreateClusterAPIKeyRequest, opts ...grpc.CallOption) (*CreateClusterAPIKeyResponse, error) {
	out := new(CreateClusterAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAPIKeyVaultClient) DeleteAPIKey(ctx context.Context, in *APIKeyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.ClusterAPIKeyVault/DeleteAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterAPIKeyVaultServer is the server API for ClusterAPIKeyVault service.
type ClusterAPIKeyVaultServer interface {
	// List API keys.
	ListAPIKeys(context.Context, *ListClusterAPIKeysRequest) (*ListClusterAPIKeysResponse, error)
	// Create an API key.
	CreateAPIKey(context.Context, *CreateClusterAPIKeyRequest) (*CreateClusterAPIKeyResponse, error)
	// Delete an API key.
	DeleteAPIKey(context.Context, *APIKeyRequest) (*types.Empty, error)
}

// UnimplementedClusterAPIKeyVaultServer can be embedded to have forward compatible implementations.
type UnimplementedClusterAPIKeyVaultServer struct {
}

func (*UnimplementedClusterAPIKeyVaultServer) ListAPIKeys(ctx context.Context, req *ListClusterAPIKeysRequest) (*ListClusterAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedClusterAPIKeyVaultServer) CreateAPIKey(ctx context.Context, req *CreateClusterAPIKeyRequest) (*CreateClusterAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedClusterAPIKeyVaultServer) DeleteAPIKey(ctx context.Context, req *APIKeyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIKey not implemented")
}

func RegisterClusterAPIKeyVaultServer(s *grpc.Server, srv ClusterAPIKeyVaultServer) {
	s.RegisterService(&_ClusterAPIKeyVault_serviceDesc, srv)
}

func _ClusterAPIKeyVault_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).ListAPIKeys(ctx, req.(*ListClusterAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).CreateAPIKey(ctx, req.(*CreateClusterAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAPIKeyVault_DeleteAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(APIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAPIKeyVaultServer).DeleteAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.ClusterAPIKeyVault/DeleteAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAPIKeyVaultServer).DeleteAPIKey(ctx, req.(*APIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterAPIKeyVault_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.ClusterAPIKeyVault",
	HandlerType: (*ClusterAPIKeyVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIKeys",
			Handler:    _ClusterAPIKeyVault_ListAPIKeys_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _ClusterAPIKeyVault_CreateAPIKey_Handler,
		},
		{
			MethodName: "DeleteAPIKey",
			Handler:    _ClusterAPIKeyVault_DeleteAPIKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatalogClient interface {
	// List the networks and tenants.
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// List all the networks and tenants that are Home Networks, i.e. those with DevAddr blocks assigned.
	ListHomeNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
}

type catalogClient struct {
	cc *grpc.ClientConn
}

func NewCatalogClient(cc *grpc.ClientConn) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.Catalog/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) ListHomeNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, "/org.packetbroker.iam.v2.Catalog/ListHomeNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
type CatalogServer interface {
	// List the networks and tenants.
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// List all the networks and tenants that are Home Networks, i.e. those with DevAddr blocks assigned.
	ListHomeNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
}

// UnimplementedCatalogServer can be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (*UnimplementedCatalogServer) ListNetworks(ctx context.Context, req *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedCatalogServer) ListHomeNetworks(ctx context.Context, req *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomeNetworks not implemented")
}

func RegisterCatalogServer(s *grpc.Server, srv CatalogServer) {
	s.RegisterService(&_Catalog_serviceDesc, srv)
}

func _Catalog_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.Catalog/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_ListHomeNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).ListHomeNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.packetbroker.iam.v2.Catalog/ListHomeNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).ListHomeNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Catalog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.packetbroker.iam.v2.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworks",
			Handler:    _Catalog_ListNetworks_Handler,
		},
		{
			MethodName: "ListHomeNetworks",
			Handler:    _Catalog_ListHomeNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packetbroker/api/iam/v2/service.proto",
}

func (m *ListNetworkAPIKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworkAPIKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNetworkAPIKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterId != nil {
		{
			size, err := m.ClusterId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TenantId != nil {
		{
			size, err := m.TenantId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != nil {
		{
			size, err := m.NetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListNetworkAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworkAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNetworkAPIKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateNetworkAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNetworkAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNetworkAPIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA5 := make([]byte, len(m.Rights)*10)
		var j4 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintService(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TenantId) > 0 {
		i -= len(m.TenantId)
		copy(dAtA[i:], m.TenantId)
		i = encodeVarintService(dAtA, i, uint64(len(m.TenantId)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetId != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *APIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintService(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNetworkAPIKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNetworkAPIKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNetworkAPIKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListClusterAPIKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClusterAPIKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClusterAPIKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterId != nil {
		{
			size, err := m.ClusterId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *ListClusterAPIKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClusterAPIKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListClusterAPIKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateClusterAPIKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClusterAPIKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClusterAPIKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rights) > 0 {
		dAtA9 := make([]byte, len(m.Rights)*10)
		var j8 int
		for _, num := range m.Rights {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintService(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintService(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateClusterAPIKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClusterAPIKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClusterAPIKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListNetworksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNetworksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListNetworksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNetworksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNetworksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Networks) > 0 {
		for iNdEx := len(m.Networks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Networks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedListNetworkAPIKeysRequest(r randyService, easy bool) *ListNetworkAPIKeysRequest {
	this := &ListNetworkAPIKeysRequest{}
	if r.Intn(5) != 0 {
		this.NetId = types.NewPopulatedUInt32Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.TenantId = types.NewPopulatedStringValue(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ClusterId = types.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListNetworkAPIKeysResponse(r randyService, easy bool) *ListNetworkAPIKeysResponse {
	this := &ListNetworkAPIKeysResponse{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Keys = make([]*v3.NetworkAPIKey, v1)
		for i := 0; i < v1; i++ {
			this.Keys[i] = v3.NewPopulatedNetworkAPIKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateNetworkAPIKeyRequest(r randyService, easy bool) *CreateNetworkAPIKeyRequest {
	this := &CreateNetworkAPIKeyRequest{}
	this.NetId = uint32(r.Uint32())
	this.TenantId = string(randStringService(r))
	this.ClusterId = string(randStringService(r))
	v2 := r.Intn(10)
	this.Rights = make([]v3.Right, v2)
	for i := 0; i < v2; i++ {
		this.Rights[i] = v3.Right([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAPIKeyRequest(r randyService, easy bool) *APIKeyRequest {
	this := &APIKeyRequest{}
	this.KeyId = string(randStringService(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateNetworkAPIKeyResponse(r randyService, easy bool) *CreateNetworkAPIKeyResponse {
	this := &CreateNetworkAPIKeyResponse{}
	if r.Intn(5) != 0 {
		this.Key = v3.NewPopulatedNetworkAPIKey(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClusterAPIKeysRequest(r randyService, easy bool) *ListClusterAPIKeysRequest {
	this := &ListClusterAPIKeysRequest{}
	if r.Intn(5) != 0 {
		this.ClusterId = types.NewPopulatedStringValue(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClusterAPIKeysResponse(r randyService, easy bool) *ListClusterAPIKeysResponse {
	this := &ListClusterAPIKeysResponse{}
	if r.Intn(5) != 0 {
		i3 := r.Intn(5)
		this.Keys = make([]*v3.ClusterAPIKey, i3)
		for i := 0; i < i3; i++ {
			this.Keys[i] = v3.NewPopulatedClusterAPIKey(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateClusterAPIKeyRequest(r randyService, easy bool) *CreateClusterAPIKeyRequest {
	this := &CreateClusterAPIKeyRequest{}
	this.ClusterId = string(randStringService(r))
	v4 := r.Intn(10)
	this.Rights = make([]v3.Right, v4)
	for i := 0; i < v4; i++ {
		this.Rights[i] = v3.Right([]int32{0, 1, 2, 3, 4, 5, 6}[r.Intn(7)])
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateClusterAPIKeyResponse(r randyService, easy bool) *CreateClusterAPIKeyResponse {
	this := &CreateClusterAPIKeyResponse{}
	if r.Intn(5) != 0 {
		this.Key = v3.NewPopulatedClusterAPIKey(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListNetworksRequest(r randyService, easy bool) *ListNetworksRequest {
	this := &ListNetworksRequest{}
	this.Offset = uint32(r.Uint32())
	this.Limit = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListNetworksResponse(r randyService, easy bool) *ListNetworksResponse {
	this := &ListNetworksResponse{}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.Networks = make([]*v3.NetworkOrTenant, v5)
		for i := 0; i < v5; i++ {
			this.Networks[i] = v3.NewPopulatedNetworkOrTenant(r, easy)
		}
	}
	this.Total = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyService interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneService(r randyService) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringService(r randyService) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneService(r)
	}
	return string(tmps)
}
func randUnrecognizedService(r randyService, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldService(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldService(dAtA []byte, r randyService, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateService(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateService(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateService(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateService(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ListNetworkAPIKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != nil {
		l = m.NetId.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.TenantId != nil {
		l = m.TenantId.Size()
		n += 1 + l + sovService(uint64(l))
	}
	if m.ClusterId != nil {
		l = m.ClusterId.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListNetworkAPIKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *CreateNetworkAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovService(uint64(m.NetId))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovService(uint64(e))
		}
		n += 1 + sovService(uint64(l)) + l
	}
	return n
}

func (m *APIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *CreateNetworkAPIKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListClusterAPIKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != nil {
		l = m.ClusterId.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListClusterAPIKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *CreateClusterAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovService(uint64(e))
		}
		n += 1 + sovService(uint64(l)) + l
	}
	return n
}

func (m *CreateClusterAPIKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ListNetworksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovService(uint64(m.Limit))
	}
	return n
}

func (m *ListNetworksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListNetworkAPIKeysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNetworkAPIKeysRequest{`,
		`NetId:` + strings.Replace(fmt.Sprintf("%v", this.NetId), "UInt32Value", "types.UInt32Value", 1) + `,`,
		`TenantId:` + strings.Replace(fmt.Sprintf("%v", this.TenantId), "StringValue", "types.StringValue", 1) + `,`,
		`ClusterId:` + strings.Replace(fmt.Sprintf("%v", this.ClusterId), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNetworkAPIKeysResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeys := "[]*NetworkAPIKey{"
	for _, f := range this.Keys {
		repeatedStringForKeys += strings.Replace(fmt.Sprintf("%v", f), "NetworkAPIKey", "v3.NetworkAPIKey", 1) + ","
	}
	repeatedStringForKeys += "}"
	s := strings.Join([]string{`&ListNetworkAPIKeysResponse{`,
		`Keys:` + repeatedStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNetworkAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNetworkAPIKeyRequest{`,
		`NetId:` + fmt.Sprintf("%v", this.NetId) + `,`,
		`TenantId:` + fmt.Sprintf("%v", this.TenantId) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIKeyRequest{`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNetworkAPIKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNetworkAPIKeyResponse{`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "NetworkAPIKey", "v3.NetworkAPIKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClusterAPIKeysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClusterAPIKeysRequest{`,
		`ClusterId:` + strings.Replace(fmt.Sprintf("%v", this.ClusterId), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClusterAPIKeysResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeys := "[]*ClusterAPIKey{"
	for _, f := range this.Keys {
		repeatedStringForKeys += strings.Replace(fmt.Sprintf("%v", f), "ClusterAPIKey", "v3.ClusterAPIKey", 1) + ","
	}
	repeatedStringForKeys += "}"
	s := strings.Join([]string{`&ListClusterAPIKeysResponse{`,
		`Keys:` + repeatedStringForKeys + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateClusterAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClusterAPIKeyRequest{`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateClusterAPIKeyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClusterAPIKeyResponse{`,
		`Key:` + strings.Replace(fmt.Sprintf("%v", this.Key), "ClusterAPIKey", "v3.ClusterAPIKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNetworksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNetworksRequest{`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNetworksResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworks := "[]*NetworkOrTenant{"
	for _, f := range this.Networks {
		repeatedStringForNetworks += strings.Replace(fmt.Sprintf("%v", f), "NetworkOrTenant", "v3.NetworkOrTenant", 1) + ","
	}
	repeatedStringForNetworks += "}"
	s := strings.Join([]string{`&ListNetworksResponse{`,
		`Networks:` + repeatedStringForNetworks + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListNetworkAPIKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworkAPIKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworkAPIKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetId == nil {
				m.NetId = &types.UInt32Value{}
			}
			if err := m.NetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantId == nil {
				m.TenantId = &types.StringValue{}
			}
			if err := m.TenantId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterId == nil {
				m.ClusterId = &types.StringValue{}
			}
			if err := m.ClusterId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNetworkAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworkAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworkAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &v3.NetworkAPIKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNetworkAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNetworkAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNetworkAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v v3.Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= v3.Right(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Rights) == 0 {
					m.Rights = make([]v3.Right, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v v3.Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= v3.Right(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNetworkAPIKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNetworkAPIKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNetworkAPIKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &v3.NetworkAPIKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClusterAPIKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClusterAPIKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClusterAPIKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterId == nil {
				m.ClusterId = &types.StringValue{}
			}
			if err := m.ClusterId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClusterAPIKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClusterAPIKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClusterAPIKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &v3.ClusterAPIKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClusterAPIKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClusterAPIKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClusterAPIKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v v3.Right
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= v3.Right(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rights = append(m.Rights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Rights) == 0 {
					m.Rights = make([]v3.Right, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v v3.Right
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= v3.Right(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rights = append(m.Rights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClusterAPIKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClusterAPIKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClusterAPIKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &v3.ClusterAPIKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNetworksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNetworksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNetworksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNetworksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &v3.NetworkOrTenant{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
