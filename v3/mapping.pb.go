// Copyright Â© 2020 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: packetbroker/api/v3/mapping.proto

package packetbroker

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GatewayVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Show location.
	Location bool `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
	// Show antenna placement (indoor/outdoor).
	AntennaPlacement bool `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3" json:"antenna_placement,omitempty"`
	// Show antenna count.
	AntennaCount bool `protobuf:"varint,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Show whether the gateway produces fine timestamps.
	FineTimestamps bool `protobuf:"varint,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
	// Show contact information.
	ContactInformation bool `protobuf:"varint,5,opt,name=contact_information,json=contactInformation,proto3" json:"contact_information,omitempty"`
	// Show status (online/offline).
	Status bool `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// Show receive and transmission counters.
	Counters bool `protobuf:"varint,7,opt,name=counters,proto3" json:"counters,omitempty"`
	// Show frequency plan.
	FrequencyPlan bool `protobuf:"varint,8,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
}

func (x *GatewayVisibility) Reset() {
	*x = GatewayVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayVisibility) ProtoMessage() {}

func (x *GatewayVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayVisibility.ProtoReflect.Descriptor instead.
func (*GatewayVisibility) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_mapping_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayVisibility) GetLocation() bool {
	if x != nil {
		return x.Location
	}
	return false
}

func (x *GatewayVisibility) GetAntennaPlacement() bool {
	if x != nil {
		return x.AntennaPlacement
	}
	return false
}

func (x *GatewayVisibility) GetAntennaCount() bool {
	if x != nil {
		return x.AntennaCount
	}
	return false
}

func (x *GatewayVisibility) GetFineTimestamps() bool {
	if x != nil {
		return x.FineTimestamps
	}
	return false
}

func (x *GatewayVisibility) GetContactInformation() bool {
	if x != nil {
		return x.ContactInformation
	}
	return false
}

func (x *GatewayVisibility) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *GatewayVisibility) GetCounters() bool {
	if x != nil {
		return x.Counters
	}
	return false
}

func (x *GatewayVisibility) GetFrequencyPlan() bool {
	if x != nil {
		return x.FrequencyPlan
	}
	return false
}

type GatewayFrequencyPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region of the frequency plan.
	Region         Region                          `protobuf:"varint,1,opt,name=region,proto3,enum=org.packetbroker.v3.Region" json:"region,omitempty"`
	UplinkChannels []*GatewayFrequencyPlan_Channel `protobuf:"bytes,2,rep,name=uplink_channels,json=uplinkChannels,proto3" json:"uplink_channels,omitempty"`
}

func (x *GatewayFrequencyPlan) Reset() {
	*x = GatewayFrequencyPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayFrequencyPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayFrequencyPlan) ProtoMessage() {}

func (x *GatewayFrequencyPlan) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayFrequencyPlan.ProtoReflect.Descriptor instead.
func (*GatewayFrequencyPlan) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_mapping_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayFrequencyPlan) GetRegion() Region {
	if x != nil {
		return x.Region
	}
	return Region_UNKNOWN_REGION
}

func (x *GatewayFrequencyPlan) GetUplinkChannels() []*GatewayFrequencyPlan_Channel {
	if x != nil {
		return x.UplinkChannels
	}
	return nil
}

type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,1,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder cluster of the Forwarder Member.
	ForwarderClusterId string `protobuf:"bytes,2,opt,name=forwarder_cluster_id,json=forwarderClusterId,proto3" json:"forwarder_cluster_id,omitempty"`
	// Unique identifier of the gateway.
	Eui uint64 `protobuf:"fixed64,3,opt,name=eui,proto3" json:"eui,omitempty"`
	// Timestamp when the gateway was last updated.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Types that are assignable to Location:
	//	*Gateway_Terrestrial_
	//	*Gateway_Satellite_
	Location isGateway_Location `protobuf_oneof:"location"`
	// Contact name.
	// Subscribing Home Networks receive this value if the Gateway Visibility has contact_information set.
	ContactName string `protobuf:"bytes,7,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	// Contact email address.
	// Subscribing Home Networks receive this value if the Gateway Visibility has contact_information set.
	ContactEmail string `protobuf:"bytes,8,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	// Contact URL.
	// Subscribing Home Networks receive this value if the Gateway Visibility has contact_information set.
	ContactUrl string `protobuf:"bytes,9,opt,name=contact_url,json=contactUrl,proto3" json:"contact_url,omitempty"`
	// Indicates whether the gateway is online.
	// Subscribing Home Networks receive this value if the Gateway Visibility has status set.
	Online *wrappers.BoolValue `protobuf:"bytes,10,opt,name=online,proto3" json:"online,omitempty"`
	// Total number of received messages.
	// Subscribing Home Networks receive this value if the Gateway Visibility has counters set.
	RxCount *wrappers.UInt64Value `protobuf:"bytes,11,opt,name=rx_count,json=rxCount,proto3" json:"rx_count,omitempty"`
	// Number of transmitted messages.
	// Subscribing Home Networks receive this value if the Gateway Visibility has counters set.
	TxCount *wrappers.UInt64Value `protobuf:"bytes,12,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	// Frequency plan of the gateway.
	// Subscribing Home Networks receive this value if the Gateway Visibility has frequency_plan set.
	FrequencyPlan *GatewayFrequencyPlan `protobuf:"bytes,13,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_mapping_proto_rawDescGZIP(), []int{2}
}

func (x *Gateway) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *Gateway) GetForwarderClusterId() string {
	if x != nil {
		return x.ForwarderClusterId
	}
	return ""
}

func (x *Gateway) GetEui() uint64 {
	if x != nil {
		return x.Eui
	}
	return 0
}

func (x *Gateway) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (m *Gateway) GetLocation() isGateway_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (x *Gateway) GetTerrestrial() *Gateway_Terrestrial {
	if x, ok := x.GetLocation().(*Gateway_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (x *Gateway) GetSatellite() *Gateway_Satellite {
	if x, ok := x.GetLocation().(*Gateway_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

func (x *Gateway) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *Gateway) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Gateway) GetContactUrl() string {
	if x != nil {
		return x.ContactUrl
	}
	return ""
}

func (x *Gateway) GetOnline() *wrappers.BoolValue {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *Gateway) GetRxCount() *wrappers.UInt64Value {
	if x != nil {
		return x.RxCount
	}
	return nil
}

func (x *Gateway) GetTxCount() *wrappers.UInt64Value {
	if x != nil {
		return x.TxCount
	}
	return nil
}

func (x *Gateway) GetFrequencyPlan() *GatewayFrequencyPlan {
	if x != nil {
		return x.FrequencyPlan
	}
	return nil
}

type isGateway_Location interface {
	isGateway_Location()
}

type Gateway_Terrestrial_ struct {
	Terrestrial *Gateway_Terrestrial `protobuf:"bytes,5,opt,name=terrestrial,proto3,oneof"`
}

type Gateway_Satellite_ struct {
	Satellite *Gateway_Satellite `protobuf:"bytes,6,opt,name=satellite,proto3,oneof"`
}

func (*Gateway_Terrestrial_) isGateway_Location() {}

func (*Gateway_Satellite_) isGateway_Location() {}

type GatewayFrequencyPlan_Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Minimum data rate.
	MinDataRate uint32 `protobuf:"varint,2,opt,name=min_data_rate,json=minDataRate,proto3" json:"min_data_rate,omitempty"`
	// Maximum data rate.
	MaxDataRate uint32 `protobuf:"varint,3,opt,name=max_data_rate,json=maxDataRate,proto3" json:"max_data_rate,omitempty"`
	// Modulation.
	Modulation Modulation `protobuf:"varint,4,opt,name=modulation,proto3,enum=org.packetbroker.v3.Modulation" json:"modulation,omitempty"`
}

func (x *GatewayFrequencyPlan_Channel) Reset() {
	*x = GatewayFrequencyPlan_Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayFrequencyPlan_Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayFrequencyPlan_Channel) ProtoMessage() {}

func (x *GatewayFrequencyPlan_Channel) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayFrequencyPlan_Channel.ProtoReflect.Descriptor instead.
func (*GatewayFrequencyPlan_Channel) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_mapping_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GatewayFrequencyPlan_Channel) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GatewayFrequencyPlan_Channel) GetMinDataRate() uint32 {
	if x != nil {
		return x.MinDataRate
	}
	return 0
}

func (x *GatewayFrequencyPlan_Channel) GetMaxDataRate() uint32 {
	if x != nil {
		return x.MaxDataRate
	}
	return 0
}

func (x *GatewayFrequencyPlan_Channel) GetModulation() Modulation {
	if x != nil {
		return x.Modulation
	}
	return Modulation_LORA
}

type Gateway_Terrestrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location of the (first) antenna.
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Antenna placement (indoor/outdoor).
	// Subscribing Home Networks receive this value if the Gateway Visibility has antenna_placement set.
	AntennaPlacement TerrestrialAntennaPlacement `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3,enum=org.packetbroker.v3.TerrestrialAntennaPlacement" json:"antenna_placement,omitempty"`
	// Number of antennas.
	// Subscribing Home Networks receive this value if the Gateway Visibility has antenna_count set.
	AntennaCount *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Indicates whether the gateway produces fine timestamps.
	// Subscribing Home Networks receive this value if the Gateway Visibility has fine_timestamps set.
	FineTimestamps *wrappers.BoolValue `protobuf:"bytes,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
}

func (x *Gateway_Terrestrial) Reset() {
	*x = Gateway_Terrestrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway_Terrestrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_Terrestrial) ProtoMessage() {}

func (x *Gateway_Terrestrial) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_Terrestrial.ProtoReflect.Descriptor instead.
func (*Gateway_Terrestrial) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_mapping_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Gateway_Terrestrial) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Gateway_Terrestrial) GetAntennaPlacement() TerrestrialAntennaPlacement {
	if x != nil {
		return x.AntennaPlacement
	}
	return TerrestrialAntennaPlacement_UNKNOWN_PLACEMENT
}

func (x *Gateway_Terrestrial) GetAntennaCount() *wrappers.UInt32Value {
	if x != nil {
		return x.AntennaCount
	}
	return nil
}

func (x *Gateway_Terrestrial) GetFineTimestamps() *wrappers.BoolValue {
	if x != nil {
		return x.FineTimestamps
	}
	return nil
}

type Gateway_Satellite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Satellite location.
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Field of view (meters).
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	FieldOfView float64 `protobuf:"fixed64,2,opt,name=field_of_view,json=fieldOfView,proto3" json:"field_of_view,omitempty"`
	// Trajectory, typically containing the recent past and projected path.
	// Subscribing Home Networks receive this value if the Gateway Visibility has location set.
	Trajectory []*TimedLocation `protobuf:"bytes,3,rep,name=trajectory,proto3" json:"trajectory,omitempty"`
}

func (x *Gateway_Satellite) Reset() {
	*x = Gateway_Satellite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway_Satellite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_Satellite) ProtoMessage() {}

func (x *Gateway_Satellite) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_mapping_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_Satellite.ProtoReflect.Descriptor instead.
func (*Gateway_Satellite) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_mapping_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Gateway_Satellite) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Gateway_Satellite) GetFieldOfView() float64 {
	if x != nil {
		return x.FieldOfView
	}
	return 0
}

func (x *Gateway_Satellite) GetTrajectory() []*TimedLocation {
	if x != nil {
		return x.Trajectory
	}
	return nil
}

var File_packetbroker_api_v3_mapping_proto protoreflect.FileDescriptor

var file_packetbroker_api_v3_mapping_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6,
	0x02, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xda, 0x02, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x1a, 0xb0, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x09, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x54, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x72, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50,
	0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x1a, 0xaf, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x11, 0x61,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e,
	0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x6e,
	0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x09, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x42, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x29, 0x5a, 0x27, 0x67, 0x6f, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x3b, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_packetbroker_api_v3_mapping_proto_rawDescOnce sync.Once
	file_packetbroker_api_v3_mapping_proto_rawDescData = file_packetbroker_api_v3_mapping_proto_rawDesc
)

func file_packetbroker_api_v3_mapping_proto_rawDescGZIP() []byte {
	file_packetbroker_api_v3_mapping_proto_rawDescOnce.Do(func() {
		file_packetbroker_api_v3_mapping_proto_rawDescData = protoimpl.X.CompressGZIP(file_packetbroker_api_v3_mapping_proto_rawDescData)
	})
	return file_packetbroker_api_v3_mapping_proto_rawDescData
}

var file_packetbroker_api_v3_mapping_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_packetbroker_api_v3_mapping_proto_goTypes = []interface{}{
	(*GatewayVisibility)(nil),            // 0: org.packetbroker.v3.GatewayVisibility
	(*GatewayFrequencyPlan)(nil),         // 1: org.packetbroker.v3.GatewayFrequencyPlan
	(*Gateway)(nil),                      // 2: org.packetbroker.v3.Gateway
	(*GatewayFrequencyPlan_Channel)(nil), // 3: org.packetbroker.v3.GatewayFrequencyPlan.Channel
	(*Gateway_Terrestrial)(nil),          // 4: org.packetbroker.v3.Gateway.Terrestrial
	(*Gateway_Satellite)(nil),            // 5: org.packetbroker.v3.Gateway.Satellite
	(Region)(0),                          // 6: org.packetbroker.v3.Region
	(*timestamp.Timestamp)(nil),          // 7: google.protobuf.Timestamp
	(*wrappers.BoolValue)(nil),           // 8: google.protobuf.BoolValue
	(*wrappers.UInt64Value)(nil),         // 9: google.protobuf.UInt64Value
	(Modulation)(0),                      // 10: org.packetbroker.v3.Modulation
	(*Location)(nil),                     // 11: org.packetbroker.v3.Location
	(TerrestrialAntennaPlacement)(0),     // 12: org.packetbroker.v3.TerrestrialAntennaPlacement
	(*wrappers.UInt32Value)(nil),         // 13: google.protobuf.UInt32Value
	(*TimedLocation)(nil),                // 14: org.packetbroker.v3.TimedLocation
}
var file_packetbroker_api_v3_mapping_proto_depIdxs = []int32{
	6,  // 0: org.packetbroker.v3.GatewayFrequencyPlan.region:type_name -> org.packetbroker.v3.Region
	3,  // 1: org.packetbroker.v3.GatewayFrequencyPlan.uplink_channels:type_name -> org.packetbroker.v3.GatewayFrequencyPlan.Channel
	7,  // 2: org.packetbroker.v3.Gateway.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 3: org.packetbroker.v3.Gateway.terrestrial:type_name -> org.packetbroker.v3.Gateway.Terrestrial
	5,  // 4: org.packetbroker.v3.Gateway.satellite:type_name -> org.packetbroker.v3.Gateway.Satellite
	8,  // 5: org.packetbroker.v3.Gateway.online:type_name -> google.protobuf.BoolValue
	9,  // 6: org.packetbroker.v3.Gateway.rx_count:type_name -> google.protobuf.UInt64Value
	9,  // 7: org.packetbroker.v3.Gateway.tx_count:type_name -> google.protobuf.UInt64Value
	1,  // 8: org.packetbroker.v3.Gateway.frequency_plan:type_name -> org.packetbroker.v3.GatewayFrequencyPlan
	10, // 9: org.packetbroker.v3.GatewayFrequencyPlan.Channel.modulation:type_name -> org.packetbroker.v3.Modulation
	11, // 10: org.packetbroker.v3.Gateway.Terrestrial.location:type_name -> org.packetbroker.v3.Location
	12, // 11: org.packetbroker.v3.Gateway.Terrestrial.antenna_placement:type_name -> org.packetbroker.v3.TerrestrialAntennaPlacement
	13, // 12: org.packetbroker.v3.Gateway.Terrestrial.antenna_count:type_name -> google.protobuf.UInt32Value
	8,  // 13: org.packetbroker.v3.Gateway.Terrestrial.fine_timestamps:type_name -> google.protobuf.BoolValue
	11, // 14: org.packetbroker.v3.Gateway.Satellite.location:type_name -> org.packetbroker.v3.Location
	14, // 15: org.packetbroker.v3.Gateway.Satellite.trajectory:type_name -> org.packetbroker.v3.TimedLocation
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_packetbroker_api_v3_mapping_proto_init() }
func file_packetbroker_api_v3_mapping_proto_init() {
	if File_packetbroker_api_v3_mapping_proto != nil {
		return
	}
	file_packetbroker_api_v3_enums_proto_init()
	file_packetbroker_api_v3_location_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_packetbroker_api_v3_mapping_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_mapping_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayFrequencyPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_mapping_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_mapping_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayFrequencyPlan_Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_mapping_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway_Terrestrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_mapping_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway_Satellite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_packetbroker_api_v3_mapping_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Gateway_Terrestrial_)(nil),
		(*Gateway_Satellite_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packetbroker_api_v3_mapping_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packetbroker_api_v3_mapping_proto_goTypes,
		DependencyIndexes: file_packetbroker_api_v3_mapping_proto_depIdxs,
		MessageInfos:      file_packetbroker_api_v3_mapping_proto_msgTypes,
	}.Build()
	File_packetbroker_api_v3_mapping_proto = out.File
	file_packetbroker_api_v3_mapping_proto_rawDesc = nil
	file_packetbroker_api_v3_mapping_proto_goTypes = nil
	file_packetbroker_api_v3_mapping_proto_depIdxs = nil
}
