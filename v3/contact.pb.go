// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v3/contact.proto

package packetbroker

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContactInfo struct {
	// Person or organization name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Email address.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// URL.
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContactInfo) Reset()      { *m = ContactInfo{} }
func (*ContactInfo) ProtoMessage() {}
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_eea700e68c0af50b, []int{0}
}
func (m *ContactInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactInfo.Merge(m, src)
}
func (m *ContactInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContactInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContactInfo proto.InternalMessageInfo

func (m *ContactInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContactInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ContactInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ContactInfoValue struct {
	Value                *ContactInfo `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ContactInfoValue) Reset()      { *m = ContactInfoValue{} }
func (*ContactInfoValue) ProtoMessage() {}
func (*ContactInfoValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_eea700e68c0af50b, []int{1}
}
func (m *ContactInfoValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactInfoValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactInfoValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactInfoValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactInfoValue.Merge(m, src)
}
func (m *ContactInfoValue) XXX_Size() int {
	return m.Size()
}
func (m *ContactInfoValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactInfoValue.DiscardUnknown(m)
}

var xxx_messageInfo_ContactInfoValue proto.InternalMessageInfo

func (m *ContactInfoValue) GetValue() *ContactInfo {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*ContactInfo)(nil), "org.packetbroker.v3.ContactInfo")
	golang_proto.RegisterType((*ContactInfo)(nil), "org.packetbroker.v3.ContactInfo")
	proto.RegisterType((*ContactInfoValue)(nil), "org.packetbroker.v3.ContactInfoValue")
	golang_proto.RegisterType((*ContactInfoValue)(nil), "org.packetbroker.v3.ContactInfoValue")
}

func init() { proto.RegisterFile("packetbroker/api/v3/contact.proto", fileDescriptor_eea700e68c0af50b) }
func init() {
	golang_proto.RegisterFile("packetbroker/api/v3/contact.proto", fileDescriptor_eea700e68c0af50b)
}

var fileDescriptor_eea700e68c0af50b = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x2f, 0x4c, 0x42, 0x51,
	0x18, 0xc5, 0xbf, 0x4f, 0xc4, 0xcd, 0x4b, 0x61, 0x57, 0x03, 0xe9, 0x0c, 0x29, 0x9a, 0x1e, 0x9b,
	0x6c, 0x16, 0x9b, 0x26, 0x8c, 0x04, 0x83, 0xed, 0xc2, 0x9e, 0x8c, 0xf1, 0xe7, 0xb2, 0xbb, 0x07,
	0x99, 0x48, 0x34, 0x5a, 0xdc, 0x8c, 0x44, 0x22, 0x91, 0x48, 0x24, 0x12, 0xb9, 0xdf, 0x2d, 0x44,
	0x22, 0xd1, 0xf1, 0x30, 0x3c, 0x37, 0xdb, 0xf9, 0xce, 0x7e, 0xdf, 0xd9, 0xd9, 0x51, 0x37, 0x43,
	0xd3, 0xea, 0xc6, 0x49, 0xd3, 0xd9, 0x6e, 0xec, 0xaa, 0x66, 0xd8, 0xa9, 0x8e, 0x6b, 0xd5, 0x96,
	0x1d, 0x24, 0xa6, 0x95, 0x44, 0x43, 0x67, 0x13, 0xab, 0xaf, 0xac, 0x6b, 0x47, 0x59, 0x2c, 0x1a,
	0xd7, 0x2a, 0x75, 0x55, 0x78, 0x3e, 0x51, 0xf5, 0xc1, 0xbb, 0xd5, 0x5a, 0x9d, 0x0f, 0x4c, 0x3f,
	0x2e, 0x71, 0x99, 0xef, 0x2e, 0x1b, 0xa9, 0xd6, 0xd7, 0x2a, 0x1f, 0xf7, 0x4d, 0xa7, 0x57, 0x3a,
	0x4b, 0xcd, 0xd3, 0xa1, 0x8b, 0x2a, 0x37, 0x72, 0xbd, 0x52, 0x2e, 0xf5, 0x8e, 0xb2, 0xf2, 0xa2,
	0x8a, 0x99, 0xa8, 0x57, 0xd3, 0x1b, 0xc5, 0xfa, 0x41, 0xe5, 0xc7, 0x47, 0x91, 0x06, 0x16, 0xee,
	0xcb, 0xd1, 0x3f, 0x1d, 0xa2, 0xcc, 0x57, 0xe3, 0x84, 0x3f, 0x7d, 0xf1, 0xca, 0x83, 0xd7, 0x1e,
	0xbc, 0xf1, 0xa0, 0xad, 0x07, 0xed, 0x3c, 0x68, 0xef, 0x41, 0x07, 0x0f, 0x9e, 0x08, 0x78, 0x2a,
	0xa0, 0x99, 0x80, 0xe7, 0x02, 0x5a, 0x08, 0x68, 0x29, 0xa0, 0x95, 0x80, 0xd7, 0x02, 0xde, 0x08,
	0x68, 0x2b, 0xe0, 0x9d, 0x80, 0xf6, 0x02, 0x3e, 0x08, 0x68, 0x12, 0x40, 0xd3, 0x00, 0xfe, 0x08,
	0xa0, 0xcf, 0x00, 0xfe, 0x0e, 0xa0, 0x59, 0x00, 0xcd, 0x03, 0x78, 0x11, 0xc0, 0xcb, 0x00, 0x7e,
	0xbb, 0x6d, 0xdb, 0xbf, 0xed, 0xac, 0x6b, 0xff, 0x8e, 0xf9, 0x98, 0xf5, 0x9b, 0x17, 0xe9, 0xa4,
	0xb5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0xcb, 0xf1, 0x67, 0x77, 0x01, 0x00, 0x00,
}

func (this *ContactInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContactInfo)
	if !ok {
		that2, ok := that.(ContactInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *ContactInfoValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContactInfoValue)
	if !ok {
		that2, ok := that.(ContactInfoValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (m *ContactInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintContact(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContactInfoValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactInfoValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactInfoValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContact(dAtA []byte, offset int, v uint64) int {
	offset -= sovContact(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedContactInfo(r randyContact, easy bool) *ContactInfo {
	this := &ContactInfo{}
	this.Name = string(randStringContact(r))
	this.Email = string(randStringContact(r))
	this.Url = string(randStringContact(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedContactInfoValue(r randyContact, easy bool) *ContactInfoValue {
	this := &ContactInfoValue{}
	if r.Intn(5) != 0 {
		this.Value = NewPopulatedContactInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyContact interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneContact(r randyContact) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringContact(r randyContact) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneContact(r)
	}
	return string(tmps)
}
func randUnrecognizedContact(r randyContact, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldContact(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldContact(dAtA []byte, r randyContact, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateContact(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateContact(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateContact(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateContact(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateContact(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateContact(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateContact(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ContactInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovContact(uint64(l))
	}
	return n
}

func (m *ContactInfoValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovContact(uint64(l))
	}
	return n
}

func sovContact(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContact(x uint64) (n int) {
	return sovContact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContactInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContactInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ContactInfoValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContactInfoValue{`,
		`Value:` + strings.Replace(this.Value.String(), "ContactInfo", "ContactInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringContact(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContactInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContactInfoValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactInfoValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactInfoValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &ContactInfo{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContact
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContact
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContact
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContact        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContact          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContact = fmt.Errorf("proto: unexpected end of group")
)
