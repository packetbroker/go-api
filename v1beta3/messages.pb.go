// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v1beta3/messages.proto

package packetbroker

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Teaser of PHYPayload.
type PHYPayloadTeaser struct {
	// SHA-256 hash of PHYPayload.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*PHYPayloadTeaser_JoinRequest
	//	*PHYPayloadTeaser_Mac
	Payload isPHYPayloadTeaser_Payload `protobuf_oneof:"payload"`
}

func (m *PHYPayloadTeaser) Reset()         { *m = PHYPayloadTeaser{} }
func (m *PHYPayloadTeaser) String() string { return proto.CompactTextString(m) }
func (*PHYPayloadTeaser) ProtoMessage()    {}
func (*PHYPayloadTeaser) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{0}
}
func (m *PHYPayloadTeaser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PHYPayloadTeaser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PHYPayloadTeaser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PHYPayloadTeaser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PHYPayloadTeaser.Merge(m, src)
}
func (m *PHYPayloadTeaser) XXX_Size() int {
	return m.Size()
}
func (m *PHYPayloadTeaser) XXX_DiscardUnknown() {
	xxx_messageInfo_PHYPayloadTeaser.DiscardUnknown(m)
}

var xxx_messageInfo_PHYPayloadTeaser proto.InternalMessageInfo

type isPHYPayloadTeaser_Payload interface {
	isPHYPayloadTeaser_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PHYPayloadTeaser_JoinRequest struct {
	JoinRequest *PHYPayloadTeaser_JoinRequestTeaser `protobuf:"bytes,2,opt,name=join_request,json=joinRequest,proto3,oneof" json:"join_request,omitempty"`
}
type PHYPayloadTeaser_Mac struct {
	Mac *PHYPayloadTeaser_MACPayloadTeaser `protobuf:"bytes,3,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
}

func (*PHYPayloadTeaser_JoinRequest) isPHYPayloadTeaser_Payload() {}
func (*PHYPayloadTeaser_Mac) isPHYPayloadTeaser_Payload()         {}

func (m *PHYPayloadTeaser) GetPayload() isPHYPayloadTeaser_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PHYPayloadTeaser) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PHYPayloadTeaser) GetJoinRequest() *PHYPayloadTeaser_JoinRequestTeaser {
	if x, ok := m.GetPayload().(*PHYPayloadTeaser_JoinRequest); ok {
		return x.JoinRequest
	}
	return nil
}

func (m *PHYPayloadTeaser) GetMac() *PHYPayloadTeaser_MACPayloadTeaser {
	if x, ok := m.GetPayload().(*PHYPayloadTeaser_Mac); ok {
		return x.Mac
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PHYPayloadTeaser) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PHYPayloadTeaser_JoinRequest)(nil),
		(*PHYPayloadTeaser_Mac)(nil),
	}
}

type PHYPayloadTeaser_JoinRequestTeaser struct {
	// JoinEUI of the join-request.
	JoinEui uint64 `protobuf:"fixed64,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// DevEUI of the join-request.
	DevEui uint64 `protobuf:"fixed64,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// DevNonce of the join-request.
	DevNonce uint32 `protobuf:"varint,3,opt,name=dev_nonce,json=devNonce,proto3" json:"dev_nonce,omitempty"`
}

func (m *PHYPayloadTeaser_JoinRequestTeaser) Reset()         { *m = PHYPayloadTeaser_JoinRequestTeaser{} }
func (m *PHYPayloadTeaser_JoinRequestTeaser) String() string { return proto.CompactTextString(m) }
func (*PHYPayloadTeaser_JoinRequestTeaser) ProtoMessage()    {}
func (*PHYPayloadTeaser_JoinRequestTeaser) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{0, 0}
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PHYPayloadTeaser_JoinRequestTeaser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PHYPayloadTeaser_JoinRequestTeaser.Merge(m, src)
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) XXX_Size() int {
	return m.Size()
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) XXX_DiscardUnknown() {
	xxx_messageInfo_PHYPayloadTeaser_JoinRequestTeaser.DiscardUnknown(m)
}

var xxx_messageInfo_PHYPayloadTeaser_JoinRequestTeaser proto.InternalMessageInfo

func (m *PHYPayloadTeaser_JoinRequestTeaser) GetJoinEui() uint64 {
	if m != nil {
		return m.JoinEui
	}
	return 0
}

func (m *PHYPayloadTeaser_JoinRequestTeaser) GetDevEui() uint64 {
	if m != nil {
		return m.DevEui
	}
	return 0
}

func (m *PHYPayloadTeaser_JoinRequestTeaser) GetDevNonce() uint32 {
	if m != nil {
		return m.DevNonce
	}
	return 0
}

type PHYPayloadTeaser_MACPayloadTeaser struct {
	// Indicates whether it is a confirmed or unconfirmed data uplink message.
	Confirmed bool `protobuf:"varint,2,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// DevAddr of the message.
	DevAddr uint32 `protobuf:"varint,3,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Indicates whether the PHYPayload contains FOpts.
	FOpts bool `protobuf:"varint,4,opt,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
	// FCnt of the message.
	FCnt uint32 `protobuf:"varint,5,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// FPort of the message.
	FPort uint32 `protobuf:"varint,6,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Length of the FRMPayload.
	FrmPayloadLength uint32 `protobuf:"varint,7,opt,name=frm_payload_length,json=frmPayloadLength,proto3" json:"frm_payload_length,omitempty"`
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) Reset()         { *m = PHYPayloadTeaser_MACPayloadTeaser{} }
func (m *PHYPayloadTeaser_MACPayloadTeaser) String() string { return proto.CompactTextString(m) }
func (*PHYPayloadTeaser_MACPayloadTeaser) ProtoMessage()    {}
func (*PHYPayloadTeaser_MACPayloadTeaser) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{0, 1}
}
func (m *PHYPayloadTeaser_MACPayloadTeaser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PHYPayloadTeaser_MACPayloadTeaser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PHYPayloadTeaser_MACPayloadTeaser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PHYPayloadTeaser_MACPayloadTeaser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PHYPayloadTeaser_MACPayloadTeaser.Merge(m, src)
}
func (m *PHYPayloadTeaser_MACPayloadTeaser) XXX_Size() int {
	return m.Size()
}
func (m *PHYPayloadTeaser_MACPayloadTeaser) XXX_DiscardUnknown() {
	xxx_messageInfo_PHYPayloadTeaser_MACPayloadTeaser.DiscardUnknown(m)
}

var xxx_messageInfo_PHYPayloadTeaser_MACPayloadTeaser proto.InternalMessageInfo

func (m *PHYPayloadTeaser_MACPayloadTeaser) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) GetDevAddr() uint32 {
	if m != nil {
		return m.DevAddr
	}
	return 0
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) GetFOpts() bool {
	if m != nil {
		return m.FOpts
	}
	return false
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) GetFrmPayloadLength() uint32 {
	if m != nil {
		return m.FrmPayloadLength
	}
	return 0
}

// Teaser of gateway metadata.
type GatewayMetadataTeaser struct {
	// Types that are valid to be assigned to Value:
	//	*GatewayMetadataTeaser_Terrestrial_
	//	*GatewayMetadataTeaser_Satellite_
	Value isGatewayMetadataTeaser_Value `protobuf_oneof:"value"`
}

func (m *GatewayMetadataTeaser) Reset()         { *m = GatewayMetadataTeaser{} }
func (m *GatewayMetadataTeaser) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataTeaser) ProtoMessage()    {}
func (*GatewayMetadataTeaser) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{1}
}
func (m *GatewayMetadataTeaser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataTeaser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataTeaser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataTeaser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataTeaser.Merge(m, src)
}
func (m *GatewayMetadataTeaser) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataTeaser) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataTeaser.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataTeaser proto.InternalMessageInfo

type isGatewayMetadataTeaser_Value interface {
	isGatewayMetadataTeaser_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GatewayMetadataTeaser_Terrestrial_ struct {
	Terrestrial *GatewayMetadataTeaser_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof" json:"terrestrial,omitempty"`
}
type GatewayMetadataTeaser_Satellite_ struct {
	Satellite *GatewayMetadataTeaser_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof" json:"satellite,omitempty"`
}

func (*GatewayMetadataTeaser_Terrestrial_) isGatewayMetadataTeaser_Value() {}
func (*GatewayMetadataTeaser_Satellite_) isGatewayMetadataTeaser_Value()   {}

func (m *GatewayMetadataTeaser) GetValue() isGatewayMetadataTeaser_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GatewayMetadataTeaser) GetTerrestrial() *GatewayMetadataTeaser_Terrestrial {
	if x, ok := m.GetValue().(*GatewayMetadataTeaser_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (m *GatewayMetadataTeaser) GetSatellite() *GatewayMetadataTeaser_Satellite {
	if x, ok := m.GetValue().(*GatewayMetadataTeaser_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GatewayMetadataTeaser) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GatewayMetadataTeaser_Terrestrial_)(nil),
		(*GatewayMetadataTeaser_Satellite_)(nil),
	}
}

type GatewayMetadataTeaser_Terrestrial struct {
	// Indicates whether the metadata contains a fine timestamp.
	FineTimestamp bool `protobuf:"varint,2,opt,name=fine_timestamp,json=fineTimestamp,proto3" json:"fine_timestamp,omitempty"`
}

func (m *GatewayMetadataTeaser_Terrestrial) Reset()         { *m = GatewayMetadataTeaser_Terrestrial{} }
func (m *GatewayMetadataTeaser_Terrestrial) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataTeaser_Terrestrial) ProtoMessage()    {}
func (*GatewayMetadataTeaser_Terrestrial) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{1, 0}
}
func (m *GatewayMetadataTeaser_Terrestrial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataTeaser_Terrestrial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataTeaser_Terrestrial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataTeaser_Terrestrial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataTeaser_Terrestrial.Merge(m, src)
}
func (m *GatewayMetadataTeaser_Terrestrial) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataTeaser_Terrestrial) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataTeaser_Terrestrial.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataTeaser_Terrestrial proto.InternalMessageInfo

func (m *GatewayMetadataTeaser_Terrestrial) GetFineTimestamp() bool {
	if m != nil {
		return m.FineTimestamp
	}
	return false
}

type GatewayMetadataTeaser_Satellite struct {
}

func (m *GatewayMetadataTeaser_Satellite) Reset()         { *m = GatewayMetadataTeaser_Satellite{} }
func (m *GatewayMetadataTeaser_Satellite) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataTeaser_Satellite) ProtoMessage()    {}
func (*GatewayMetadataTeaser_Satellite) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{1, 1}
}
func (m *GatewayMetadataTeaser_Satellite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataTeaser_Satellite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataTeaser_Satellite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataTeaser_Satellite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataTeaser_Satellite.Merge(m, src)
}
func (m *GatewayMetadataTeaser_Satellite) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataTeaser_Satellite) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataTeaser_Satellite.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataTeaser_Satellite proto.InternalMessageInfo

// Terrestrial gateway antenna signal quality.
type TerrestrialGatewayAntennaSignalQuality struct {
	// Received signal strength indicator of the channel (dBm).
	ChannelRssi float32 `protobuf:"fixed32,1,opt,name=channel_rssi,json=channelRssi,proto3" json:"channel_rssi,omitempty"`
	// Received signal strength indicator of the signal (dBm).
	SignalRssi *types.FloatValue `protobuf:"bytes,2,opt,name=signal_rssi,json=signalRssi,proto3" json:"signal_rssi,omitempty"`
	// Standard deviation of the RSSI during preamble.
	RssiStandardDeviation *types.FloatValue `protobuf:"bytes,3,opt,name=rssi_standard_deviation,json=rssiStandardDeviation,proto3" json:"rssi_standard_deviation,omitempty"`
	// Signal-to-noise ratio (dB).
	Snr float32 `protobuf:"fixed32,4,opt,name=snr,proto3" json:"snr,omitempty"`
	// Frequency offset (Hz).
	FrequencyOffset int64 `protobuf:"varint,5,opt,name=frequency_offset,json=frequencyOffset,proto3" json:"frequency_offset,omitempty"`
}

func (m *TerrestrialGatewayAntennaSignalQuality) Reset() {
	*m = TerrestrialGatewayAntennaSignalQuality{}
}
func (m *TerrestrialGatewayAntennaSignalQuality) String() string { return proto.CompactTextString(m) }
func (*TerrestrialGatewayAntennaSignalQuality) ProtoMessage()    {}
func (*TerrestrialGatewayAntennaSignalQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{2}
}
func (m *TerrestrialGatewayAntennaSignalQuality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerrestrialGatewayAntennaSignalQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerrestrialGatewayAntennaSignalQuality.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerrestrialGatewayAntennaSignalQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerrestrialGatewayAntennaSignalQuality.Merge(m, src)
}
func (m *TerrestrialGatewayAntennaSignalQuality) XXX_Size() int {
	return m.Size()
}
func (m *TerrestrialGatewayAntennaSignalQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_TerrestrialGatewayAntennaSignalQuality.DiscardUnknown(m)
}

var xxx_messageInfo_TerrestrialGatewayAntennaSignalQuality proto.InternalMessageInfo

func (m *TerrestrialGatewayAntennaSignalQuality) GetChannelRssi() float32 {
	if m != nil {
		return m.ChannelRssi
	}
	return 0
}

func (m *TerrestrialGatewayAntennaSignalQuality) GetSignalRssi() *types.FloatValue {
	if m != nil {
		return m.SignalRssi
	}
	return nil
}

func (m *TerrestrialGatewayAntennaSignalQuality) GetRssiStandardDeviation() *types.FloatValue {
	if m != nil {
		return m.RssiStandardDeviation
	}
	return nil
}

func (m *TerrestrialGatewayAntennaSignalQuality) GetSnr() float32 {
	if m != nil {
		return m.Snr
	}
	return 0
}

func (m *TerrestrialGatewayAntennaSignalQuality) GetFrequencyOffset() int64 {
	if m != nil {
		return m.FrequencyOffset
	}
	return 0
}

// Gateway metadata signal quality.
type GatewayMetadataSignalQuality struct {
	// Types that are valid to be assigned to Value:
	//	*GatewayMetadataSignalQuality_Terrestrial_
	//	*GatewayMetadataSignalQuality_Satellite_
	Value isGatewayMetadataSignalQuality_Value `protobuf_oneof:"value"`
}

func (m *GatewayMetadataSignalQuality) Reset()         { *m = GatewayMetadataSignalQuality{} }
func (m *GatewayMetadataSignalQuality) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataSignalQuality) ProtoMessage()    {}
func (*GatewayMetadataSignalQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{3}
}
func (m *GatewayMetadataSignalQuality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataSignalQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataSignalQuality.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataSignalQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataSignalQuality.Merge(m, src)
}
func (m *GatewayMetadataSignalQuality) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataSignalQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataSignalQuality.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataSignalQuality proto.InternalMessageInfo

type isGatewayMetadataSignalQuality_Value interface {
	isGatewayMetadataSignalQuality_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GatewayMetadataSignalQuality_Terrestrial_ struct {
	Terrestrial *GatewayMetadataSignalQuality_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof" json:"terrestrial,omitempty"`
}
type GatewayMetadataSignalQuality_Satellite_ struct {
	Satellite *GatewayMetadataSignalQuality_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof" json:"satellite,omitempty"`
}

func (*GatewayMetadataSignalQuality_Terrestrial_) isGatewayMetadataSignalQuality_Value() {}
func (*GatewayMetadataSignalQuality_Satellite_) isGatewayMetadataSignalQuality_Value()   {}

func (m *GatewayMetadataSignalQuality) GetValue() isGatewayMetadataSignalQuality_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GatewayMetadataSignalQuality) GetTerrestrial() *GatewayMetadataSignalQuality_Terrestrial {
	if x, ok := m.GetValue().(*GatewayMetadataSignalQuality_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (m *GatewayMetadataSignalQuality) GetSatellite() *GatewayMetadataSignalQuality_Satellite {
	if x, ok := m.GetValue().(*GatewayMetadataSignalQuality_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GatewayMetadataSignalQuality) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GatewayMetadataSignalQuality_Terrestrial_)(nil),
		(*GatewayMetadataSignalQuality_Satellite_)(nil),
	}
}

type GatewayMetadataSignalQuality_Terrestrial struct {
	Antennas []*GatewayMetadataSignalQuality_Terrestrial_Antenna `protobuf:"bytes,1,rep,name=antennas,proto3" json:"antennas,omitempty"`
}

func (m *GatewayMetadataSignalQuality_Terrestrial) Reset() {
	*m = GatewayMetadataSignalQuality_Terrestrial{}
}
func (m *GatewayMetadataSignalQuality_Terrestrial) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataSignalQuality_Terrestrial) ProtoMessage()    {}
func (*GatewayMetadataSignalQuality_Terrestrial) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{3, 0}
}
func (m *GatewayMetadataSignalQuality_Terrestrial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataSignalQuality_Terrestrial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataSignalQuality_Terrestrial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial.Merge(m, src)
}
func (m *GatewayMetadataSignalQuality_Terrestrial) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataSignalQuality_Terrestrial) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial proto.InternalMessageInfo

func (m *GatewayMetadataSignalQuality_Terrestrial) GetAntennas() []*GatewayMetadataSignalQuality_Terrestrial_Antenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

type GatewayMetadataSignalQuality_Terrestrial_Antenna struct {
	Index uint32                                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value *TerrestrialGatewayAntennaSignalQuality `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) Reset() {
	*m = GatewayMetadataSignalQuality_Terrestrial_Antenna{}
}
func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) String() string {
	return proto.CompactTextString(m)
}
func (*GatewayMetadataSignalQuality_Terrestrial_Antenna) ProtoMessage() {}
func (*GatewayMetadataSignalQuality_Terrestrial_Antenna) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{3, 0, 0}
}
func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial_Antenna.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial_Antenna.Merge(m, src)
}
func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial_Antenna.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataSignalQuality_Terrestrial_Antenna proto.InternalMessageInfo

func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) GetValue() *TerrestrialGatewayAntennaSignalQuality {
	if m != nil {
		return m.Value
	}
	return nil
}

type GatewayMetadataSignalQuality_Satellite struct {
}

func (m *GatewayMetadataSignalQuality_Satellite) Reset() {
	*m = GatewayMetadataSignalQuality_Satellite{}
}
func (m *GatewayMetadataSignalQuality_Satellite) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataSignalQuality_Satellite) ProtoMessage()    {}
func (*GatewayMetadataSignalQuality_Satellite) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{3, 1}
}
func (m *GatewayMetadataSignalQuality_Satellite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataSignalQuality_Satellite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataSignalQuality_Satellite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataSignalQuality_Satellite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataSignalQuality_Satellite.Merge(m, src)
}
func (m *GatewayMetadataSignalQuality_Satellite) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataSignalQuality_Satellite) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataSignalQuality_Satellite.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataSignalQuality_Satellite proto.InternalMessageInfo

// Gateway metadata for localization.
type GatewayMetadataLocalization struct {
	// Types that are valid to be assigned to Value:
	//	*GatewayMetadataLocalization_Terrestrial_
	//	*GatewayMetadataLocalization_Satellite_
	Value isGatewayMetadataLocalization_Value `protobuf_oneof:"value"`
}

func (m *GatewayMetadataLocalization) Reset()         { *m = GatewayMetadataLocalization{} }
func (m *GatewayMetadataLocalization) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataLocalization) ProtoMessage()    {}
func (*GatewayMetadataLocalization) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{4}
}
func (m *GatewayMetadataLocalization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataLocalization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataLocalization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataLocalization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataLocalization.Merge(m, src)
}
func (m *GatewayMetadataLocalization) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataLocalization) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataLocalization.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataLocalization proto.InternalMessageInfo

type isGatewayMetadataLocalization_Value interface {
	isGatewayMetadataLocalization_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GatewayMetadataLocalization_Terrestrial_ struct {
	Terrestrial *GatewayMetadataLocalization_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof" json:"terrestrial,omitempty"`
}
type GatewayMetadataLocalization_Satellite_ struct {
	Satellite *GatewayMetadataLocalization_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof" json:"satellite,omitempty"`
}

func (*GatewayMetadataLocalization_Terrestrial_) isGatewayMetadataLocalization_Value() {}
func (*GatewayMetadataLocalization_Satellite_) isGatewayMetadataLocalization_Value()   {}

func (m *GatewayMetadataLocalization) GetValue() isGatewayMetadataLocalization_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GatewayMetadataLocalization) GetTerrestrial() *GatewayMetadataLocalization_Terrestrial {
	if x, ok := m.GetValue().(*GatewayMetadataLocalization_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (m *GatewayMetadataLocalization) GetSatellite() *GatewayMetadataLocalization_Satellite {
	if x, ok := m.GetValue().(*GatewayMetadataLocalization_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GatewayMetadataLocalization) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GatewayMetadataLocalization_Terrestrial_)(nil),
		(*GatewayMetadataLocalization_Satellite_)(nil),
	}
}

type GatewayMetadataLocalization_Terrestrial struct {
	Antennas []*GatewayMetadataLocalization_Terrestrial_Antenna `protobuf:"bytes,1,rep,name=antennas,proto3" json:"antennas,omitempty"`
}

func (m *GatewayMetadataLocalization_Terrestrial) Reset() {
	*m = GatewayMetadataLocalization_Terrestrial{}
}
func (m *GatewayMetadataLocalization_Terrestrial) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataLocalization_Terrestrial) ProtoMessage()    {}
func (*GatewayMetadataLocalization_Terrestrial) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{4, 0}
}
func (m *GatewayMetadataLocalization_Terrestrial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataLocalization_Terrestrial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataLocalization_Terrestrial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataLocalization_Terrestrial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataLocalization_Terrestrial.Merge(m, src)
}
func (m *GatewayMetadataLocalization_Terrestrial) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataLocalization_Terrestrial) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataLocalization_Terrestrial.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataLocalization_Terrestrial proto.InternalMessageInfo

func (m *GatewayMetadataLocalization_Terrestrial) GetAntennas() []*GatewayMetadataLocalization_Terrestrial_Antenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

type GatewayMetadataLocalization_Terrestrial_Antenna struct {
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Location of the antenna.
	Location *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Fine timestamp.
	FineTimestamp *types.UInt64Value `protobuf:"bytes,3,opt,name=fine_timestamp,json=fineTimestamp,proto3" json:"fine_timestamp,omitempty"`
	// Signal quality.
	SignalQuality *TerrestrialGatewayAntennaSignalQuality `protobuf:"bytes,4,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) Reset() {
	*m = GatewayMetadataLocalization_Terrestrial_Antenna{}
}
func (m *GatewayMetadataLocalization_Terrestrial_Antenna) String() string {
	return proto.CompactTextString(m)
}
func (*GatewayMetadataLocalization_Terrestrial_Antenna) ProtoMessage() {}
func (*GatewayMetadataLocalization_Terrestrial_Antenna) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{4, 0, 0}
}
func (m *GatewayMetadataLocalization_Terrestrial_Antenna) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataLocalization_Terrestrial_Antenna) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataLocalization_Terrestrial_Antenna.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataLocalization_Terrestrial_Antenna) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataLocalization_Terrestrial_Antenna.Merge(m, src)
}
func (m *GatewayMetadataLocalization_Terrestrial_Antenna) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataLocalization_Terrestrial_Antenna) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataLocalization_Terrestrial_Antenna.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataLocalization_Terrestrial_Antenna proto.InternalMessageInfo

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) GetFineTimestamp() *types.UInt64Value {
	if m != nil {
		return m.FineTimestamp
	}
	return nil
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) GetSignalQuality() *TerrestrialGatewayAntennaSignalQuality {
	if m != nil {
		return m.SignalQuality
	}
	return nil
}

type GatewayMetadataLocalization_Satellite struct {
	// Satellite location.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *GatewayMetadataLocalization_Satellite) Reset()         { *m = GatewayMetadataLocalization_Satellite{} }
func (m *GatewayMetadataLocalization_Satellite) String() string { return proto.CompactTextString(m) }
func (*GatewayMetadataLocalization_Satellite) ProtoMessage()    {}
func (*GatewayMetadataLocalization_Satellite) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{4, 1}
}
func (m *GatewayMetadataLocalization_Satellite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayMetadataLocalization_Satellite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayMetadataLocalization_Satellite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewayMetadataLocalization_Satellite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayMetadataLocalization_Satellite.Merge(m, src)
}
func (m *GatewayMetadataLocalization_Satellite) XXX_Size() int {
	return m.Size()
}
func (m *GatewayMetadataLocalization_Satellite) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayMetadataLocalization_Satellite.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayMetadataLocalization_Satellite proto.InternalMessageInfo

func (m *GatewayMetadataLocalization_Satellite) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// LoRaWAN uplink data message with encrypted PHYPayload and metadata.
type UplinkMessage struct {
	// Key encryption keys with which data encryption keys are encrypted.
	Keks map[string]*KeyPointer `protobuf:"bytes,1,rep,name=keks,proto3" json:"keks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// LoRaWAN PHYPayload.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has mac_data or application_data set,
	// and if the PHYPayload passes the Routing Filter.
	PhyPayload *UplinkMessage_PHYPayload `protobuf:"bytes,2,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// Timestamp of the packet arrival observed by the Forwarder.
	ForwarderReceiveTime *types.Timestamp `protobuf:"bytes,3,opt,name=forwarder_receive_time,json=forwarderReceiveTime,proto3" json:"forwarder_receive_time,omitempty"`
	// Timestamp of the packet arrival observed by the gateway.
	GatewayReceiveTime *types.Timestamp `protobuf:"bytes,4,opt,name=gateway_receive_time,json=gatewayReceiveTime,proto3" json:"gateway_receive_time,omitempty"`
	// Region of the gateway.
	GatewayRegion Region `protobuf:"varint,5,opt,name=gateway_region,json=gatewayRegion,proto3,enum=org.packetbroker.v1beta3.Region" json:"gateway_region,omitempty"`
	// Data rate index in the gateway's region.
	DataRateIndex uint32 `protobuf:"varint,6,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,7,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Gateway metadata.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has localization or signal_quality set,
	// and if the message passes the Routing Filter.
	GatewayMetadata *UplinkMessage_GatewayMetadata `protobuf:"bytes,8,opt,name=gateway_metadata,json=gatewayMetadata,proto3" json:"gateway_metadata,omitempty"`
	// Forwarder uplink token (optional).
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has allow_downlink set.
	ForwarderUplinkToken []byte `protobuf:"bytes,9,opt,name=forwarder_uplink_token,json=forwarderUplinkToken,proto3" json:"forwarder_uplink_token,omitempty"`
	// Gateway uplink token (optional).
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has allow_downlink set.
	GatewayUplinkToken []byte `protobuf:"bytes,10,opt,name=gateway_uplink_token,json=gatewayUplinkToken,proto3" json:"gateway_uplink_token,omitempty"`
}

func (m *UplinkMessage) Reset()         { *m = UplinkMessage{} }
func (m *UplinkMessage) String() string { return proto.CompactTextString(m) }
func (*UplinkMessage) ProtoMessage()    {}
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{5}
}
func (m *UplinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage.Merge(m, src)
}
func (m *UplinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *UplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage proto.InternalMessageInfo

func (m *UplinkMessage) GetKeks() map[string]*KeyPointer {
	if m != nil {
		return m.Keks
	}
	return nil
}

func (m *UplinkMessage) GetPhyPayload() *UplinkMessage_PHYPayload {
	if m != nil {
		return m.PhyPayload
	}
	return nil
}

func (m *UplinkMessage) GetForwarderReceiveTime() *types.Timestamp {
	if m != nil {
		return m.ForwarderReceiveTime
	}
	return nil
}

func (m *UplinkMessage) GetGatewayReceiveTime() *types.Timestamp {
	if m != nil {
		return m.GatewayReceiveTime
	}
	return nil
}

func (m *UplinkMessage) GetGatewayRegion() Region {
	if m != nil {
		return m.GatewayRegion
	}
	return Region_UNKNOWN_REGION
}

func (m *UplinkMessage) GetDataRateIndex() uint32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

func (m *UplinkMessage) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *UplinkMessage) GetGatewayMetadata() *UplinkMessage_GatewayMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

func (m *UplinkMessage) GetForwarderUplinkToken() []byte {
	if m != nil {
		return m.ForwarderUplinkToken
	}
	return nil
}

func (m *UplinkMessage) GetGatewayUplinkToken() []byte {
	if m != nil {
		return m.GatewayUplinkToken
	}
	return nil
}

type UplinkMessage_PHYPayload struct {
	// Teaser of the PHYPayload.
	Teaser *PHYPayloadTeaser `protobuf:"bytes,1,opt,name=teaser,proto3" json:"teaser,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*UplinkMessage_PHYPayload_Encrypted
	//	*UplinkMessage_PHYPayload_Plain
	Value isUplinkMessage_PHYPayload_Value `protobuf_oneof:"value"`
}

func (m *UplinkMessage_PHYPayload) Reset()         { *m = UplinkMessage_PHYPayload{} }
func (m *UplinkMessage_PHYPayload) String() string { return proto.CompactTextString(m) }
func (*UplinkMessage_PHYPayload) ProtoMessage()    {}
func (*UplinkMessage_PHYPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{5, 1}
}
func (m *UplinkMessage_PHYPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkMessage_PHYPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkMessage_PHYPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UplinkMessage_PHYPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage_PHYPayload.Merge(m, src)
}
func (m *UplinkMessage_PHYPayload) XXX_Size() int {
	return m.Size()
}
func (m *UplinkMessage_PHYPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage_PHYPayload.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage_PHYPayload proto.InternalMessageInfo

type isUplinkMessage_PHYPayload_Value interface {
	isUplinkMessage_PHYPayload_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UplinkMessage_PHYPayload_Encrypted struct {
	Encrypted *EncryptedData `protobuf:"bytes,2,opt,name=encrypted,proto3,oneof" json:"encrypted,omitempty"`
}
type UplinkMessage_PHYPayload_Plain struct {
	Plain []byte `protobuf:"bytes,3,opt,name=plain,proto3,oneof" json:"plain,omitempty"`
}

func (*UplinkMessage_PHYPayload_Encrypted) isUplinkMessage_PHYPayload_Value() {}
func (*UplinkMessage_PHYPayload_Plain) isUplinkMessage_PHYPayload_Value()     {}

func (m *UplinkMessage_PHYPayload) GetValue() isUplinkMessage_PHYPayload_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *UplinkMessage_PHYPayload) GetTeaser() *PHYPayloadTeaser {
	if m != nil {
		return m.Teaser
	}
	return nil
}

func (m *UplinkMessage_PHYPayload) GetEncrypted() *EncryptedData {
	if x, ok := m.GetValue().(*UplinkMessage_PHYPayload_Encrypted); ok {
		return x.Encrypted
	}
	return nil
}

func (m *UplinkMessage_PHYPayload) GetPlain() []byte {
	if x, ok := m.GetValue().(*UplinkMessage_PHYPayload_Plain); ok {
		return x.Plain
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UplinkMessage_PHYPayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UplinkMessage_PHYPayload_Encrypted)(nil),
		(*UplinkMessage_PHYPayload_Plain)(nil),
	}
}

type UplinkMessage_GatewayMetadata struct {
	// Teaser of the gateway metadata.
	Teaser *GatewayMetadataTeaser `protobuf:"bytes,1,opt,name=teaser,proto3" json:"teaser,omitempty"`
	// Signal quality.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has signal_quality set.
	//
	// Types that are valid to be assigned to SignalQuality:
	//	*UplinkMessage_GatewayMetadata_EncryptedSignalQuality
	//	*UplinkMessage_GatewayMetadata_PlainSignalQuality
	SignalQuality isUplinkMessage_GatewayMetadata_SignalQuality `protobuf_oneof:"signal_quality"`
	// Localization.
	// Subscribing Home Networks receive this value if the Uplink Routing Policy has localization set.
	//
	// Types that are valid to be assigned to Localization:
	//	*UplinkMessage_GatewayMetadata_EncryptedLocalization
	//	*UplinkMessage_GatewayMetadata_PlainLocalization
	Localization isUplinkMessage_GatewayMetadata_Localization `protobuf_oneof:"localization"`
}

func (m *UplinkMessage_GatewayMetadata) Reset()         { *m = UplinkMessage_GatewayMetadata{} }
func (m *UplinkMessage_GatewayMetadata) String() string { return proto.CompactTextString(m) }
func (*UplinkMessage_GatewayMetadata) ProtoMessage()    {}
func (*UplinkMessage_GatewayMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{5, 2}
}
func (m *UplinkMessage_GatewayMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkMessage_GatewayMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkMessage_GatewayMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UplinkMessage_GatewayMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage_GatewayMetadata.Merge(m, src)
}
func (m *UplinkMessage_GatewayMetadata) XXX_Size() int {
	return m.Size()
}
func (m *UplinkMessage_GatewayMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage_GatewayMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage_GatewayMetadata proto.InternalMessageInfo

type isUplinkMessage_GatewayMetadata_SignalQuality interface {
	isUplinkMessage_GatewayMetadata_SignalQuality()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isUplinkMessage_GatewayMetadata_Localization interface {
	isUplinkMessage_GatewayMetadata_Localization()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UplinkMessage_GatewayMetadata_EncryptedSignalQuality struct {
	EncryptedSignalQuality *EncryptedData `protobuf:"bytes,2,opt,name=encrypted_signal_quality,json=encryptedSignalQuality,proto3,oneof" json:"encrypted_signal_quality,omitempty"`
}
type UplinkMessage_GatewayMetadata_PlainSignalQuality struct {
	PlainSignalQuality *GatewayMetadataSignalQuality `protobuf:"bytes,3,opt,name=plain_signal_quality,json=plainSignalQuality,proto3,oneof" json:"plain_signal_quality,omitempty"`
}
type UplinkMessage_GatewayMetadata_EncryptedLocalization struct {
	EncryptedLocalization *EncryptedData `protobuf:"bytes,4,opt,name=encrypted_localization,json=encryptedLocalization,proto3,oneof" json:"encrypted_localization,omitempty"`
}
type UplinkMessage_GatewayMetadata_PlainLocalization struct {
	PlainLocalization *GatewayMetadataLocalization `protobuf:"bytes,5,opt,name=plain_localization,json=plainLocalization,proto3,oneof" json:"plain_localization,omitempty"`
}

func (*UplinkMessage_GatewayMetadata_EncryptedSignalQuality) isUplinkMessage_GatewayMetadata_SignalQuality() {
}
func (*UplinkMessage_GatewayMetadata_PlainSignalQuality) isUplinkMessage_GatewayMetadata_SignalQuality() {
}
func (*UplinkMessage_GatewayMetadata_EncryptedLocalization) isUplinkMessage_GatewayMetadata_Localization() {
}
func (*UplinkMessage_GatewayMetadata_PlainLocalization) isUplinkMessage_GatewayMetadata_Localization() {
}

func (m *UplinkMessage_GatewayMetadata) GetSignalQuality() isUplinkMessage_GatewayMetadata_SignalQuality {
	if m != nil {
		return m.SignalQuality
	}
	return nil
}
func (m *UplinkMessage_GatewayMetadata) GetLocalization() isUplinkMessage_GatewayMetadata_Localization {
	if m != nil {
		return m.Localization
	}
	return nil
}

func (m *UplinkMessage_GatewayMetadata) GetTeaser() *GatewayMetadataTeaser {
	if m != nil {
		return m.Teaser
	}
	return nil
}

func (m *UplinkMessage_GatewayMetadata) GetEncryptedSignalQuality() *EncryptedData {
	if x, ok := m.GetSignalQuality().(*UplinkMessage_GatewayMetadata_EncryptedSignalQuality); ok {
		return x.EncryptedSignalQuality
	}
	return nil
}

func (m *UplinkMessage_GatewayMetadata) GetPlainSignalQuality() *GatewayMetadataSignalQuality {
	if x, ok := m.GetSignalQuality().(*UplinkMessage_GatewayMetadata_PlainSignalQuality); ok {
		return x.PlainSignalQuality
	}
	return nil
}

func (m *UplinkMessage_GatewayMetadata) GetEncryptedLocalization() *EncryptedData {
	if x, ok := m.GetLocalization().(*UplinkMessage_GatewayMetadata_EncryptedLocalization); ok {
		return x.EncryptedLocalization
	}
	return nil
}

func (m *UplinkMessage_GatewayMetadata) GetPlainLocalization() *GatewayMetadataLocalization {
	if x, ok := m.GetLocalization().(*UplinkMessage_GatewayMetadata_PlainLocalization); ok {
		return x.PlainLocalization
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UplinkMessage_GatewayMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UplinkMessage_GatewayMetadata_EncryptedSignalQuality)(nil),
		(*UplinkMessage_GatewayMetadata_PlainSignalQuality)(nil),
		(*UplinkMessage_GatewayMetadata_EncryptedLocalization)(nil),
		(*UplinkMessage_GatewayMetadata_PlainLocalization)(nil),
	}
}

// LoRaWAN downlink data message.
type DownlinkMessage struct {
	// PHYPayload of the downlink message.
	PhyPayload []byte `protobuf:"bytes,1,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// RX1 settings.
	Rx1 *DownlinkMessage_RXSettings `protobuf:"bytes,2,opt,name=rx1,proto3" json:"rx1,omitempty"`
	// RX2 settings.
	Rx2 *DownlinkMessage_RXSettings `protobuf:"bytes,3,opt,name=rx2,proto3" json:"rx2,omitempty"`
	// RX1 delay.
	Rx1Delay *types.Duration `protobuf:"bytes,4,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
	// Downlink message class.
	Class DownlinkMessageClass `protobuf:"varint,5,opt,name=class,proto3,enum=org.packetbroker.v1beta3.DownlinkMessageClass" json:"class,omitempty"`
	// Forwarder uplink token, copied from UplinkMessage.
	// If unset, gateway_uplink_token must be set.
	ForwarderUplinkToken []byte `protobuf:"bytes,6,opt,name=forwarder_uplink_token,json=forwarderUplinkToken,proto3" json:"forwarder_uplink_token,omitempty"`
	// Gateway uplink token, copied from UplinkMessage.
	// If unset, forwarder_uplink_token must be set.
	GatewayUplinkToken []byte `protobuf:"bytes,7,opt,name=gateway_uplink_token,json=gatewayUplinkToken,proto3" json:"gateway_uplink_token,omitempty"`
	// Priority of the downlink message.
	Priority DownlinkMessagePriority `protobuf:"varint,8,opt,name=priority,proto3,enum=org.packetbroker.v1beta3.DownlinkMessagePriority" json:"priority,omitempty"`
}

func (m *DownlinkMessage) Reset()         { *m = DownlinkMessage{} }
func (m *DownlinkMessage) String() string { return proto.CompactTextString(m) }
func (*DownlinkMessage) ProtoMessage()    {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{6}
}
func (m *DownlinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownlinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessage.Merge(m, src)
}
func (m *DownlinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessage proto.InternalMessageInfo

func (m *DownlinkMessage) GetPhyPayload() []byte {
	if m != nil {
		return m.PhyPayload
	}
	return nil
}

func (m *DownlinkMessage) GetRx1() *DownlinkMessage_RXSettings {
	if m != nil {
		return m.Rx1
	}
	return nil
}

func (m *DownlinkMessage) GetRx2() *DownlinkMessage_RXSettings {
	if m != nil {
		return m.Rx2
	}
	return nil
}

func (m *DownlinkMessage) GetRx1Delay() *types.Duration {
	if m != nil {
		return m.Rx1Delay
	}
	return nil
}

func (m *DownlinkMessage) GetClass() DownlinkMessageClass {
	if m != nil {
		return m.Class
	}
	return DownlinkMessageClass_CLASS_A
}

func (m *DownlinkMessage) GetForwarderUplinkToken() []byte {
	if m != nil {
		return m.ForwarderUplinkToken
	}
	return nil
}

func (m *DownlinkMessage) GetGatewayUplinkToken() []byte {
	if m != nil {
		return m.GatewayUplinkToken
	}
	return nil
}

func (m *DownlinkMessage) GetPriority() DownlinkMessagePriority {
	if m != nil {
		return m.Priority
	}
	return DownlinkMessagePriority_LOWEST
}

type DownlinkMessage_RXSettings struct {
	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Data rate index as defined in the gateway's LoRaWAN region.
	DataRateIndex uint32 `protobuf:"varint,2,opt,name=data_rate_index,json=dataRateIndex,proto3" json:"data_rate_index,omitempty"`
}

func (m *DownlinkMessage_RXSettings) Reset()         { *m = DownlinkMessage_RXSettings{} }
func (m *DownlinkMessage_RXSettings) String() string { return proto.CompactTextString(m) }
func (*DownlinkMessage_RXSettings) ProtoMessage()    {}
func (*DownlinkMessage_RXSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfa56cf2a07e8eda, []int{6, 0}
}
func (m *DownlinkMessage_RXSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkMessage_RXSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkMessage_RXSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownlinkMessage_RXSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessage_RXSettings.Merge(m, src)
}
func (m *DownlinkMessage_RXSettings) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkMessage_RXSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessage_RXSettings.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessage_RXSettings proto.InternalMessageInfo

func (m *DownlinkMessage_RXSettings) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DownlinkMessage_RXSettings) GetDataRateIndex() uint32 {
	if m != nil {
		return m.DataRateIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*PHYPayloadTeaser)(nil), "org.packetbroker.v1beta3.PHYPayloadTeaser")
	proto.RegisterType((*PHYPayloadTeaser_JoinRequestTeaser)(nil), "org.packetbroker.v1beta3.PHYPayloadTeaser.JoinRequestTeaser")
	proto.RegisterType((*PHYPayloadTeaser_MACPayloadTeaser)(nil), "org.packetbroker.v1beta3.PHYPayloadTeaser.MACPayloadTeaser")
	proto.RegisterType((*GatewayMetadataTeaser)(nil), "org.packetbroker.v1beta3.GatewayMetadataTeaser")
	proto.RegisterType((*GatewayMetadataTeaser_Terrestrial)(nil), "org.packetbroker.v1beta3.GatewayMetadataTeaser.Terrestrial")
	proto.RegisterType((*GatewayMetadataTeaser_Satellite)(nil), "org.packetbroker.v1beta3.GatewayMetadataTeaser.Satellite")
	proto.RegisterType((*TerrestrialGatewayAntennaSignalQuality)(nil), "org.packetbroker.v1beta3.TerrestrialGatewayAntennaSignalQuality")
	proto.RegisterType((*GatewayMetadataSignalQuality)(nil), "org.packetbroker.v1beta3.GatewayMetadataSignalQuality")
	proto.RegisterType((*GatewayMetadataSignalQuality_Terrestrial)(nil), "org.packetbroker.v1beta3.GatewayMetadataSignalQuality.Terrestrial")
	proto.RegisterType((*GatewayMetadataSignalQuality_Terrestrial_Antenna)(nil), "org.packetbroker.v1beta3.GatewayMetadataSignalQuality.Terrestrial.Antenna")
	proto.RegisterType((*GatewayMetadataSignalQuality_Satellite)(nil), "org.packetbroker.v1beta3.GatewayMetadataSignalQuality.Satellite")
	proto.RegisterType((*GatewayMetadataLocalization)(nil), "org.packetbroker.v1beta3.GatewayMetadataLocalization")
	proto.RegisterType((*GatewayMetadataLocalization_Terrestrial)(nil), "org.packetbroker.v1beta3.GatewayMetadataLocalization.Terrestrial")
	proto.RegisterType((*GatewayMetadataLocalization_Terrestrial_Antenna)(nil), "org.packetbroker.v1beta3.GatewayMetadataLocalization.Terrestrial.Antenna")
	proto.RegisterType((*GatewayMetadataLocalization_Satellite)(nil), "org.packetbroker.v1beta3.GatewayMetadataLocalization.Satellite")
	proto.RegisterType((*UplinkMessage)(nil), "org.packetbroker.v1beta3.UplinkMessage")
	proto.RegisterMapType((map[string]*KeyPointer)(nil), "org.packetbroker.v1beta3.UplinkMessage.KeksEntry")
	proto.RegisterType((*UplinkMessage_PHYPayload)(nil), "org.packetbroker.v1beta3.UplinkMessage.PHYPayload")
	proto.RegisterType((*UplinkMessage_GatewayMetadata)(nil), "org.packetbroker.v1beta3.UplinkMessage.GatewayMetadata")
	proto.RegisterType((*DownlinkMessage)(nil), "org.packetbroker.v1beta3.DownlinkMessage")
	proto.RegisterType((*DownlinkMessage_RXSettings)(nil), "org.packetbroker.v1beta3.DownlinkMessage.RXSettings")
}

func init() {
	proto.RegisterFile("packetbroker/api/v1beta3/messages.proto", fileDescriptor_bfa56cf2a07e8eda)
}

var fileDescriptor_bfa56cf2a07e8eda = []byte{
	// 1523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x73, 0x13, 0x47,
	0x16, 0xd7, 0xe8, 0xc3, 0x96, 0x9e, 0xfc, 0x45, 0xaf, 0x0d, 0x42, 0xb8, 0x8c, 0xd7, 0xcb, 0x02,
	0xbb, 0x45, 0xc9, 0x6b, 0xe3, 0x65, 0x77, 0x81, 0xda, 0x5d, 0x7f, 0x61, 0x03, 0x76, 0x70, 0xda,
	0x86, 0x0a, 0xa9, 0x4a, 0x0d, 0x6d, 0x4d, 0x8f, 0x3c, 0x68, 0xd4, 0x33, 0xf4, 0xb4, 0x6c, 0x2b,
	0xe7, 0x9c, 0x52, 0x95, 0xaa, 0xdc, 0x72, 0xc8, 0x21, 0xff, 0x47, 0x2a, 0xa7, 0x9c, 0x52, 0x95,
	0x0b, 0xc7, 0x1c, 0x72, 0x48, 0xc1, 0x3d, 0xf9, 0x17, 0x52, 0xd3, 0xdd, 0x1a, 0xcd, 0x48, 0x96,
	0x91, 0x4d, 0x6e, 0xd3, 0xaf, 0xdf, 0xfb, 0xf5, 0x7b, 0xfd, 0x7b, 0x1f, 0x2d, 0xc1, 0x0d, 0x9f,
	0x54, 0xeb, 0x54, 0xec, 0x73, 0xaf, 0x4e, 0xf9, 0x3c, 0xf1, 0x9d, 0xf9, 0xc3, 0x85, 0x7d, 0x2a,
	0xc8, 0xed, 0xf9, 0x06, 0x0d, 0x02, 0x52, 0xa3, 0x41, 0xc5, 0xe7, 0x9e, 0xf0, 0x50, 0xc9, 0xe3,
	0xb5, 0x4a, 0x5c, 0xb9, 0xa2, 0x15, 0xcb, 0x33, 0x35, 0xcf, 0xab, 0xb9, 0x74, 0x5e, 0xea, 0xed,
	0x37, 0xed, 0x79, 0xab, 0xc9, 0x89, 0x70, 0x3c, 0xa6, 0x2c, 0xcb, 0x57, 0xbb, 0xf7, 0x85, 0xd3,
	0xa0, 0x81, 0x20, 0x0d, 0x5f, 0x2b, 0xf4, 0x00, 0x1c, 0x71, 0xe2, 0xfb, 0x94, 0xeb, 0xa3, 0xcb,
	0xd7, 0xfa, 0xfa, 0x48, 0x59, 0xb3, 0xd1, 0xd6, 0xfa, 0x4b, 0x5f, 0xad, 0x3a, 0x6d, 0xb5, 0x95,
	0xfa, 0x87, 0xeb, 0x7a, 0xd5, 0x98, 0xd3, 0x73, 0x9f, 0x67, 0x61, 0x62, 0x67, 0xf3, 0xf9, 0x0e,
	0x69, 0xb9, 0x1e, 0xb1, 0xf6, 0x28, 0x09, 0x28, 0x47, 0x08, 0xb2, 0x07, 0x24, 0x38, 0x28, 0x19,
	0xb3, 0xc6, 0xcd, 0x11, 0x2c, 0xbf, 0x11, 0x81, 0x91, 0x97, 0x9e, 0xc3, 0x4c, 0x4e, 0x5f, 0x35,
	0x69, 0x20, 0x4a, 0xe9, 0x59, 0xe3, 0x66, 0x71, 0xf1, 0x7e, 0xa5, 0xdf, 0x75, 0x55, 0xba, 0x51,
	0x2b, 0x8f, 0x3c, 0x87, 0x61, 0x65, 0xad, 0x24, 0x9b, 0x29, 0x5c, 0x7c, 0xd9, 0x11, 0xa2, 0x27,
	0x90, 0x69, 0x90, 0x6a, 0x29, 0x23, 0x91, 0xef, 0x9d, 0x01, 0x79, 0x7b, 0x79, 0x35, 0x21, 0xd8,
	0x4c, 0xe1, 0x10, 0xa9, 0x6c, 0xc1, 0x85, 0x9e, 0x43, 0xd1, 0x65, 0xc8, 0xcb, 0x40, 0x68, 0xd3,
	0x91, 0x01, 0x0e, 0xe1, 0xe1, 0x70, 0xbd, 0xde, 0x74, 0xd0, 0x25, 0x18, 0xb6, 0xe8, 0xa1, 0xdc,
	0x49, 0xcb, 0x9d, 0x21, 0x8b, 0x1e, 0x86, 0x1b, 0x57, 0xa0, 0x10, 0x6e, 0x30, 0x8f, 0x55, 0xa9,
	0xf4, 0x6f, 0x14, 0xe7, 0x2d, 0x7a, 0xf8, 0x41, 0xb8, 0x2e, 0x7f, 0x67, 0xc0, 0x44, 0xb7, 0x07,
	0x68, 0x1a, 0x0a, 0x55, 0x8f, 0xd9, 0x0e, 0x6f, 0x50, 0x4b, 0x82, 0xe5, 0x71, 0x47, 0x10, 0xfa,
	0x10, 0xe2, 0x11, 0xcb, 0xe2, 0x1a, 0x2e, 0x3c, 0x78, 0xd9, 0xb2, 0x38, 0x9a, 0x82, 0x21, 0xdb,
	0xf4, 0x7c, 0x11, 0x94, 0xb2, 0xd2, 0x2a, 0x67, 0x3f, 0xf1, 0x45, 0x80, 0xfe, 0x04, 0x39, 0xdb,
	0xac, 0x32, 0x51, 0xca, 0x49, 0xf5, 0xac, 0xbd, 0xca, 0x84, 0xd2, 0xf5, 0x3d, 0x2e, 0x4a, 0x43,
	0x52, 0x9a, 0xb3, 0x77, 0x3c, 0x2e, 0xd0, 0x2d, 0x40, 0x36, 0x6f, 0x98, 0xbe, 0x72, 0xc8, 0x74,
	0x29, 0xab, 0x89, 0x83, 0xd2, 0xb0, 0x54, 0x99, 0xb0, 0x79, 0x43, 0x7b, 0xba, 0x25, 0xe5, 0x2b,
	0x05, 0x18, 0xd6, 0x9a, 0x73, 0xdf, 0xa4, 0x61, 0x6a, 0x83, 0x08, 0x7a, 0x44, 0x5a, 0xdb, 0x54,
	0x10, 0x8b, 0x08, 0xa2, 0xc3, 0x31, 0xa1, 0x28, 0x28, 0xe7, 0x34, 0x10, 0xdc, 0x21, 0xae, 0xbc,
	0xb7, 0x53, 0x29, 0x3a, 0x11, 0xa5, 0xb2, 0xd7, 0x81, 0x08, 0xb9, 0x8f, 0x21, 0xa2, 0xe7, 0x50,
	0x08, 0x88, 0xa0, 0xae, 0xeb, 0x08, 0xaa, 0x73, 0xeb, 0x3f, 0x67, 0x85, 0xdf, 0x6d, 0x03, 0x6c,
	0xa6, 0x70, 0x07, 0xad, 0xbc, 0x04, 0xc5, 0xd8, 0xc1, 0xe8, 0xaf, 0x30, 0x66, 0x3b, 0x8c, 0x9a,
	0x51, 0x75, 0x6a, 0x7a, 0x46, 0x43, 0xe9, 0x5e, 0x5b, 0x58, 0x2e, 0x42, 0x21, 0xc2, 0x5b, 0x19,
	0x86, 0xdc, 0x21, 0x71, 0x9b, 0x74, 0xee, 0xeb, 0x34, 0x5c, 0x8f, 0x81, 0x69, 0x3f, 0x96, 0x99,
	0xa0, 0x8c, 0x91, 0x5d, 0xa7, 0xc6, 0x88, 0xfb, 0x61, 0x93, 0xb8, 0x8e, 0x68, 0xa1, 0x3f, 0xc3,
	0x48, 0xf5, 0x80, 0x30, 0x46, 0x5d, 0x93, 0x07, 0x81, 0xca, 0xb5, 0x34, 0x2e, 0x6a, 0x19, 0x0e,
	0x02, 0x07, 0xdd, 0x87, 0x62, 0x20, 0x6d, 0x94, 0x86, 0x0a, 0xfb, 0x4a, 0x45, 0xb5, 0x89, 0x4a,
	0xbb, 0x4d, 0x54, 0x1e, 0xb8, 0x1e, 0x11, 0xcf, 0xc2, 0xf3, 0x31, 0x28, 0x7d, 0x69, 0xbd, 0x0b,
	0x97, 0x42, 0x33, 0x33, 0x10, 0x84, 0x59, 0x84, 0x5b, 0xa6, 0x45, 0x0f, 0x1d, 0x59, 0xdb, 0xba,
	0x84, 0x4e, 0x45, 0x9a, 0x0a, 0x6d, 0x77, 0xb5, 0xe9, 0x5a, 0xdb, 0x12, 0x4d, 0x40, 0x26, 0x60,
	0x5c, 0xe6, 0x5e, 0x1a, 0x87, 0x9f, 0xe8, 0x6f, 0x30, 0x61, 0xcb, 0xa2, 0x67, 0xd5, 0x96, 0xe9,
	0xd9, 0x76, 0x40, 0x55, 0x12, 0x66, 0xf0, 0x78, 0x24, 0x7f, 0x22, 0xc5, 0x73, 0xbf, 0x65, 0x60,
	0xba, 0x8b, 0x9a, 0xe4, 0x9d, 0xd8, 0x27, 0xa5, 0xd1, 0xca, 0xc0, 0x3c, 0x27, 0xc0, 0x4e, 0xcb,
	0xa6, 0x17, 0xbd, 0xd9, 0xf4, 0xff, 0x73, 0x9e, 0xd2, 0x27, 0xa9, 0x7e, 0x35, 0x92, 0x59, 0x65,
	0x43, 0x9e, 0xa8, 0x2c, 0x08, 0x4a, 0xc6, 0x6c, 0xe6, 0x66, 0x71, 0xf1, 0xd1, 0xfb, 0x87, 0x55,
	0xd1, 0x89, 0x85, 0x23, 0xec, 0xf2, 0x11, 0x0c, 0x6b, 0x21, 0x9a, 0x84, 0x9c, 0xc3, 0x2c, 0x7a,
	0x2c, 0xaf, 0x71, 0x14, 0xab, 0x05, 0x7a, 0xa6, 0x53, 0xf5, 0xdd, 0x61, 0x0f, 0x96, 0xc7, 0x58,
	0xc1, 0xf5, 0xa9, 0x87, 0xef, 0x73, 0x70, 0xa5, 0x2b, 0x9a, 0x2d, 0xaf, 0x4a, 0x5c, 0xe7, 0x53,
	0x95, 0x4e, 0xf4, 0x24, 0xc2, 0x97, 0x07, 0xbe, 0x99, 0x38, 0xd6, 0x69, 0x7c, 0x9b, 0xbd, 0x7c,
	0xff, 0xef, 0x7c, 0x87, 0xf4, 0xa1, 0xfb, 0xb3, 0x4c, 0x92, 0x6e, 0xda, 0x43, 0xf7, 0xc3, 0xf7,
	0x0e, 0xea, 0x04, 0xb6, 0xbf, 0x48, 0xbf, 0x8b, 0xee, 0xff, 0x42, 0xbe, 0x3d, 0xd1, 0x75, 0xe0,
	0x73, 0xfd, 0x1d, 0xd9, 0xd2, 0x9a, 0x38, 0xb2, 0x41, 0xab, 0x3d, 0xdd, 0x50, 0xf5, 0x8e, 0xe9,
	0x9e, 0xde, 0xf1, 0xf4, 0x21, 0x13, 0x77, 0x96, 0x54, 0xf3, 0x48, 0xf6, 0x4a, 0x54, 0x83, 0x31,
	0xdd, 0xc7, 0x5e, 0xa9, 0xa4, 0x91, 0xfd, 0xe3, 0x8f, 0x48, 0xbe, 0xd1, 0x20, 0xbe, 0x2c, 0x3f,
	0x8e, 0x25, 0x61, 0x22, 0x74, 0xe3, 0xec, 0xa1, 0x77, 0x92, 0xf8, 0xe7, 0x22, 0x8c, 0x3e, 0xf5,
	0x5d, 0x87, 0xd5, 0xb7, 0xd5, 0x5b, 0x10, 0xad, 0x43, 0xb6, 0x4e, 0xeb, 0x6d, 0x6a, 0x17, 0xfa,
	0xc3, 0x26, 0xcc, 0x2a, 0x8f, 0x69, 0x3d, 0x58, 0x67, 0x82, 0xb7, 0xb0, 0x34, 0x47, 0xbb, 0x50,
	0xf4, 0x0f, 0x5a, 0xed, 0x41, 0xac, 0xf9, 0x59, 0x1c, 0x14, 0xad, 0xf3, 0xcc, 0xc1, 0xe0, 0x1f,
	0xb4, 0xf4, 0x37, 0xda, 0x81, 0x8b, 0xb6, 0xc7, 0x8f, 0x08, 0xb7, 0x28, 0x37, 0x39, 0xad, 0x52,
	0xe7, 0x50, 0xd1, 0xa7, 0x99, 0x2b, 0xf7, 0x30, 0x17, 0x11, 0x85, 0x27, 0x23, 0x4b, 0xac, 0x0c,
	0xc3, 0x2d, 0xb4, 0x05, 0x93, 0x35, 0xc5, 0x41, 0x12, 0x2f, 0xfb, 0x4e, 0x3c, 0xa4, 0xed, 0xe2,
	0x68, 0x1b, 0x30, 0xd6, 0x41, 0xab, 0x85, 0xe4, 0x84, 0xd3, 0x62, 0x6c, 0x71, 0xb6, 0x7f, 0xdc,
	0x58, 0xea, 0xe1, 0xd1, 0x08, 0x2d, 0x5c, 0xa2, 0xeb, 0x30, 0x1e, 0x96, 0x8b, 0xc9, 0x89, 0xa0,
	0xa6, 0x4a, 0x7d, 0xf5, 0xcc, 0x19, 0x0d, 0xc5, 0x98, 0x08, 0xfa, 0x50, 0x96, 0xc0, 0x34, 0x14,
	0xa2, 0x41, 0x24, 0x5f, 0x39, 0x59, 0xdc, 0x11, 0xa0, 0x7d, 0x98, 0x68, 0xbb, 0xd3, 0xd0, 0x05,
	0x58, 0xca, 0xcb, 0xc0, 0xfe, 0x35, 0x28, 0x11, 0x5d, 0xf5, 0x8b, 0xc7, 0x6b, 0x49, 0x01, 0x5a,
	0x8a, 0x53, 0xd2, 0x94, 0xb6, 0xa6, 0xf0, 0xea, 0x94, 0x95, 0x0a, 0xf2, 0x05, 0xdd, 0xb9, 0x76,
	0x05, 0xbc, 0x17, 0xee, 0xa1, 0x7f, 0x74, 0xae, 0x3d, 0x61, 0x03, 0xd2, 0xa6, 0x7d, 0xb5, 0x31,
	0x8b, 0xf2, 0x27, 0x50, 0x88, 0x52, 0x2c, 0x9c, 0xd4, 0x75, 0xda, 0x92, 0x99, 0x5f, 0xc0, 0xe1,
	0x27, 0xba, 0x9b, 0x6c, 0xfd, 0xd7, 0xfa, 0xc7, 0xf7, 0x98, 0xb6, 0x76, 0x3c, 0x87, 0x09, 0xca,
	0x75, 0x7b, 0xbf, 0x9b, 0xfe, 0xb7, 0x51, 0xfe, 0xd6, 0x00, 0xe8, 0x24, 0x1d, 0x5a, 0x81, 0x21,
	0x21, 0x1f, 0x56, 0xba, 0xba, 0xfe, 0x3e, 0xf8, 0x8b, 0x1c, 0x6b, 0x4b, 0xb4, 0x01, 0x05, 0xca,
	0xaa, 0xbc, 0xe5, 0x0b, 0xda, 0xce, 0xff, 0x1b, 0xfd, 0x61, 0xd6, 0xdb, 0xaa, 0x6b, 0x44, 0x90,
	0xb0, 0x01, 0x47, 0xb6, 0xe8, 0x22, 0xe4, 0x7c, 0x97, 0x38, 0xea, 0x69, 0x33, 0xb2, 0x99, 0xc2,
	0x6a, 0x19, 0x15, 0x71, 0xf9, 0xab, 0x2c, 0x8c, 0x77, 0x11, 0x85, 0x36, 0xba, 0x22, 0x98, 0x3f,
	0xe3, 0x8b, 0x32, 0x0a, 0xa3, 0x0a, 0xa5, 0xc8, 0x15, 0xb3, 0xab, 0xd5, 0x9d, 0x39, 0xaa, 0x8b,
	0x11, 0x54, 0xf2, 0x71, 0xf4, 0x12, 0x26, 0x65, 0x4c, 0xdd, 0x07, 0xa8, 0xb2, 0xbe, 0x73, 0xbe,
	0xe7, 0xc4, 0x66, 0x0a, 0x23, 0x89, 0x9a, 0x3c, 0xeb, 0x05, 0x74, 0xbc, 0x30, 0xdd, 0xd8, 0x40,
	0xd2, 0x45, 0x3f, 0x70, 0x38, 0x06, 0x9e, 0x8a, 0x80, 0x12, 0x93, 0xdf, 0x06, 0x75, 0x6e, 0x12,
	0x3d, 0x27, 0xd1, 0xff, 0x79, 0xae, 0x59, 0xb9, 0x69, 0xe0, 0x0b, 0x12, 0x32, 0x2e, 0x5c, 0x99,
	0xe8, 0x9e, 0x3d, 0x2b, 0x63, 0x30, 0x12, 0x3f, 0x73, 0xee, 0xc7, 0x2c, 0x8c, 0xaf, 0x79, 0x47,
	0x2c, 0xde, 0xe0, 0xaf, 0x26, 0x3b, 0xb3, 0xfa, 0xa1, 0x1b, 0xef, 0xb2, 0x0f, 0x20, 0xc3, 0x8f,
	0x17, 0x34, 0xb9, 0x4b, 0xfd, 0xfd, 0xed, 0x02, 0xae, 0xe0, 0x8f, 0x76, 0xa9, 0x10, 0x0e, 0xab,
	0x05, 0x38, 0x04, 0x50, 0x38, 0x8b, 0x9a, 0xc3, 0x73, 0xe3, 0x2c, 0xa2, 0x3b, 0x50, 0xe0, 0xc7,
	0x0b, 0xa6, 0x45, 0x5d, 0xd2, 0x9e, 0xae, 0x97, 0x7b, 0x1a, 0xf3, 0x9a, 0xfe, 0x43, 0x02, 0xe7,
	0xf9, 0xf1, 0xc2, 0x5a, 0xa8, 0x8a, 0xd6, 0x20, 0x57, 0x75, 0x49, 0x10, 0xe8, 0x26, 0x5c, 0x19,
	0xd8, 0x83, 0xd5, 0xd0, 0x0a, 0x2b, 0xe3, 0x53, 0x1a, 0xdc, 0xd0, 0x39, 0x1a, 0xdc, 0x70, 0xbf,
	0x06, 0x87, 0xb6, 0x21, 0xef, 0x73, 0xc7, 0xe3, 0x61, 0xda, 0xe7, 0xa5, 0xc3, 0x0b, 0x03, 0x3b,
	0xbc, 0xa3, 0x0d, 0x71, 0x04, 0x51, 0xc6, 0x00, 0x9d, 0x7b, 0x4c, 0xce, 0x09, 0xa3, 0x7b, 0x4e,
	0x9c, 0x30, 0x6d, 0xd2, 0x27, 0x4c, 0x9b, 0x95, 0x07, 0x3f, 0xbc, 0x99, 0x31, 0x5e, 0xbf, 0x99,
	0x31, 0x7e, 0x79, 0x33, 0x63, 0x7c, 0xf9, 0x76, 0x26, 0xf5, 0xfa, 0xed, 0x4c, 0xea, 0xa7, 0xb7,
	0x33, 0xa9, 0x8f, 0x6f, 0xd5, 0xbc, 0xa4, 0xa3, 0x1e, 0xaf, 0xc5, 0xff, 0x7a, 0xb9, 0x17, 0xdf,
	0xdc, 0x1f, 0x92, 0xac, 0xdd, 0xfe, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xa3, 0x3c, 0x0f, 0x99,
	0x12, 0x00, 0x00,
}

func (m *PHYPayloadTeaser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PHYPayloadTeaser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PHYPayloadTeaser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PHYPayloadTeaser_JoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PHYPayloadTeaser_JoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinRequest != nil {
		{
			size, err := m.JoinRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PHYPayloadTeaser_Mac) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PHYPayloadTeaser_Mac) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mac != nil {
		{
			size, err := m.Mac.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PHYPayloadTeaser_JoinRequestTeaser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PHYPayloadTeaser_JoinRequestTeaser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DevNonce != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.DevNonce))
		i--
		dAtA[i] = 0x18
	}
	if m.DevEui != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DevEui))
		i--
		dAtA[i] = 0x11
	}
	if m.JoinEui != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.JoinEui))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrmPayloadLength != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FrmPayloadLength))
		i--
		dAtA[i] = 0x38
	}
	if m.FPort != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FPort))
		i--
		dAtA[i] = 0x30
	}
	if m.FCnt != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FCnt))
		i--
		dAtA[i] = 0x28
	}
	if m.FOpts {
		i--
		if m.FOpts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.DevAddr != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.DevAddr))
		i--
		dAtA[i] = 0x18
	}
	if m.Confirmed {
		i--
		if m.Confirmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataTeaser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataTeaser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataTeaser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataTeaser_Terrestrial_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataTeaser_Terrestrial_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Terrestrial != nil {
		{
			size, err := m.Terrestrial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GatewayMetadataTeaser_Satellite_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataTeaser_Satellite_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Satellite != nil {
		{
			size, err := m.Satellite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GatewayMetadataTeaser_Terrestrial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataTeaser_Terrestrial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataTeaser_Terrestrial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FineTimestamp {
		i--
		if m.FineTimestamp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataTeaser_Satellite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataTeaser_Satellite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataTeaser_Satellite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TerrestrialGatewayAntennaSignalQuality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerrestrialGatewayAntennaSignalQuality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerrestrialGatewayAntennaSignalQuality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyOffset != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.FrequencyOffset))
		i--
		dAtA[i] = 0x28
	}
	if m.Snr != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Snr))))
		i--
		dAtA[i] = 0x25
	}
	if m.RssiStandardDeviation != nil {
		{
			size, err := m.RssiStandardDeviation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SignalRssi != nil {
		{
			size, err := m.SignalRssi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChannelRssi != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ChannelRssi))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataSignalQuality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataSignalQuality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataSignalQuality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataSignalQuality_Terrestrial_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataSignalQuality_Terrestrial_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Terrestrial != nil {
		{
			size, err := m.Terrestrial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GatewayMetadataSignalQuality_Satellite_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataSignalQuality_Satellite_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Satellite != nil {
		{
			size, err := m.Satellite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GatewayMetadataSignalQuality_Terrestrial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataSignalQuality_Terrestrial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataSignalQuality_Terrestrial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Antennas) > 0 {
		for iNdEx := len(m.Antennas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Antennas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataSignalQuality_Satellite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataSignalQuality_Satellite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataSignalQuality_Satellite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataLocalization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataLocalization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataLocalization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataLocalization_Terrestrial_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataLocalization_Terrestrial_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Terrestrial != nil {
		{
			size, err := m.Terrestrial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GatewayMetadataLocalization_Satellite_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataLocalization_Satellite_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Satellite != nil {
		{
			size, err := m.Satellite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GatewayMetadataLocalization_Terrestrial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataLocalization_Terrestrial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataLocalization_Terrestrial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Antennas) > 0 {
		for iNdEx := len(m.Antennas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Antennas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignalQuality != nil {
		{
			size, err := m.SignalQuality.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FineTimestamp != nil {
		{
			size, err := m.FineTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GatewayMetadataLocalization_Satellite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayMetadataLocalization_Satellite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewayMetadataLocalization_Satellite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GatewayUplinkToken) > 0 {
		i -= len(m.GatewayUplinkToken)
		copy(dAtA[i:], m.GatewayUplinkToken)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.GatewayUplinkToken)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ForwarderUplinkToken) > 0 {
		i -= len(m.ForwarderUplinkToken)
		copy(dAtA[i:], m.ForwarderUplinkToken)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ForwarderUplinkToken)))
		i--
		dAtA[i] = 0x4a
	}
	if m.GatewayMetadata != nil {
		{
			size, err := m.GatewayMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Frequency != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x38
	}
	if m.DataRateIndex != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.DataRateIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.GatewayRegion != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.GatewayRegion))
		i--
		dAtA[i] = 0x28
	}
	if m.GatewayReceiveTime != nil {
		{
			size, err := m.GatewayReceiveTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ForwarderReceiveTime != nil {
		{
			size, err := m.ForwarderReceiveTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PhyPayload != nil {
		{
			size, err := m.PhyPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keks) > 0 {
		for k := range m.Keks {
			v := m.Keks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessages(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessages(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessages(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UplinkMessage_PHYPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkMessage_PHYPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_PHYPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Teaser != nil {
		{
			size, err := m.Teaser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UplinkMessage_PHYPayload_Encrypted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_PHYPayload_Encrypted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Encrypted != nil {
		{
			size, err := m.Encrypted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UplinkMessage_PHYPayload_Plain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_PHYPayload_Plain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Plain != nil {
		i -= len(m.Plain)
		copy(dAtA[i:], m.Plain)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Plain)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UplinkMessage_GatewayMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkMessage_GatewayMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_GatewayMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Localization != nil {
		{
			size := m.Localization.Size()
			i -= size
			if _, err := m.Localization.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SignalQuality != nil {
		{
			size := m.SignalQuality.Size()
			i -= size
			if _, err := m.SignalQuality.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Teaser != nil {
		{
			size, err := m.Teaser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UplinkMessage_GatewayMetadata_EncryptedSignalQuality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_GatewayMetadata_EncryptedSignalQuality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EncryptedSignalQuality != nil {
		{
			size, err := m.EncryptedSignalQuality.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *UplinkMessage_GatewayMetadata_PlainSignalQuality) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_GatewayMetadata_PlainSignalQuality) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PlainSignalQuality != nil {
		{
			size, err := m.PlainSignalQuality.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UplinkMessage_GatewayMetadata_EncryptedLocalization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_GatewayMetadata_EncryptedLocalization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EncryptedLocalization != nil {
		{
			size, err := m.EncryptedLocalization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *UplinkMessage_GatewayMetadata_PlainLocalization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UplinkMessage_GatewayMetadata_PlainLocalization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PlainLocalization != nil {
		{
			size, err := m.PlainLocalization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DownlinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownlinkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x40
	}
	if len(m.GatewayUplinkToken) > 0 {
		i -= len(m.GatewayUplinkToken)
		copy(dAtA[i:], m.GatewayUplinkToken)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.GatewayUplinkToken)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ForwarderUplinkToken) > 0 {
		i -= len(m.ForwarderUplinkToken)
		copy(dAtA[i:], m.ForwarderUplinkToken)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ForwarderUplinkToken)))
		i--
		dAtA[i] = 0x32
	}
	if m.Class != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Class))
		i--
		dAtA[i] = 0x28
	}
	if m.Rx1Delay != nil {
		{
			size, err := m.Rx1Delay.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Rx2 != nil {
		{
			size, err := m.Rx2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Rx1 != nil {
		{
			size, err := m.Rx1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhyPayload) > 0 {
		i -= len(m.PhyPayload)
		copy(dAtA[i:], m.PhyPayload)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PhyPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownlinkMessage_RXSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkMessage_RXSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownlinkMessage_RXSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataRateIndex != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.DataRateIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Frequency != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PHYPayloadTeaser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *PHYPayloadTeaser_JoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinRequest != nil {
		l = m.JoinRequest.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *PHYPayloadTeaser_Mac) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mac != nil {
		l = m.Mac.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinEui != 0 {
		n += 9
	}
	if m.DevEui != 0 {
		n += 9
	}
	if m.DevNonce != 0 {
		n += 1 + sovMessages(uint64(m.DevNonce))
	}
	return n
}

func (m *PHYPayloadTeaser_MACPayloadTeaser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirmed {
		n += 2
	}
	if m.DevAddr != 0 {
		n += 1 + sovMessages(uint64(m.DevAddr))
	}
	if m.FOpts {
		n += 2
	}
	if m.FCnt != 0 {
		n += 1 + sovMessages(uint64(m.FCnt))
	}
	if m.FPort != 0 {
		n += 1 + sovMessages(uint64(m.FPort))
	}
	if m.FrmPayloadLength != 0 {
		n += 1 + sovMessages(uint64(m.FrmPayloadLength))
	}
	return n
}

func (m *GatewayMetadataTeaser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *GatewayMetadataTeaser_Terrestrial_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terrestrial != nil {
		l = m.Terrestrial.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *GatewayMetadataTeaser_Satellite_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Satellite != nil {
		l = m.Satellite.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *GatewayMetadataTeaser_Terrestrial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FineTimestamp {
		n += 2
	}
	return n
}

func (m *GatewayMetadataTeaser_Satellite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TerrestrialGatewayAntennaSignalQuality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelRssi != 0 {
		n += 5
	}
	if m.SignalRssi != nil {
		l = m.SignalRssi.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.RssiStandardDeviation != nil {
		l = m.RssiStandardDeviation.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Snr != 0 {
		n += 5
	}
	if m.FrequencyOffset != 0 {
		n += 1 + sovMessages(uint64(m.FrequencyOffset))
	}
	return n
}

func (m *GatewayMetadataSignalQuality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *GatewayMetadataSignalQuality_Terrestrial_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terrestrial != nil {
		l = m.Terrestrial.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *GatewayMetadataSignalQuality_Satellite_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Satellite != nil {
		l = m.Satellite.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *GatewayMetadataSignalQuality_Terrestrial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMessages(uint64(m.Index))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *GatewayMetadataSignalQuality_Satellite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GatewayMetadataLocalization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *GatewayMetadataLocalization_Terrestrial_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terrestrial != nil {
		l = m.Terrestrial.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *GatewayMetadataLocalization_Satellite_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Satellite != nil {
		l = m.Satellite.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *GatewayMetadataLocalization_Terrestrial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *GatewayMetadataLocalization_Terrestrial_Antenna) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMessages(uint64(m.Index))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.FineTimestamp != nil {
		l = m.FineTimestamp.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.SignalQuality != nil {
		l = m.SignalQuality.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *GatewayMetadataLocalization_Satellite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *UplinkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keks) > 0 {
		for k, v := range m.Keks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessages(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessages(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessages(uint64(mapEntrySize))
		}
	}
	if m.PhyPayload != nil {
		l = m.PhyPayload.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ForwarderReceiveTime != nil {
		l = m.ForwarderReceiveTime.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.GatewayReceiveTime != nil {
		l = m.GatewayReceiveTime.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.GatewayRegion != 0 {
		n += 1 + sovMessages(uint64(m.GatewayRegion))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovMessages(uint64(m.DataRateIndex))
	}
	if m.Frequency != 0 {
		n += 1 + sovMessages(uint64(m.Frequency))
	}
	if m.GatewayMetadata != nil {
		l = m.GatewayMetadata.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.ForwarderUplinkToken)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.GatewayUplinkToken)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *UplinkMessage_PHYPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Teaser != nil {
		l = m.Teaser.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *UplinkMessage_PHYPayload_Encrypted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Encrypted != nil {
		l = m.Encrypted.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *UplinkMessage_PHYPayload_Plain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plain != nil {
		l = len(m.Plain)
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *UplinkMessage_GatewayMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Teaser != nil {
		l = m.Teaser.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.SignalQuality != nil {
		n += m.SignalQuality.Size()
	}
	if m.Localization != nil {
		n += m.Localization.Size()
	}
	return n
}

func (m *UplinkMessage_GatewayMetadata_EncryptedSignalQuality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncryptedSignalQuality != nil {
		l = m.EncryptedSignalQuality.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *UplinkMessage_GatewayMetadata_PlainSignalQuality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlainSignalQuality != nil {
		l = m.PlainSignalQuality.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *UplinkMessage_GatewayMetadata_EncryptedLocalization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EncryptedLocalization != nil {
		l = m.EncryptedLocalization.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *UplinkMessage_GatewayMetadata_PlainLocalization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlainLocalization != nil {
		l = m.PlainLocalization.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}
func (m *DownlinkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhyPayload)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Rx1 != nil {
		l = m.Rx1.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Rx2 != nil {
		l = m.Rx2.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Rx1Delay != nil {
		l = m.Rx1Delay.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Class != 0 {
		n += 1 + sovMessages(uint64(m.Class))
	}
	l = len(m.ForwarderUplinkToken)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.GatewayUplinkToken)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovMessages(uint64(m.Priority))
	}
	return n
}

func (m *DownlinkMessage_RXSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != 0 {
		n += 1 + sovMessages(uint64(m.Frequency))
	}
	if m.DataRateIndex != 0 {
		n += 1 + sovMessages(uint64(m.DataRateIndex))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PHYPayloadTeaser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PHYPayloadTeaser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PHYPayloadTeaser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PHYPayloadTeaser_JoinRequestTeaser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PHYPayloadTeaser_JoinRequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PHYPayloadTeaser_MACPayloadTeaser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PHYPayloadTeaser_Mac{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PHYPayloadTeaser_JoinRequestTeaser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequestTeaser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequestTeaser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEui", wireType)
			}
			m.JoinEui = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinEui = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			m.DevEui = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEui = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			m.DevNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DevNonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PHYPayloadTeaser_MACPayloadTeaser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayloadTeaser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayloadTeaser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Confirmed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			m.DevAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DevAddr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FOpts = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrmPayloadLength", wireType)
			}
			m.FrmPayloadLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrmPayloadLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataTeaser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayMetadataTeaser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayMetadataTeaser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terrestrial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataTeaser_Terrestrial{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayMetadataTeaser_Terrestrial_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Satellite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataTeaser_Satellite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayMetadataTeaser_Satellite_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataTeaser_Terrestrial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Terrestrial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Terrestrial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineTimestamp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FineTimestamp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataTeaser_Satellite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Satellite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Satellite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerrestrialGatewayAntennaSignalQuality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerrestrialGatewayAntennaSignalQuality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerrestrialGatewayAntennaSignalQuality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelRssi", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ChannelRssi = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalRssi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignalRssi == nil {
				m.SignalRssi = &types.FloatValue{}
			}
			if err := m.SignalRssi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RssiStandardDeviation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RssiStandardDeviation == nil {
				m.RssiStandardDeviation = &types.FloatValue{}
			}
			if err := m.RssiStandardDeviation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snr", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Snr = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyOffset", wireType)
			}
			m.FrequencyOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataSignalQuality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayMetadataSignalQuality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayMetadataSignalQuality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terrestrial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataSignalQuality_Terrestrial{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayMetadataSignalQuality_Terrestrial_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Satellite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataSignalQuality_Satellite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayMetadataSignalQuality_Satellite_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataSignalQuality_Terrestrial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Terrestrial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Terrestrial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, &GatewayMetadataSignalQuality_Terrestrial_Antenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataSignalQuality_Terrestrial_Antenna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Antenna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Antenna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &TerrestrialGatewayAntennaSignalQuality{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataSignalQuality_Satellite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Satellite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Satellite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataLocalization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayMetadataLocalization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayMetadataLocalization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terrestrial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataLocalization_Terrestrial{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayMetadataLocalization_Terrestrial_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Satellite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataLocalization_Satellite{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &GatewayMetadataLocalization_Satellite_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataLocalization_Terrestrial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Terrestrial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Terrestrial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, &GatewayMetadataLocalization_Terrestrial_Antenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataLocalization_Terrestrial_Antenna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Antenna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Antenna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FineTimestamp == nil {
				m.FineTimestamp = &types.UInt64Value{}
			}
			if err := m.FineTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalQuality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignalQuality == nil {
				m.SignalQuality = &TerrestrialGatewayAntennaSignalQuality{}
			}
			if err := m.SignalQuality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayMetadataLocalization_Satellite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Satellite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Satellite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keks == nil {
				m.Keks = make(map[string]*KeyPointer)
			}
			var mapkey string
			var mapvalue *KeyPointer
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessages
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessages
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessages
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessages
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &KeyPointer{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessages(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessages
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Keks[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PhyPayload == nil {
				m.PhyPayload = &UplinkMessage_PHYPayload{}
			}
			if err := m.PhyPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderReceiveTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwarderReceiveTime == nil {
				m.ForwarderReceiveTime = &types.Timestamp{}
			}
			if err := m.ForwarderReceiveTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayReceiveTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayReceiveTime == nil {
				m.GatewayReceiveTime = &types.Timestamp{}
			}
			if err := m.GatewayReceiveTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayRegion", wireType)
			}
			m.GatewayRegion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayRegion |= Region(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayMetadata == nil {
				m.GatewayMetadata = &UplinkMessage_GatewayMetadata{}
			}
			if err := m.GatewayMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderUplinkToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderUplinkToken = append(m.ForwarderUplinkToken[:0], dAtA[iNdEx:postIndex]...)
			if m.ForwarderUplinkToken == nil {
				m.ForwarderUplinkToken = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayUplinkToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayUplinkToken = append(m.GatewayUplinkToken[:0], dAtA[iNdEx:postIndex]...)
			if m.GatewayUplinkToken == nil {
				m.GatewayUplinkToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkMessage_PHYPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PHYPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PHYPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teaser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Teaser == nil {
				m.Teaser = &PHYPayloadTeaser{}
			}
			if err := m.Teaser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EncryptedData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &UplinkMessage_PHYPayload_Encrypted{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Value = &UplinkMessage_PHYPayload_Plain{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkMessage_GatewayMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teaser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Teaser == nil {
				m.Teaser = &GatewayMetadataTeaser{}
			}
			if err := m.Teaser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedSignalQuality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EncryptedData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignalQuality = &UplinkMessage_GatewayMetadata_EncryptedSignalQuality{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainSignalQuality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataSignalQuality{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SignalQuality = &UplinkMessage_GatewayMetadata_PlainSignalQuality{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedLocalization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EncryptedData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Localization = &UplinkMessage_GatewayMetadata_EncryptedLocalization{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainLocalization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GatewayMetadataLocalization{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Localization = &UplinkMessage_GatewayMetadata_PlainLocalization{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhyPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhyPayload = append(m.PhyPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.PhyPayload == nil {
				m.PhyPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rx1 == nil {
				m.Rx1 = &DownlinkMessage_RXSettings{}
			}
			if err := m.Rx1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rx2 == nil {
				m.Rx2 = &DownlinkMessage_RXSettings{}
			}
			if err := m.Rx2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rx1Delay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rx1Delay == nil {
				m.Rx1Delay = &types.Duration{}
			}
			if err := m.Rx1Delay.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			m.Class = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Class |= DownlinkMessageClass(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderUplinkToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderUplinkToken = append(m.ForwarderUplinkToken[:0], dAtA[iNdEx:postIndex]...)
			if m.ForwarderUplinkToken == nil {
				m.ForwarderUplinkToken = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayUplinkToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayUplinkToken = append(m.GatewayUplinkToken[:0], dAtA[iNdEx:postIndex]...)
			if m.GatewayUplinkToken == nil {
				m.GatewayUplinkToken = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= DownlinkMessagePriority(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage_RXSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RXSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RXSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRateIndex", wireType)
			}
			m.DataRateIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataRateIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
