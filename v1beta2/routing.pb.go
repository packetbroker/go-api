// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packetbroker/api/v1beta2/routing.proto

package packetbroker

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Routing policy between a Forwarder and a Home Network.
type RoutingPolicy struct {
	// Uplink policy.
	Uplink *RoutingPolicy_Uplink `protobuf:"bytes,1,opt,name=uplink,proto3" json:"uplink,omitempty"`
	// Downlink policy.
	Downlink *RoutingPolicy_Downlink `protobuf:"bytes,2,opt,name=downlink,proto3" json:"downlink,omitempty"`
}

func (m *RoutingPolicy) Reset()         { *m = RoutingPolicy{} }
func (m *RoutingPolicy) String() string { return proto.CompactTextString(m) }
func (*RoutingPolicy) ProtoMessage()    {}
func (*RoutingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{0}
}
func (m *RoutingPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicy.Merge(m, src)
}
func (m *RoutingPolicy) XXX_Size() int {
	return m.Size()
}
func (m *RoutingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicy proto.InternalMessageInfo

func (m *RoutingPolicy) GetUplink() *RoutingPolicy_Uplink {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *RoutingPolicy) GetDownlink() *RoutingPolicy_Downlink {
	if m != nil {
		return m.Downlink
	}
	return nil
}

type RoutingPolicy_Uplink struct {
	// Forward join-request messages.
	JoinRequest bool `protobuf:"varint,1,opt,name=join_request,json=joinRequest,proto3" json:"join_request,omitempty"`
	// Forward uplink messages with FPort of 0.
	MacData bool `protobuf:"varint,2,opt,name=mac_data,json=macData,proto3" json:"mac_data,omitempty"`
	// Forward uplink messages with FPort between 1 and 255.
	ApplicationData bool `protobuf:"varint,3,opt,name=application_data,json=applicationData,proto3" json:"application_data,omitempty"`
	// Forward RSSI and SNR.
	SignalQuality bool `protobuf:"varint,4,opt,name=signal_quality,json=signalQuality,proto3" json:"signal_quality,omitempty"`
	// Forward gateway location, RSSI, SNR and fine timestamp.
	Localization bool `protobuf:"varint,5,opt,name=localization,proto3" json:"localization,omitempty"`
	// Forward uplink token to enable downlink.
	AllowDownlink bool `protobuf:"varint,6,opt,name=allow_downlink,json=allowDownlink,proto3" json:"allow_downlink,omitempty"`
}

func (m *RoutingPolicy_Uplink) Reset()         { *m = RoutingPolicy_Uplink{} }
func (m *RoutingPolicy_Uplink) String() string { return proto.CompactTextString(m) }
func (*RoutingPolicy_Uplink) ProtoMessage()    {}
func (*RoutingPolicy_Uplink) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{0, 0}
}
func (m *RoutingPolicy_Uplink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingPolicy_Uplink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingPolicy_Uplink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingPolicy_Uplink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicy_Uplink.Merge(m, src)
}
func (m *RoutingPolicy_Uplink) XXX_Size() int {
	return m.Size()
}
func (m *RoutingPolicy_Uplink) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicy_Uplink.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicy_Uplink proto.InternalMessageInfo

func (m *RoutingPolicy_Uplink) GetJoinRequest() bool {
	if m != nil {
		return m.JoinRequest
	}
	return false
}

func (m *RoutingPolicy_Uplink) GetMacData() bool {
	if m != nil {
		return m.MacData
	}
	return false
}

func (m *RoutingPolicy_Uplink) GetApplicationData() bool {
	if m != nil {
		return m.ApplicationData
	}
	return false
}

func (m *RoutingPolicy_Uplink) GetSignalQuality() bool {
	if m != nil {
		return m.SignalQuality
	}
	return false
}

func (m *RoutingPolicy_Uplink) GetLocalization() bool {
	if m != nil {
		return m.Localization
	}
	return false
}

func (m *RoutingPolicy_Uplink) GetAllowDownlink() bool {
	if m != nil {
		return m.AllowDownlink
	}
	return false
}

type RoutingPolicy_Downlink struct {
	// Allow join-accept messages.
	JoinAccept bool `protobuf:"varint,1,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	// Allow downlink messages with FPort of 0.
	MacData bool `protobuf:"varint,2,opt,name=mac_data,json=macData,proto3" json:"mac_data,omitempty"`
	// Allow downlink messages with FPort between 1 and 255.
	ApplicationData bool `protobuf:"varint,3,opt,name=application_data,json=applicationData,proto3" json:"application_data,omitempty"`
}

func (m *RoutingPolicy_Downlink) Reset()         { *m = RoutingPolicy_Downlink{} }
func (m *RoutingPolicy_Downlink) String() string { return proto.CompactTextString(m) }
func (*RoutingPolicy_Downlink) ProtoMessage()    {}
func (*RoutingPolicy_Downlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{0, 1}
}
func (m *RoutingPolicy_Downlink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingPolicy_Downlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingPolicy_Downlink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingPolicy_Downlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicy_Downlink.Merge(m, src)
}
func (m *RoutingPolicy_Downlink) XXX_Size() int {
	return m.Size()
}
func (m *RoutingPolicy_Downlink) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicy_Downlink.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicy_Downlink proto.InternalMessageInfo

func (m *RoutingPolicy_Downlink) GetJoinAccept() bool {
	if m != nil {
		return m.JoinAccept
	}
	return false
}

func (m *RoutingPolicy_Downlink) GetMacData() bool {
	if m != nil {
		return m.MacData
	}
	return false
}

func (m *RoutingPolicy_Downlink) GetApplicationData() bool {
	if m != nil {
		return m.ApplicationData
	}
	return false
}

// Filter for Home Networks to subscribe to forwarded messages.
type RoutingFilter struct {
	// Pass Forwarders. If empty, pass all Forwarders.
	Forwarders []*RoutingFilter_Forwarder `protobuf:"bytes,1,rep,name=forwarders,proto3" json:"forwarders,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*RoutingFilter_JoinRequest_
	//	*RoutingFilter_Mac
	Message isRoutingFilter_Message `protobuf_oneof:"message"`
	// Pass gateway metadata. If not set, pass gateway metadata if available.
	GatewayMetadata *types.BoolValue `protobuf:"bytes,4,opt,name=gateway_metadata,json=gatewayMetadata,proto3" json:"gateway_metadata,omitempty"`
}

func (m *RoutingFilter) Reset()         { *m = RoutingFilter{} }
func (m *RoutingFilter) String() string { return proto.CompactTextString(m) }
func (*RoutingFilter) ProtoMessage()    {}
func (*RoutingFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{1}
}
func (m *RoutingFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingFilter.Merge(m, src)
}
func (m *RoutingFilter) XXX_Size() int {
	return m.Size()
}
func (m *RoutingFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingFilter.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingFilter proto.InternalMessageInfo

type isRoutingFilter_Message interface {
	isRoutingFilter_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RoutingFilter_JoinRequest_ struct {
	JoinRequest *RoutingFilter_JoinRequest `protobuf:"bytes,2,opt,name=join_request,json=joinRequest,proto3,oneof" json:"join_request,omitempty"`
}
type RoutingFilter_Mac struct {
	Mac *RoutingFilter_MACPayload `protobuf:"bytes,3,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
}

func (*RoutingFilter_JoinRequest_) isRoutingFilter_Message() {}
func (*RoutingFilter_Mac) isRoutingFilter_Message()          {}

func (m *RoutingFilter) GetMessage() isRoutingFilter_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RoutingFilter) GetForwarders() []*RoutingFilter_Forwarder {
	if m != nil {
		return m.Forwarders
	}
	return nil
}

func (m *RoutingFilter) GetJoinRequest() *RoutingFilter_JoinRequest {
	if x, ok := m.GetMessage().(*RoutingFilter_JoinRequest_); ok {
		return x.JoinRequest
	}
	return nil
}

func (m *RoutingFilter) GetMac() *RoutingFilter_MACPayload {
	if x, ok := m.GetMessage().(*RoutingFilter_Mac); ok {
		return x.Mac
	}
	return nil
}

func (m *RoutingFilter) GetGatewayMetadata() *types.BoolValue {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RoutingFilter) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RoutingFilter_JoinRequest_)(nil),
		(*RoutingFilter_Mac)(nil),
	}
}

type RoutingFilter_Forwarder struct {
	// LoRa Alliance NetID of the Forwarder Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Allowed Forwarder IDs. If empty, allow all Forwarder IDs.
	// Forwarder IDs are assigned by the Member.
	ForwarderIds []string `protobuf:"bytes,2,rep,name=forwarder_ids,json=forwarderIds,proto3" json:"forwarder_ids,omitempty"`
}

func (m *RoutingFilter_Forwarder) Reset()         { *m = RoutingFilter_Forwarder{} }
func (m *RoutingFilter_Forwarder) String() string { return proto.CompactTextString(m) }
func (*RoutingFilter_Forwarder) ProtoMessage()    {}
func (*RoutingFilter_Forwarder) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{1, 0}
}
func (m *RoutingFilter_Forwarder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingFilter_Forwarder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingFilter_Forwarder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingFilter_Forwarder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingFilter_Forwarder.Merge(m, src)
}
func (m *RoutingFilter_Forwarder) XXX_Size() int {
	return m.Size()
}
func (m *RoutingFilter_Forwarder) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingFilter_Forwarder.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingFilter_Forwarder proto.InternalMessageInfo

func (m *RoutingFilter_Forwarder) GetNetId() uint32 {
	if m != nil {
		return m.NetId
	}
	return 0
}

func (m *RoutingFilter_Forwarder) GetForwarderIds() []string {
	if m != nil {
		return m.ForwarderIds
	}
	return nil
}

type RoutingFilter_JoinRequest struct {
	// Pass join-request EUIs by prefix. If empty, allow all join-requests.
	EuiPrefixes []*RoutingFilter_JoinRequest_EUIPrefixes `protobuf:"bytes,1,rep,name=eui_prefixes,json=euiPrefixes,proto3" json:"eui_prefixes,omitempty"`
}

func (m *RoutingFilter_JoinRequest) Reset()         { *m = RoutingFilter_JoinRequest{} }
func (m *RoutingFilter_JoinRequest) String() string { return proto.CompactTextString(m) }
func (*RoutingFilter_JoinRequest) ProtoMessage()    {}
func (*RoutingFilter_JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{1, 1}
}
func (m *RoutingFilter_JoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingFilter_JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingFilter_JoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingFilter_JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingFilter_JoinRequest.Merge(m, src)
}
func (m *RoutingFilter_JoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *RoutingFilter_JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingFilter_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingFilter_JoinRequest proto.InternalMessageInfo

func (m *RoutingFilter_JoinRequest) GetEuiPrefixes() []*RoutingFilter_JoinRequest_EUIPrefixes {
	if m != nil {
		return m.EuiPrefixes
	}
	return nil
}

type RoutingFilter_JoinRequest_EUIPrefixes struct {
	JoinEui uint64 `protobuf:"fixed64,1,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// Significant bits of join_eui.
	JoinEuiLength uint32 `protobuf:"varint,2,opt,name=join_eui_length,json=joinEuiLength,proto3" json:"join_eui_length,omitempty"`
	DevEui        uint64 `protobuf:"fixed64,3,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Significant bits of dev_eui.
	DevEuiLength uint32 `protobuf:"varint,4,opt,name=dev_eui_length,json=devEuiLength,proto3" json:"dev_eui_length,omitempty"`
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) Reset()         { *m = RoutingFilter_JoinRequest_EUIPrefixes{} }
func (m *RoutingFilter_JoinRequest_EUIPrefixes) String() string { return proto.CompactTextString(m) }
func (*RoutingFilter_JoinRequest_EUIPrefixes) ProtoMessage()    {}
func (*RoutingFilter_JoinRequest_EUIPrefixes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{1, 1, 0}
}
func (m *RoutingFilter_JoinRequest_EUIPrefixes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingFilter_JoinRequest_EUIPrefixes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingFilter_JoinRequest_EUIPrefixes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingFilter_JoinRequest_EUIPrefixes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingFilter_JoinRequest_EUIPrefixes.Merge(m, src)
}
func (m *RoutingFilter_JoinRequest_EUIPrefixes) XXX_Size() int {
	return m.Size()
}
func (m *RoutingFilter_JoinRequest_EUIPrefixes) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingFilter_JoinRequest_EUIPrefixes.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingFilter_JoinRequest_EUIPrefixes proto.InternalMessageInfo

func (m *RoutingFilter_JoinRequest_EUIPrefixes) GetJoinEui() uint64 {
	if m != nil {
		return m.JoinEui
	}
	return 0
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) GetJoinEuiLength() uint32 {
	if m != nil {
		return m.JoinEuiLength
	}
	return 0
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) GetDevEui() uint64 {
	if m != nil {
		return m.DevEui
	}
	return 0
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) GetDevEuiLength() uint32 {
	if m != nil {
		return m.DevEuiLength
	}
	return 0
}

type RoutingFilter_MACPayload struct {
	// Pass (un)confirmed uplink data messages.
	Confirmed *types.BoolValue `protobuf:"bytes,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Pass DevAddrs by prefix. If empty, allow all DevAddrs.
	DevAddrPrefixes []*RoutingFilter_MACPayload_DevAddrPrefix `protobuf:"bytes,2,rep,name=dev_addr_prefixes,json=devAddrPrefixes,proto3" json:"dev_addr_prefixes,omitempty"`
	// Pass messages with or without FOpts.
	FOpts *types.BoolValue `protobuf:"bytes,3,opt,name=f_opts,json=fOpts,proto3" json:"f_opts,omitempty"`
	// Pass for FPort ranges. If empty, allow all FPorts.
	FPortRanges []*RoutingFilter_MACPayload_FPortRange `protobuf:"bytes,4,rep,name=f_port_ranges,json=fPortRanges,proto3" json:"f_port_ranges,omitempty"`
}

func (m *RoutingFilter_MACPayload) Reset()         { *m = RoutingFilter_MACPayload{} }
func (m *RoutingFilter_MACPayload) String() string { return proto.CompactTextString(m) }
func (*RoutingFilter_MACPayload) ProtoMessage()    {}
func (*RoutingFilter_MACPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{1, 2}
}
func (m *RoutingFilter_MACPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingFilter_MACPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingFilter_MACPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingFilter_MACPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingFilter_MACPayload.Merge(m, src)
}
func (m *RoutingFilter_MACPayload) XXX_Size() int {
	return m.Size()
}
func (m *RoutingFilter_MACPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingFilter_MACPayload.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingFilter_MACPayload proto.InternalMessageInfo

func (m *RoutingFilter_MACPayload) GetConfirmed() *types.BoolValue {
	if m != nil {
		return m.Confirmed
	}
	return nil
}

func (m *RoutingFilter_MACPayload) GetDevAddrPrefixes() []*RoutingFilter_MACPayload_DevAddrPrefix {
	if m != nil {
		return m.DevAddrPrefixes
	}
	return nil
}

func (m *RoutingFilter_MACPayload) GetFOpts() *types.BoolValue {
	if m != nil {
		return m.FOpts
	}
	return nil
}

func (m *RoutingFilter_MACPayload) GetFPortRanges() []*RoutingFilter_MACPayload_FPortRange {
	if m != nil {
		return m.FPortRanges
	}
	return nil
}

type RoutingFilter_MACPayload_DevAddrPrefix struct {
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Significant bits of value.
	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *RoutingFilter_MACPayload_DevAddrPrefix) Reset() {
	*m = RoutingFilter_MACPayload_DevAddrPrefix{}
}
func (m *RoutingFilter_MACPayload_DevAddrPrefix) String() string { return proto.CompactTextString(m) }
func (*RoutingFilter_MACPayload_DevAddrPrefix) ProtoMessage()    {}
func (*RoutingFilter_MACPayload_DevAddrPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{1, 2, 0}
}
func (m *RoutingFilter_MACPayload_DevAddrPrefix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingFilter_MACPayload_DevAddrPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingFilter_MACPayload_DevAddrPrefix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingFilter_MACPayload_DevAddrPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingFilter_MACPayload_DevAddrPrefix.Merge(m, src)
}
func (m *RoutingFilter_MACPayload_DevAddrPrefix) XXX_Size() int {
	return m.Size()
}
func (m *RoutingFilter_MACPayload_DevAddrPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingFilter_MACPayload_DevAddrPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingFilter_MACPayload_DevAddrPrefix proto.InternalMessageInfo

func (m *RoutingFilter_MACPayload_DevAddrPrefix) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RoutingFilter_MACPayload_DevAddrPrefix) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type RoutingFilter_MACPayload_FPortRange struct {
	// Inclusive start value of the range.
	Low uint32 `protobuf:"varint,1,opt,name=low,proto3" json:"low,omitempty"`
	// Inclusive end value of the range.
	High uint32 `protobuf:"varint,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (m *RoutingFilter_MACPayload_FPortRange) Reset()         { *m = RoutingFilter_MACPayload_FPortRange{} }
func (m *RoutingFilter_MACPayload_FPortRange) String() string { return proto.CompactTextString(m) }
func (*RoutingFilter_MACPayload_FPortRange) ProtoMessage()    {}
func (*RoutingFilter_MACPayload_FPortRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{1, 2, 1}
}
func (m *RoutingFilter_MACPayload_FPortRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutingFilter_MACPayload_FPortRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutingFilter_MACPayload_FPortRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutingFilter_MACPayload_FPortRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingFilter_MACPayload_FPortRange.Merge(m, src)
}
func (m *RoutingFilter_MACPayload_FPortRange) XXX_Size() int {
	return m.Size()
}
func (m *RoutingFilter_MACPayload_FPortRange) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingFilter_MACPayload_FPortRange.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingFilter_MACPayload_FPortRange proto.InternalMessageInfo

func (m *RoutingFilter_MACPayload_FPortRange) GetLow() uint32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *RoutingFilter_MACPayload_FPortRange) GetHigh() uint32 {
	if m != nil {
		return m.High
	}
	return 0
}

type RouteHop struct {
	// Time when the server received the message.
	ReceivedAt *types.Timestamp `protobuf:"bytes,1,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	// Sender of the message, typically the authorized client identifier.
	SenderName string `protobuf:"bytes,2,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	// Sender IP address or host name.
	SenderAddress string `protobuf:"bytes,3,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// Receiver of the message.
	ReceiverName string `protobuf:"bytes,4,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	// Receiver agent.
	ReceiverAgent string `protobuf:"bytes,5,opt,name=receiver_agent,json=receiverAgent,proto3" json:"receiver_agent,omitempty"`
}

func (m *RouteHop) Reset()         { *m = RouteHop{} }
func (m *RouteHop) String() string { return proto.CompactTextString(m) }
func (*RouteHop) ProtoMessage()    {}
func (*RouteHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{2}
}
func (m *RouteHop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteHop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteHop.Merge(m, src)
}
func (m *RouteHop) XXX_Size() int {
	return m.Size()
}
func (m *RouteHop) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteHop.DiscardUnknown(m)
}

var xxx_messageInfo_RouteHop proto.InternalMessageInfo

func (m *RouteHop) GetReceivedAt() *types.Timestamp {
	if m != nil {
		return m.ReceivedAt
	}
	return nil
}

func (m *RouteHop) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *RouteHop) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *RouteHop) GetReceiverName() string {
	if m != nil {
		return m.ReceiverName
	}
	return ""
}

func (m *RouteHop) GetReceiverAgent() string {
	if m != nil {
		return m.ReceiverAgent
	}
	return ""
}

// Uplink message routed from a Forwarder to a Home Network.
type RoutedUplinkMessage struct {
	// Message identifier generated by the Router.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,2,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,3,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,4,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Uplink message.
	Message *UplinkMessage `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Hops that the message passed. Each Router appends an entry.
	Hops []*RouteHop `protobuf:"bytes,6,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (m *RoutedUplinkMessage) Reset()         { *m = RoutedUplinkMessage{} }
func (m *RoutedUplinkMessage) String() string { return proto.CompactTextString(m) }
func (*RoutedUplinkMessage) ProtoMessage()    {}
func (*RoutedUplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{3}
}
func (m *RoutedUplinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedUplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedUplinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedUplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedUplinkMessage.Merge(m, src)
}
func (m *RoutedUplinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *RoutedUplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedUplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedUplinkMessage proto.InternalMessageInfo

func (m *RoutedUplinkMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoutedUplinkMessage) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *RoutedUplinkMessage) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *RoutedUplinkMessage) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *RoutedUplinkMessage) GetMessage() *UplinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RoutedUplinkMessage) GetHops() []*RouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

// Downlink message routed from a Home Network to a Forwarder.
type RoutedDownlinkMessage struct {
	// Message identifier generated by the Router.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,2,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,3,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Forwarder identifier issued by the Forwarder Member.
	ForwarderId string `protobuf:"bytes,4,opt,name=forwarder_id,json=forwarderId,proto3" json:"forwarder_id,omitempty"`
	// Downlink message.
	Message *DownlinkMessage `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Hops that the message passed. Each Router appends an entry.
	Hops []*RouteHop `protobuf:"bytes,6,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (m *RoutedDownlinkMessage) Reset()         { *m = RoutedDownlinkMessage{} }
func (m *RoutedDownlinkMessage) String() string { return proto.CompactTextString(m) }
func (*RoutedDownlinkMessage) ProtoMessage()    {}
func (*RoutedDownlinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdce9e5fa9d4d3a4, []int{4}
}
func (m *RoutedDownlinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoutedDownlinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoutedDownlinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoutedDownlinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedDownlinkMessage.Merge(m, src)
}
func (m *RoutedDownlinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *RoutedDownlinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedDownlinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedDownlinkMessage proto.InternalMessageInfo

func (m *RoutedDownlinkMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RoutedDownlinkMessage) GetHomeNetworkNetId() uint32 {
	if m != nil {
		return m.HomeNetworkNetId
	}
	return 0
}

func (m *RoutedDownlinkMessage) GetForwarderNetId() uint32 {
	if m != nil {
		return m.ForwarderNetId
	}
	return 0
}

func (m *RoutedDownlinkMessage) GetForwarderId() string {
	if m != nil {
		return m.ForwarderId
	}
	return ""
}

func (m *RoutedDownlinkMessage) GetMessage() *DownlinkMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RoutedDownlinkMessage) GetHops() []*RouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

func init() {
	proto.RegisterType((*RoutingPolicy)(nil), "org.packetbroker.v1beta2.RoutingPolicy")
	proto.RegisterType((*RoutingPolicy_Uplink)(nil), "org.packetbroker.v1beta2.RoutingPolicy.Uplink")
	proto.RegisterType((*RoutingPolicy_Downlink)(nil), "org.packetbroker.v1beta2.RoutingPolicy.Downlink")
	proto.RegisterType((*RoutingFilter)(nil), "org.packetbroker.v1beta2.RoutingFilter")
	proto.RegisterType((*RoutingFilter_Forwarder)(nil), "org.packetbroker.v1beta2.RoutingFilter.Forwarder")
	proto.RegisterType((*RoutingFilter_JoinRequest)(nil), "org.packetbroker.v1beta2.RoutingFilter.JoinRequest")
	proto.RegisterType((*RoutingFilter_JoinRequest_EUIPrefixes)(nil), "org.packetbroker.v1beta2.RoutingFilter.JoinRequest.EUIPrefixes")
	proto.RegisterType((*RoutingFilter_MACPayload)(nil), "org.packetbroker.v1beta2.RoutingFilter.MACPayload")
	proto.RegisterType((*RoutingFilter_MACPayload_DevAddrPrefix)(nil), "org.packetbroker.v1beta2.RoutingFilter.MACPayload.DevAddrPrefix")
	proto.RegisterType((*RoutingFilter_MACPayload_FPortRange)(nil), "org.packetbroker.v1beta2.RoutingFilter.MACPayload.FPortRange")
	proto.RegisterType((*RouteHop)(nil), "org.packetbroker.v1beta2.RouteHop")
	proto.RegisterType((*RoutedUplinkMessage)(nil), "org.packetbroker.v1beta2.RoutedUplinkMessage")
	proto.RegisterType((*RoutedDownlinkMessage)(nil), "org.packetbroker.v1beta2.RoutedDownlinkMessage")
}

func init() {
	proto.RegisterFile("packetbroker/api/v1beta2/routing.proto", fileDescriptor_bdce9e5fa9d4d3a4)
}

var fileDescriptor_bdce9e5fa9d4d3a4 = []byte{
	// 1069 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6e, 0xe3, 0x44,
	0x1c, 0x6e, 0xfe, 0x34, 0x4d, 0x7e, 0x4e, 0xda, 0x32, 0xcb, 0x42, 0xf0, 0x21, 0xdb, 0x0d, 0xb0,
	0xdb, 0x95, 0xc0, 0xa5, 0x59, 0x09, 0x21, 0xad, 0x56, 0x90, 0x6e, 0x1b, 0x5a, 0xb4, 0x2d, 0xdd,
	0x11, 0x8b, 0x10, 0x17, 0x6b, 0x62, 0x4f, 0xdc, 0xa1, 0xb6, 0xc7, 0x1d, 0x4f, 0x12, 0xca, 0x95,
	0x07, 0x80, 0x07, 0xe0, 0xc0, 0x8b, 0x70, 0xe7, 0xb8, 0x47, 0x24, 0x2e, 0xa8, 0x15, 0xaf, 0x81,
	0x90, 0x67, 0x6c, 0xc7, 0x29, 0xa4, 0x94, 0x85, 0x9b, 0xe7, 0x9b, 0xef, 0xfb, 0xfc, 0xfb, 0x37,
	0x63, 0xc3, 0xbd, 0x88, 0x38, 0xa7, 0x54, 0x0e, 0x05, 0x3f, 0xa5, 0x62, 0x8b, 0x44, 0x6c, 0x6b,
	0xb2, 0x3d, 0xa4, 0x92, 0xf4, 0xb6, 0x04, 0x1f, 0x4b, 0x16, 0x7a, 0x56, 0x24, 0xb8, 0xe4, 0xa8,
	0xcd, 0x85, 0x67, 0x15, 0xb9, 0x56, 0xca, 0x33, 0xef, 0x78, 0x9c, 0x7b, 0x3e, 0xdd, 0x52, 0xbc,
	0xe1, 0x78, 0xb4, 0x25, 0x59, 0x40, 0x63, 0x49, 0x82, 0x48, 0x4b, 0xcd, 0xce, 0x55, 0xc2, 0x54,
	0x90, 0x28, 0xa2, 0x22, 0x4e, 0xf7, 0xef, 0x2f, 0x0c, 0x21, 0xa0, 0x71, 0x4c, 0x3c, 0x9a, 0x12,
	0xbb, 0x7f, 0x54, 0xa0, 0x85, 0x75, 0x54, 0xc7, 0xdc, 0x67, 0xce, 0x39, 0x1a, 0x40, 0x6d, 0x1c,
	0xf9, 0x2c, 0x3c, 0x6d, 0x97, 0x36, 0x4a, 0x9b, 0x46, 0xcf, 0xb2, 0x16, 0x85, 0x69, 0xcd, 0x09,
	0xad, 0xe7, 0x4a, 0x85, 0x53, 0x35, 0x7a, 0x0a, 0x75, 0x97, 0x4f, 0x43, 0xe5, 0x54, 0x56, 0x4e,
	0xef, 0xdd, 0xd4, 0x69, 0x37, 0xd5, 0xe1, 0xdc, 0xc1, 0xbc, 0x2c, 0x41, 0x4d, 0xbf, 0x00, 0xdd,
	0x85, 0xe6, 0x57, 0x9c, 0x85, 0xb6, 0xa0, 0x67, 0x63, 0x1a, 0x4b, 0x15, 0x66, 0x1d, 0x1b, 0x09,
	0x86, 0x35, 0x84, 0xde, 0x80, 0x7a, 0x40, 0x1c, 0xdb, 0x25, 0x92, 0xa8, 0x77, 0xd7, 0xf1, 0x4a,
	0x40, 0x9c, 0x5d, 0x22, 0x09, 0x7a, 0x00, 0xeb, 0x24, 0x8a, 0x7c, 0xe6, 0x10, 0xc9, 0x78, 0xa8,
	0x29, 0x15, 0x45, 0x59, 0x2b, 0xe0, 0x8a, 0xfa, 0x36, 0xac, 0xc6, 0xcc, 0x0b, 0x89, 0x6f, 0x9f,
	0x8d, 0x89, 0xcf, 0xe4, 0x79, 0xbb, 0xaa, 0x88, 0x2d, 0x8d, 0x3e, 0xd3, 0x20, 0xea, 0x42, 0xd3,
	0xe7, 0x0e, 0xf1, 0xd9, 0x37, 0x4a, 0xda, 0x5e, 0x56, 0xa4, 0x39, 0x2c, 0xb1, 0x22, 0xbe, 0xcf,
	0xa7, 0x76, 0x5e, 0x92, 0x9a, 0xb6, 0x52, 0x68, 0x96, 0xaf, 0x79, 0x06, 0xf5, 0xec, 0x19, 0xdd,
	0x01, 0x95, 0x92, 0x4d, 0x1c, 0x87, 0x46, 0x59, 0x96, 0x90, 0x40, 0x7d, 0x85, 0xfc, 0x3f, 0x49,
	0x76, 0x7f, 0xaf, 0xe7, 0x03, 0x30, 0x60, 0xbe, 0xa4, 0x02, 0x3d, 0x03, 0x18, 0x71, 0x31, 0x25,
	0xc2, 0xa5, 0x22, 0x6e, 0x97, 0x36, 0x2a, 0x9b, 0x46, 0x6f, 0xfb, 0x1f, 0x5b, 0xa7, 0xc5, 0xd6,
	0x20, 0x53, 0xe2, 0x82, 0x09, 0xfa, 0xe2, 0x4a, 0xcb, 0xf4, 0x3c, 0x3c, 0xbc, 0xa9, 0xe9, 0x27,
	0xb3, 0xd6, 0xee, 0x2f, 0xcd, 0x77, 0x7a, 0x00, 0x95, 0x80, 0x38, 0x2a, 0x39, 0xa3, 0xd7, 0xbb,
	0xa9, 0xe1, 0x61, 0xff, 0xc9, 0x31, 0x39, 0xf7, 0x39, 0x71, 0xf7, 0x97, 0x70, 0x62, 0x80, 0xf6,
	0x60, 0xdd, 0x23, 0x92, 0x4e, 0xc9, 0xb9, 0x1d, 0x50, 0x49, 0x54, 0xc5, 0xaa, 0xca, 0xd4, 0xb4,
	0xf4, 0x59, 0xb3, 0xb2, 0xb3, 0x66, 0xed, 0x70, 0xee, 0x7f, 0x4e, 0xfc, 0x31, 0xc5, 0x6b, 0xa9,
	0xe6, 0x30, 0x95, 0x98, 0x1f, 0x43, 0x23, 0xaf, 0x00, 0xba, 0x0d, 0xb5, 0x90, 0x4a, 0x9b, 0xb9,
	0xaa, 0x79, 0x2d, 0xbc, 0x1c, 0x52, 0x79, 0xe0, 0xa2, 0x37, 0xa1, 0x95, 0x97, 0xc6, 0x66, 0x6e,
	0xdc, 0x2e, 0x6f, 0x54, 0x36, 0x1b, 0xb8, 0x99, 0x83, 0x07, 0x6e, 0x6c, 0x7e, 0x5b, 0x06, 0xa3,
	0x90, 0x36, 0x1a, 0x42, 0x93, 0x8e, 0x99, 0x1d, 0x09, 0x3a, 0x62, 0x5f, 0xd3, 0xac, 0x2d, 0x1f,
	0xbe, 0x44, 0x05, 0xad, 0xbd, 0xe7, 0x07, 0xc7, 0xa9, 0x0d, 0x36, 0xe8, 0x98, 0x65, 0x0b, 0xf3,
	0xbb, 0x12, 0x18, 0x85, 0xcd, 0x64, 0xc0, 0x54, 0xd7, 0xe8, 0x98, 0xa9, 0x0c, 0x6a, 0x78, 0x25,
	0x59, 0xef, 0x8d, 0x19, 0xba, 0x07, 0x6b, 0xd9, 0x96, 0xed, 0xd3, 0xd0, 0x93, 0x27, 0xaa, 0xa7,
	0x2d, 0xdc, 0x4a, 0x19, 0x4f, 0x15, 0x88, 0x5e, 0x87, 0x15, 0x97, 0x4e, 0x94, 0x43, 0x45, 0x39,
	0xd4, 0x5c, 0x3a, 0x49, 0x0c, 0xde, 0x82, 0xd5, 0x74, 0x23, 0xd3, 0x57, 0x95, 0xbe, 0xa9, 0xf7,
	0xb5, 0xdc, 0xfc, 0xa9, 0x02, 0x30, 0xeb, 0x15, 0xfa, 0x00, 0x1a, 0x0e, 0x0f, 0x47, 0x4c, 0x04,
	0xd4, 0x4d, 0x6f, 0xa7, 0xeb, 0xba, 0x33, 0x23, 0x23, 0x1f, 0x5e, 0x49, 0x5e, 0x47, 0x5c, 0x57,
	0xcc, 0x6a, 0x58, 0x56, 0x35, 0xfc, 0xe8, 0xdf, 0x0f, 0x8d, 0xb5, 0x4b, 0x27, 0x7d, 0xd7, 0x15,
	0xba, 0x52, 0x78, 0xcd, 0x2d, 0x2e, 0x69, 0x8c, 0xb6, 0xa1, 0x36, 0xb2, 0x79, 0x24, 0xe3, 0x74,
	0x2e, 0xaf, 0x0b, 0x72, 0x79, 0xf4, 0x69, 0x24, 0x63, 0x44, 0xa0, 0x35, 0xb2, 0x23, 0x2e, 0xa4,
	0x2d, 0x48, 0xe8, 0xd1, 0xb8, 0x5d, 0x55, 0xc1, 0x3d, 0x7e, 0x89, 0xe0, 0x06, 0xc7, 0x5c, 0x48,
	0x9c, 0xb8, 0x60, 0x63, 0x94, 0x3f, 0xc7, 0xe6, 0x63, 0x68, 0xcd, 0xc5, 0x8d, 0x5e, 0x85, 0xe5,
	0x49, 0x12, 0x43, 0x36, 0x9e, 0x6a, 0x81, 0x5e, 0x83, 0xda, 0x5c, 0x47, 0xd3, 0x95, 0xd9, 0x03,
	0x98, 0x39, 0xa3, 0x75, 0xa8, 0xf8, 0x7c, 0x9a, 0x2a, 0x93, 0x47, 0x84, 0xa0, 0x7a, 0xc2, 0xbc,
	0x4c, 0xa5, 0x9e, 0x77, 0x1a, 0xb0, 0x92, 0x7e, 0x6f, 0xba, 0xbf, 0x96, 0xa0, 0x9e, 0x84, 0x4c,
	0xf7, 0x79, 0x84, 0x1e, 0x81, 0x21, 0xa8, 0x43, 0xd9, 0x84, 0xba, 0x36, 0x91, 0x0b, 0x5b, 0xf9,
	0x59, 0xf6, 0xd5, 0xc3, 0x90, 0xd1, 0xfb, 0x32, 0xb9, 0x18, 0x63, 0x1a, 0x26, 0x87, 0x27, 0x24,
	0x01, 0x55, 0xef, 0x6b, 0x60, 0xd0, 0xd0, 0x11, 0x09, 0xa8, 0xba, 0xb7, 0x35, 0x21, 0xe9, 0x37,
	0x8d, 0x75, 0x1b, 0x1a, 0xb8, 0xa5, 0xd1, 0xbe, 0x06, 0x93, 0x73, 0x98, 0xba, 0xa6, 0x4e, 0x55,
	0xc5, 0x6a, 0x66, 0x60, 0xe6, 0x95, 0x93, 0x88, 0x47, 0x43, 0xa9, 0xae, 0xf7, 0x06, 0xce, 0xa5,
	0xfd, 0x04, 0xec, 0xfe, 0x50, 0x86, 0x5b, 0x2a, 0x3b, 0x57, 0x7f, 0xa4, 0x0e, 0x75, 0xd6, 0x68,
	0x15, 0xca, 0xe9, 0xf1, 0x6f, 0xe0, 0x32, 0x73, 0xd1, 0x26, 0xac, 0xcf, 0xce, 0x7e, 0x7a, 0x39,
	0xe8, 0x82, 0xad, 0xe6, 0xf8, 0x91, 0xba, 0x25, 0xee, 0x42, 0xb3, 0x78, 0x4b, 0xa4, 0x29, 0x18,
	0x85, 0x4b, 0x02, 0xbd, 0x0b, 0xb7, 0x4e, 0x78, 0x40, 0x13, 0x9f, 0x29, 0x17, 0xa7, 0x99, 0x9f,
	0x3e, 0x48, 0xeb, 0xc9, 0xd6, 0x91, 0xde, 0xd1, 0x8e, 0xfd, 0xbc, 0x19, 0x2a, 0x07, 0xa3, 0x77,
	0x7f, 0xf1, 0x70, 0xcd, 0x65, 0x81, 0x33, 0x1d, 0x7a, 0x1f, 0xaa, 0x27, 0x3c, 0x8a, 0xdb, 0x35,
	0x35, 0x9c, 0xdd, 0xeb, 0x87, 0x33, 0xe9, 0x34, 0x56, 0xfc, 0xee, 0x8f, 0x65, 0xb8, 0xad, 0xcb,
	0x93, 0x7d, 0xde, 0x16, 0x15, 0x68, 0x41, 0x4e, 0xe5, 0x05, 0x39, 0xfd, 0x5d, 0x3d, 0x2b, 0x37,
	0xaa, 0x67, 0xf5, 0xaf, 0xf5, 0x7c, 0x72, 0xb5, 0x40, 0x0f, 0x16, 0x27, 0x78, 0x25, 0x8f, 0xff,
	0x5c, 0xa2, 0x9d, 0xc1, 0xcf, 0x17, 0x9d, 0xd2, 0x8b, 0x8b, 0x4e, 0xe9, 0xb7, 0x8b, 0x4e, 0xe9,
	0xfb, 0xcb, 0xce, 0xd2, 0x8b, 0xcb, 0xce, 0xd2, 0x2f, 0x97, 0x9d, 0xa5, 0x2f, 0xdf, 0xf1, 0xf8,
	0xbc, 0x03, 0x17, 0x5e, 0xf1, 0x97, 0xee, 0x51, 0x71, 0x73, 0x58, 0x53, 0xa7, 0xe7, 0xe1, 0x9f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x26, 0xbe, 0xa4, 0x85, 0x0a, 0x00, 0x00,
}

func (m *RoutingPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Downlink != nil {
		{
			size, err := m.Downlink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uplink != nil {
		{
			size, err := m.Uplink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoutingPolicy_Uplink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingPolicy_Uplink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingPolicy_Uplink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowDownlink {
		i--
		if m.AllowDownlink {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Localization {
		i--
		if m.Localization {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SignalQuality {
		i--
		if m.SignalQuality {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ApplicationData {
		i--
		if m.ApplicationData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MacData {
		i--
		if m.MacData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.JoinRequest {
		i--
		if m.JoinRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoutingPolicy_Downlink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingPolicy_Downlink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingPolicy_Downlink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApplicationData {
		i--
		if m.ApplicationData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MacData {
		i--
		if m.MacData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.JoinAccept {
		i--
		if m.JoinAccept {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoutingFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GatewayMetadata != nil {
		{
			size, err := m.GatewayMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Forwarders) > 0 {
		for iNdEx := len(m.Forwarders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Forwarders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoutingFilter_JoinRequest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_JoinRequest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinRequest != nil {
		{
			size, err := m.JoinRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RoutingFilter_Mac) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_Mac) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mac != nil {
		{
			size, err := m.Mac.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RoutingFilter_Forwarder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingFilter_Forwarder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_Forwarder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwarderIds) > 0 {
		for iNdEx := len(m.ForwarderIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ForwarderIds[iNdEx])
			copy(dAtA[i:], m.ForwarderIds[iNdEx])
			i = encodeVarintRouting(dAtA, i, uint64(len(m.ForwarderIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NetId != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.NetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoutingFilter_JoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingFilter_JoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_JoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EuiPrefixes) > 0 {
		for iNdEx := len(m.EuiPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EuiPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DevEuiLength != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.DevEuiLength))
		i--
		dAtA[i] = 0x20
	}
	if m.DevEui != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.DevEui))
		i--
		dAtA[i] = 0x19
	}
	if m.JoinEuiLength != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.JoinEuiLength))
		i--
		dAtA[i] = 0x10
	}
	if m.JoinEui != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.JoinEui))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *RoutingFilter_MACPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingFilter_MACPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_MACPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FPortRanges) > 0 {
		for iNdEx := len(m.FPortRanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FPortRanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.FOpts != nil {
		{
			size, err := m.FOpts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DevAddrPrefixes) > 0 {
		for iNdEx := len(m.DevAddrPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DevAddrPrefixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Confirmed != nil {
		{
			size, err := m.Confirmed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoutingFilter_MACPayload_DevAddrPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingFilter_MACPayload_DevAddrPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_MACPayload_DevAddrPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoutingFilter_MACPayload_FPortRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutingFilter_MACPayload_FPortRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutingFilter_MACPayload_FPortRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.High != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x10
	}
	if m.Low != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.Low))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RouteHop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteHop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RouteHop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReceiverAgent) > 0 {
		i -= len(m.ReceiverAgent)
		copy(dAtA[i:], m.ReceiverAgent)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.ReceiverAgent)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReceiverName) > 0 {
		i -= len(m.ReceiverName)
		copy(dAtA[i:], m.ReceiverName)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.ReceiverName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderName) > 0 {
		i -= len(m.SenderName)
		copy(dAtA[i:], m.SenderName)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.SenderName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ReceivedAt != nil {
		{
			size, err := m.ReceivedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoutedUplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedUplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedUplinkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hops) > 0 {
		for iNdEx := len(m.Hops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoutedDownlinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoutedDownlinkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoutedDownlinkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hops) > 0 {
		for iNdEx := len(m.Hops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRouting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRouting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ForwarderId) > 0 {
		i -= len(m.ForwarderId)
		copy(dAtA[i:], m.ForwarderId)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.ForwarderId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ForwarderNetId != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.ForwarderNetId))
		i--
		dAtA[i] = 0x18
	}
	if m.HomeNetworkNetId != 0 {
		i = encodeVarintRouting(dAtA, i, uint64(m.HomeNetworkNetId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRouting(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRouting(dAtA []byte, offset int, v uint64) int {
	offset -= sovRouting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RoutingPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	return n
}

func (m *RoutingPolicy_Uplink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinRequest {
		n += 2
	}
	if m.MacData {
		n += 2
	}
	if m.ApplicationData {
		n += 2
	}
	if m.SignalQuality {
		n += 2
	}
	if m.Localization {
		n += 2
	}
	if m.AllowDownlink {
		n += 2
	}
	return n
}

func (m *RoutingPolicy_Downlink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinAccept {
		n += 2
	}
	if m.MacData {
		n += 2
	}
	if m.ApplicationData {
		n += 2
	}
	return n
}

func (m *RoutingFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Forwarders) > 0 {
		for _, e := range m.Forwarders {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	if m.GatewayMetadata != nil {
		l = m.GatewayMetadata.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	return n
}

func (m *RoutingFilter_JoinRequest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinRequest != nil {
		l = m.JoinRequest.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	return n
}
func (m *RoutingFilter_Mac) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mac != nil {
		l = m.Mac.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	return n
}
func (m *RoutingFilter_Forwarder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetId != 0 {
		n += 1 + sovRouting(uint64(m.NetId))
	}
	if len(m.ForwarderIds) > 0 {
		for _, s := range m.ForwarderIds {
			l = len(s)
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func (m *RoutingFilter_JoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EuiPrefixes) > 0 {
		for _, e := range m.EuiPrefixes {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func (m *RoutingFilter_JoinRequest_EUIPrefixes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinEui != 0 {
		n += 9
	}
	if m.JoinEuiLength != 0 {
		n += 1 + sovRouting(uint64(m.JoinEuiLength))
	}
	if m.DevEui != 0 {
		n += 9
	}
	if m.DevEuiLength != 0 {
		n += 1 + sovRouting(uint64(m.DevEuiLength))
	}
	return n
}

func (m *RoutingFilter_MACPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirmed != nil {
		l = m.Confirmed.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	if len(m.DevAddrPrefixes) > 0 {
		for _, e := range m.DevAddrPrefixes {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	if m.FOpts != nil {
		l = m.FOpts.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	if len(m.FPortRanges) > 0 {
		for _, e := range m.FPortRanges {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func (m *RoutingFilter_MACPayload_DevAddrPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovRouting(uint64(m.Value))
	}
	if m.Length != 0 {
		n += 1 + sovRouting(uint64(m.Length))
	}
	return n
}

func (m *RoutingFilter_MACPayload_FPortRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Low != 0 {
		n += 1 + sovRouting(uint64(m.Low))
	}
	if m.High != 0 {
		n += 1 + sovRouting(uint64(m.High))
	}
	return n
}

func (m *RouteHop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReceivedAt != nil {
		l = m.ReceivedAt.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.SenderName)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.ReceiverName)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	l = len(m.ReceiverAgent)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	return n
}

func (m *RoutedUplinkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.ForwarderNetId != 0 {
		n += 1 + sovRouting(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovRouting(uint64(m.HomeNetworkNetId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	if len(m.Hops) > 0 {
		for _, e := range m.Hops {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func (m *RoutedDownlinkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.HomeNetworkNetId != 0 {
		n += 1 + sovRouting(uint64(m.HomeNetworkNetId))
	}
	if m.ForwarderNetId != 0 {
		n += 1 + sovRouting(uint64(m.ForwarderNetId))
	}
	l = len(m.ForwarderId)
	if l > 0 {
		n += 1 + l + sovRouting(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRouting(uint64(l))
	}
	if len(m.Hops) > 0 {
		for _, e := range m.Hops {
			l = e.Size()
			n += 1 + l + sovRouting(uint64(l))
		}
	}
	return n
}

func sovRouting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRouting(x uint64) (n int) {
	return sovRouting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoutingPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &RoutingPolicy_Uplink{}
			}
			if err := m.Uplink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &RoutingPolicy_Downlink{}
			}
			if err := m.Downlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingPolicy_Uplink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uplink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uplink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JoinRequest = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MacData = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApplicationData = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalQuality", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignalQuality = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Localization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Localization = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowDownlink", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowDownlink = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingPolicy_Downlink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Downlink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Downlink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAccept", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JoinAccept = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MacData = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ApplicationData = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutingFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutingFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forwarders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Forwarders = append(m.Forwarders, &RoutingFilter_Forwarder{})
			if err := m.Forwarders[len(m.Forwarders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RoutingFilter_JoinRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &RoutingFilter_JoinRequest_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RoutingFilter_MACPayload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &RoutingFilter_Mac{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayMetadata == nil {
				m.GatewayMetadata = &types.BoolValue{}
			}
			if err := m.GatewayMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingFilter_Forwarder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forwarder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forwarder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetId", wireType)
			}
			m.NetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderIds = append(m.ForwarderIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingFilter_JoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EuiPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EuiPrefixes = append(m.EuiPrefixes, &RoutingFilter_JoinRequest_EUIPrefixes{})
			if err := m.EuiPrefixes[len(m.EuiPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingFilter_JoinRequest_EUIPrefixes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EUIPrefixes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EUIPrefixes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEui", wireType)
			}
			m.JoinEui = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinEui = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEuiLength", wireType)
			}
			m.JoinEuiLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinEuiLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEui", wireType)
			}
			m.DevEui = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEui = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEuiLength", wireType)
			}
			m.DevEuiLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DevEuiLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingFilter_MACPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirmed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirmed == nil {
				m.Confirmed = &types.BoolValue{}
			}
			if err := m.Confirmed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddrPrefixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddrPrefixes = append(m.DevAddrPrefixes, &RoutingFilter_MACPayload_DevAddrPrefix{})
			if err := m.DevAddrPrefixes[len(m.DevAddrPrefixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FOpts == nil {
				m.FOpts = &types.BoolValue{}
			}
			if err := m.FOpts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPortRanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FPortRanges = append(m.FPortRanges, &RoutingFilter_MACPayload_FPortRange{})
			if err := m.FPortRanges[len(m.FPortRanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingFilter_MACPayload_DevAddrPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevAddrPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevAddrPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutingFilter_MACPayload_FPortRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FPortRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FPortRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteHop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteHop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteHop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceivedAt == nil {
				m.ReceivedAt = &types.Timestamp{}
			}
			if err := m.ReceivedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutedUplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedUplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedUplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &UplinkMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hops = append(m.Hops, &RouteHop{})
			if err := m.Hops[len(m.Hops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoutedDownlinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoutedDownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoutedDownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeNetworkNetId", wireType)
			}
			m.HomeNetworkNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeNetworkNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderNetId", wireType)
			}
			m.ForwarderNetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwarderNetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwarderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwarderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &DownlinkMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRouting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hops = append(m.Hops, &RouteHop{})
			if err := m.Hops[len(m.Hops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRouting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRouting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRouting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRouting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRouting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRouting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRouting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRouting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRouting = fmt.Errorf("proto: unexpected end of group")
)
