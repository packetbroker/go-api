// Copyright Â© 2021 The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: packetbroker/api/v3/gateway.proto

package packetbroker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GatewayVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	ForwarderNetId uint32 `protobuf:"varint,10,opt,name=forwarder_net_id,json=forwarderNetId,proto3" json:"forwarder_net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	ForwarderTenantId string `protobuf:"bytes,11,opt,name=forwarder_tenant_id,json=forwarderTenantId,proto3" json:"forwarder_tenant_id,omitempty"`
	// LoRa Alliance NetID of the Home Network Member.
	HomeNetworkNetId uint32 `protobuf:"varint,12,opt,name=home_network_net_id,json=homeNetworkNetId,proto3" json:"home_network_net_id,omitempty"`
	// Tenant ID managed by the Home Network Member.
	HomeNetworkTenantId string `protobuf:"bytes,13,opt,name=home_network_tenant_id,json=homeNetworkTenantId,proto3" json:"home_network_tenant_id,omitempty"`
	// Timestamp when the policy got last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Show location.
	Location bool `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
	// Show antenna placement (indoor/outdoor).
	AntennaPlacement bool `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3" json:"antenna_placement,omitempty"`
	// Show antenna count.
	AntennaCount bool `protobuf:"varint,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Show whether the gateway produces fine timestamps.
	FineTimestamps bool `protobuf:"varint,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
	// Show contact information.
	ContactInfo bool `protobuf:"varint,5,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	// Show status (online/offline).
	Status bool `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// Show frequency plan.
	FrequencyPlan bool `protobuf:"varint,8,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// Show receive and transmission packet rates.
	PacketRates bool `protobuf:"varint,9,opt,name=packet_rates,json=packetRates,proto3" json:"packet_rates,omitempty"`
}

func (x *GatewayVisibility) Reset() {
	*x = GatewayVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayVisibility) ProtoMessage() {}

func (x *GatewayVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayVisibility.ProtoReflect.Descriptor instead.
func (*GatewayVisibility) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *GatewayVisibility) GetForwarderNetId() uint32 {
	if x != nil {
		return x.ForwarderNetId
	}
	return 0
}

func (x *GatewayVisibility) GetForwarderTenantId() string {
	if x != nil {
		return x.ForwarderTenantId
	}
	return ""
}

func (x *GatewayVisibility) GetHomeNetworkNetId() uint32 {
	if x != nil {
		return x.HomeNetworkNetId
	}
	return 0
}

func (x *GatewayVisibility) GetHomeNetworkTenantId() string {
	if x != nil {
		return x.HomeNetworkTenantId
	}
	return ""
}

func (x *GatewayVisibility) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GatewayVisibility) GetLocation() bool {
	if x != nil {
		return x.Location
	}
	return false
}

func (x *GatewayVisibility) GetAntennaPlacement() bool {
	if x != nil {
		return x.AntennaPlacement
	}
	return false
}

func (x *GatewayVisibility) GetAntennaCount() bool {
	if x != nil {
		return x.AntennaCount
	}
	return false
}

func (x *GatewayVisibility) GetFineTimestamps() bool {
	if x != nil {
		return x.FineTimestamps
	}
	return false
}

func (x *GatewayVisibility) GetContactInfo() bool {
	if x != nil {
		return x.ContactInfo
	}
	return false
}

func (x *GatewayVisibility) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *GatewayVisibility) GetFrequencyPlan() bool {
	if x != nil {
		return x.FrequencyPlan
	}
	return false
}

func (x *GatewayVisibility) GetPacketRates() bool {
	if x != nil {
		return x.PacketRates
	}
	return false
}

type GatewayFrequencyPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region of the frequency plan.
	Region Region `protobuf:"varint,1,opt,name=region,proto3,enum=org.packetbroker.v3.Region" json:"region,omitempty"`
	// LoRa channels demodulating multiple spreading factors per channel.
	LoraMultiSfChannels []*GatewayFrequencyPlan_LoRaMultiSFChannel `protobuf:"bytes,3,rep,name=lora_multi_sf_channels,json=loraMultiSfChannels,proto3" json:"lora_multi_sf_channels,omitempty"`
	// LoRa channels for a single spreading factor and bandwidth.
	// This is typically used for LoRa 2.4 GHz gateways.
	LoraSingleSfChannels []*GatewayFrequencyPlan_LoRaSingleSFChannel `protobuf:"bytes,4,rep,name=lora_single_sf_channels,json=loraSingleSfChannels,proto3" json:"lora_single_sf_channels,omitempty"`
	// FSK channel.
	FskChannel *GatewayFrequencyPlan_FSKChannel `protobuf:"bytes,5,opt,name=fsk_channel,json=fskChannel,proto3" json:"fsk_channel,omitempty"`
}

func (x *GatewayFrequencyPlan) Reset() {
	*x = GatewayFrequencyPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayFrequencyPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayFrequencyPlan) ProtoMessage() {}

func (x *GatewayFrequencyPlan) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayFrequencyPlan.ProtoReflect.Descriptor instead.
func (*GatewayFrequencyPlan) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayFrequencyPlan) GetRegion() Region {
	if x != nil {
		return x.Region
	}
	return Region_UNKNOWN_REGION
}

func (x *GatewayFrequencyPlan) GetLoraMultiSfChannels() []*GatewayFrequencyPlan_LoRaMultiSFChannel {
	if x != nil {
		return x.LoraMultiSfChannels
	}
	return nil
}

func (x *GatewayFrequencyPlan) GetLoraSingleSfChannels() []*GatewayFrequencyPlan_LoRaSingleSFChannel {
	if x != nil {
		return x.LoraSingleSfChannels
	}
	return nil
}

func (x *GatewayFrequencyPlan) GetFskChannel() *GatewayFrequencyPlan_FSKChannel {
	if x != nil {
		return x.FskChannel
	}
	return nil
}

type GatewayIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extended unique identifier of the gateway.
	Eui *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=eui,proto3" json:"eui,omitempty"`
	// Types that are assignable to Id:
	//	*GatewayIdentifier_Plain
	//	*GatewayIdentifier_Hash
	Id isGatewayIdentifier_Id `protobuf_oneof:"id"`
}

func (x *GatewayIdentifier) Reset() {
	*x = GatewayIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayIdentifier) ProtoMessage() {}

func (x *GatewayIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayIdentifier.ProtoReflect.Descriptor instead.
func (*GatewayIdentifier) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *GatewayIdentifier) GetEui() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Eui
	}
	return nil
}

func (m *GatewayIdentifier) GetId() isGatewayIdentifier_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *GatewayIdentifier) GetPlain() string {
	if x, ok := x.GetId().(*GatewayIdentifier_Plain); ok {
		return x.Plain
	}
	return ""
}

func (x *GatewayIdentifier) GetHash() []byte {
	if x, ok := x.GetId().(*GatewayIdentifier_Hash); ok {
		return x.Hash
	}
	return nil
}

type isGatewayIdentifier_Id interface {
	isGatewayIdentifier_Id()
}

type GatewayIdentifier_Plain struct {
	// Unique identifier of the gateway within the namespace of the Forwarder.
	Plain string `protobuf:"bytes,2,opt,name=plain,proto3,oneof"`
}

type GatewayIdentifier_Hash struct {
	// SHA-256 hash of plain.
	Hash []byte `protobuf:"bytes,3,opt,name=hash,proto3,oneof"`
}

func (*GatewayIdentifier_Plain) isGatewayIdentifier_Id() {}

func (*GatewayIdentifier_Hash) isGatewayIdentifier_Id() {}

type GatewayLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*GatewayLocation_Terrestrial_
	//	*GatewayLocation_Satellite_
	Value isGatewayLocation_Value `protobuf_oneof:"value"`
}

func (x *GatewayLocation) Reset() {
	*x = GatewayLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayLocation) ProtoMessage() {}

func (x *GatewayLocation) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayLocation.ProtoReflect.Descriptor instead.
func (*GatewayLocation) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{3}
}

func (m *GatewayLocation) GetValue() isGatewayLocation_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GatewayLocation) GetTerrestrial() *GatewayLocation_Terrestrial {
	if x, ok := x.GetValue().(*GatewayLocation_Terrestrial_); ok {
		return x.Terrestrial
	}
	return nil
}

func (x *GatewayLocation) GetSatellite() *GatewayLocation_Satellite {
	if x, ok := x.GetValue().(*GatewayLocation_Satellite_); ok {
		return x.Satellite
	}
	return nil
}

type isGatewayLocation_Value interface {
	isGatewayLocation_Value()
}

type GatewayLocation_Terrestrial_ struct {
	Terrestrial *GatewayLocation_Terrestrial `protobuf:"bytes,1,opt,name=terrestrial,proto3,oneof"`
}

type GatewayLocation_Satellite_ struct {
	Satellite *GatewayLocation_Satellite `protobuf:"bytes,2,opt,name=satellite,proto3,oneof"`
}

func (*GatewayLocation_Terrestrial_) isGatewayLocation_Value() {}

func (*GatewayLocation_Satellite_) isGatewayLocation_Value() {}

type GatewayLocationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *GatewayLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *GatewayLocationValue) Reset() {
	*x = GatewayLocationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayLocationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayLocationValue) ProtoMessage() {}

func (x *GatewayLocationValue) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayLocationValue.ProtoReflect.Descriptor instead.
func (*GatewayLocationValue) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *GatewayLocationValue) GetLocation() *GatewayLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoRa Alliance NetID of the Forwarder Member.
	NetId uint32 `protobuf:"varint,1,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// Tenant ID managed by the Forwarder Member.
	TenantId string `protobuf:"bytes,14,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Forwarder cluster of the Forwarder Member (optional).
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Identifier of the gateway.
	GatewayId *GatewayIdentifier `protobuf:"bytes,15,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Timestamp when the gateway was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Gateway location.
	Location *GatewayLocation `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	// Administrative contact.
	// Home Networks receive this value if the Gateway Visibility has contact_info set.
	AdministrativeContact *ContactInfo `protobuf:"bytes,16,opt,name=administrative_contact,json=administrativeContact,proto3" json:"administrative_contact,omitempty"`
	// Technical contact.
	// Home Networks receive this value if the Gateway Visibility has contact_info set.
	TechnicalContact *ContactInfo `protobuf:"bytes,17,opt,name=technical_contact,json=technicalContact,proto3" json:"technical_contact,omitempty"`
	// Indicates whether the gateway is online.
	// Home Networks receive this value if the Gateway Visibility has status set.
	Online *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=online,proto3" json:"online,omitempty"`
	// Frequency plan of the gateway.
	// Home Networks receive this value if the Gateway Visibility has frequency_plan set.
	FrequencyPlan *GatewayFrequencyPlan `protobuf:"bytes,13,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// Received packets rate (number of packets per hour).
	// Home Networks receive this value if the Gateway Visibility has packet_rates set.
	RxRate *wrapperspb.FloatValue `protobuf:"bytes,18,opt,name=rx_rate,json=rxRate,proto3" json:"rx_rate,omitempty"`
	// Transmitted packets rate (number of packets per hour).
	// Home Networks receive this value if the Gateway Visibility has packet_rates set.
	TxRate *wrapperspb.FloatValue `protobuf:"bytes,19,opt,name=tx_rate,json=txRate,proto3" json:"tx_rate,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *Gateway) GetNetId() uint32 {
	if x != nil {
		return x.NetId
	}
	return 0
}

func (x *Gateway) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Gateway) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Gateway) GetGatewayId() *GatewayIdentifier {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *Gateway) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Gateway) GetLocation() *GatewayLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Gateway) GetAdministrativeContact() *ContactInfo {
	if x != nil {
		return x.AdministrativeContact
	}
	return nil
}

func (x *Gateway) GetTechnicalContact() *ContactInfo {
	if x != nil {
		return x.TechnicalContact
	}
	return nil
}

func (x *Gateway) GetOnline() *wrapperspb.BoolValue {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *Gateway) GetFrequencyPlan() *GatewayFrequencyPlan {
	if x != nil {
		return x.FrequencyPlan
	}
	return nil
}

func (x *Gateway) GetRxRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.RxRate
	}
	return nil
}

func (x *Gateway) GetTxRate() *wrapperspb.FloatValue {
	if x != nil {
		return x.TxRate
	}
	return nil
}

type GatewayFrequencyPlan_LoRaMultiSFChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *GatewayFrequencyPlan_LoRaMultiSFChannel) Reset() {
	*x = GatewayFrequencyPlan_LoRaMultiSFChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayFrequencyPlan_LoRaMultiSFChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayFrequencyPlan_LoRaMultiSFChannel) ProtoMessage() {}

func (x *GatewayFrequencyPlan_LoRaMultiSFChannel) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayFrequencyPlan_LoRaMultiSFChannel.ProtoReflect.Descriptor instead.
func (*GatewayFrequencyPlan_LoRaMultiSFChannel) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GatewayFrequencyPlan_LoRaMultiSFChannel) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type GatewayFrequencyPlan_LoRaSingleSFChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// LoRa spreading factor.
	SpreadingFactor uint32 `protobuf:"varint,2,opt,name=spreading_factor,json=spreadingFactor,proto3" json:"spreading_factor,omitempty"`
	// LoRa bandwidth (Hz).
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *GatewayFrequencyPlan_LoRaSingleSFChannel) Reset() {
	*x = GatewayFrequencyPlan_LoRaSingleSFChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayFrequencyPlan_LoRaSingleSFChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayFrequencyPlan_LoRaSingleSFChannel) ProtoMessage() {}

func (x *GatewayFrequencyPlan_LoRaSingleSFChannel) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayFrequencyPlan_LoRaSingleSFChannel.ProtoReflect.Descriptor instead.
func (*GatewayFrequencyPlan_LoRaSingleSFChannel) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{1, 1}
}

func (x *GatewayFrequencyPlan_LoRaSingleSFChannel) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GatewayFrequencyPlan_LoRaSingleSFChannel) GetSpreadingFactor() uint32 {
	if x != nil {
		return x.SpreadingFactor
	}
	return 0
}

func (x *GatewayFrequencyPlan_LoRaSingleSFChannel) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type GatewayFrequencyPlan_FSKChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency (Hz).
	Frequency uint64 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
}

func (x *GatewayFrequencyPlan_FSKChannel) Reset() {
	*x = GatewayFrequencyPlan_FSKChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayFrequencyPlan_FSKChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayFrequencyPlan_FSKChannel) ProtoMessage() {}

func (x *GatewayFrequencyPlan_FSKChannel) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayFrequencyPlan_FSKChannel.ProtoReflect.Descriptor instead.
func (*GatewayFrequencyPlan_FSKChannel) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{1, 2}
}

func (x *GatewayFrequencyPlan_FSKChannel) GetFrequency() uint64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

type GatewayLocation_Terrestrial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location of the (first) antenna.
	// Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Antenna placement (indoor/outdoor).
	// Home Networks receive this value if the Gateway Visibility has antenna_placement set.
	AntennaPlacement TerrestrialAntennaPlacement `protobuf:"varint,2,opt,name=antenna_placement,json=antennaPlacement,proto3,enum=org.packetbroker.v3.TerrestrialAntennaPlacement" json:"antenna_placement,omitempty"`
	// Number of antennas.
	// Home Networks receive this value if the Gateway Visibility has antenna_count set.
	AntennaCount *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=antenna_count,json=antennaCount,proto3" json:"antenna_count,omitempty"`
	// Indicates whether the gateway produces fine timestamps.
	// Home Networks receive this value if the Gateway Visibility has fine_timestamps set.
	FineTimestamps *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=fine_timestamps,json=fineTimestamps,proto3" json:"fine_timestamps,omitempty"`
}

func (x *GatewayLocation_Terrestrial) Reset() {
	*x = GatewayLocation_Terrestrial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayLocation_Terrestrial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayLocation_Terrestrial) ProtoMessage() {}

func (x *GatewayLocation_Terrestrial) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayLocation_Terrestrial.ProtoReflect.Descriptor instead.
func (*GatewayLocation_Terrestrial) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GatewayLocation_Terrestrial) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GatewayLocation_Terrestrial) GetAntennaPlacement() TerrestrialAntennaPlacement {
	if x != nil {
		return x.AntennaPlacement
	}
	return TerrestrialAntennaPlacement_UNKNOWN_PLACEMENT
}

func (x *GatewayLocation_Terrestrial) GetAntennaCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.AntennaCount
	}
	return nil
}

func (x *GatewayLocation_Terrestrial) GetFineTimestamps() *wrapperspb.BoolValue {
	if x != nil {
		return x.FineTimestamps
	}
	return nil
}

type GatewayLocation_Satellite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Satellite location.
	// Home Networks receive this value if the Gateway Visibility has location set.
	Location *Location `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Field of view (meters).
	// Home Networks receive this value if the Gateway Visibility has location set.
	FieldOfView float64 `protobuf:"fixed64,2,opt,name=field_of_view,json=fieldOfView,proto3" json:"field_of_view,omitempty"`
	// Trajectory, typically containing the recent past and projected path.
	// Home Networks receive this value if the Gateway Visibility has location set.
	Trajectory []*TimedLocation `protobuf:"bytes,3,rep,name=trajectory,proto3" json:"trajectory,omitempty"`
}

func (x *GatewayLocation_Satellite) Reset() {
	*x = GatewayLocation_Satellite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayLocation_Satellite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayLocation_Satellite) ProtoMessage() {}

func (x *GatewayLocation_Satellite) ProtoReflect() protoreflect.Message {
	mi := &file_packetbroker_api_v3_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayLocation_Satellite.ProtoReflect.Descriptor instead.
func (*GatewayLocation_Satellite) Descriptor() ([]byte, []int) {
	return file_packetbroker_api_v3_gateway_proto_rawDescGZIP(), []int{3, 1}
}

func (x *GatewayLocation_Satellite) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GatewayLocation_Satellite) GetFieldOfView() float64 {
	if x != nil {
		return x.FieldOfView
	}
	return 0
}

func (x *GatewayLocation_Satellite) GetTrajectory() []*TimedLocation {
	if x != nil {
		return x.Trajectory
	}
	return nil
}

var File_packetbroker_api_v3_gateway_proto protoreflect.FileDescriptor

var file_packetbroker_api_v3_gateway_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x33, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xae, 0x04, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x68, 0x6f, 0x6d, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x74,
	0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0xef, 0x04, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x71, 0x0a, 0x16, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73,
	0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x6f, 0x52, 0x61,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x46, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x13,
	0x6c, 0x6f, 0x72, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x74, 0x0a, 0x17, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x73, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x2e,
	0x4c, 0x6f, 0x52, 0x61, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x46, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x14, 0x6c, 0x6f, 0x72, 0x61, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x73, 0x6b,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x46, 0x53, 0x4b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x66, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x1a, 0x32, 0x0a, 0x12, 0x4c, 0x6f, 0x52, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x46, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x1a, 0x7c, 0x0a, 0x13, 0x4c, 0x6f, 0x52, 0x61, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x46, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x1a, 0x2a, 0x0a, 0x0a, 0x46, 0x53, 0x4b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0x77, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x75, 0x69, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x05,
	0x0a, 0x0f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x72,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x09, 0x73, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x1a, 0xaf, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x11, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x41,
	0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x10, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x09, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x05,
	0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0a,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x0e,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x74, 0x78, 0x52, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04,
	0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x6f,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x3b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_packetbroker_api_v3_gateway_proto_rawDescOnce sync.Once
	file_packetbroker_api_v3_gateway_proto_rawDescData = file_packetbroker_api_v3_gateway_proto_rawDesc
)

func file_packetbroker_api_v3_gateway_proto_rawDescGZIP() []byte {
	file_packetbroker_api_v3_gateway_proto_rawDescOnce.Do(func() {
		file_packetbroker_api_v3_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_packetbroker_api_v3_gateway_proto_rawDescData)
	})
	return file_packetbroker_api_v3_gateway_proto_rawDescData
}

var file_packetbroker_api_v3_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_packetbroker_api_v3_gateway_proto_goTypes = []interface{}{
	(*GatewayVisibility)(nil),                        // 0: org.packetbroker.v3.GatewayVisibility
	(*GatewayFrequencyPlan)(nil),                     // 1: org.packetbroker.v3.GatewayFrequencyPlan
	(*GatewayIdentifier)(nil),                        // 2: org.packetbroker.v3.GatewayIdentifier
	(*GatewayLocation)(nil),                          // 3: org.packetbroker.v3.GatewayLocation
	(*GatewayLocationValue)(nil),                     // 4: org.packetbroker.v3.GatewayLocationValue
	(*Gateway)(nil),                                  // 5: org.packetbroker.v3.Gateway
	(*GatewayFrequencyPlan_LoRaMultiSFChannel)(nil),  // 6: org.packetbroker.v3.GatewayFrequencyPlan.LoRaMultiSFChannel
	(*GatewayFrequencyPlan_LoRaSingleSFChannel)(nil), // 7: org.packetbroker.v3.GatewayFrequencyPlan.LoRaSingleSFChannel
	(*GatewayFrequencyPlan_FSKChannel)(nil),          // 8: org.packetbroker.v3.GatewayFrequencyPlan.FSKChannel
	(*GatewayLocation_Terrestrial)(nil),              // 9: org.packetbroker.v3.GatewayLocation.Terrestrial
	(*GatewayLocation_Satellite)(nil),                // 10: org.packetbroker.v3.GatewayLocation.Satellite
	(*timestamppb.Timestamp)(nil),                    // 11: google.protobuf.Timestamp
	(Region)(0),                                      // 12: org.packetbroker.v3.Region
	(*wrapperspb.UInt64Value)(nil),                   // 13: google.protobuf.UInt64Value
	(*ContactInfo)(nil),                              // 14: org.packetbroker.v3.ContactInfo
	(*wrapperspb.BoolValue)(nil),                     // 15: google.protobuf.BoolValue
	(*wrapperspb.FloatValue)(nil),                    // 16: google.protobuf.FloatValue
	(*Location)(nil),                                 // 17: org.packetbroker.v3.Location
	(TerrestrialAntennaPlacement)(0),                 // 18: org.packetbroker.v3.TerrestrialAntennaPlacement
	(*wrapperspb.UInt32Value)(nil),                   // 19: google.protobuf.UInt32Value
	(*TimedLocation)(nil),                            // 20: org.packetbroker.v3.TimedLocation
}
var file_packetbroker_api_v3_gateway_proto_depIdxs = []int32{
	11, // 0: org.packetbroker.v3.GatewayVisibility.updated_at:type_name -> google.protobuf.Timestamp
	12, // 1: org.packetbroker.v3.GatewayFrequencyPlan.region:type_name -> org.packetbroker.v3.Region
	6,  // 2: org.packetbroker.v3.GatewayFrequencyPlan.lora_multi_sf_channels:type_name -> org.packetbroker.v3.GatewayFrequencyPlan.LoRaMultiSFChannel
	7,  // 3: org.packetbroker.v3.GatewayFrequencyPlan.lora_single_sf_channels:type_name -> org.packetbroker.v3.GatewayFrequencyPlan.LoRaSingleSFChannel
	8,  // 4: org.packetbroker.v3.GatewayFrequencyPlan.fsk_channel:type_name -> org.packetbroker.v3.GatewayFrequencyPlan.FSKChannel
	13, // 5: org.packetbroker.v3.GatewayIdentifier.eui:type_name -> google.protobuf.UInt64Value
	9,  // 6: org.packetbroker.v3.GatewayLocation.terrestrial:type_name -> org.packetbroker.v3.GatewayLocation.Terrestrial
	10, // 7: org.packetbroker.v3.GatewayLocation.satellite:type_name -> org.packetbroker.v3.GatewayLocation.Satellite
	3,  // 8: org.packetbroker.v3.GatewayLocationValue.location:type_name -> org.packetbroker.v3.GatewayLocation
	2,  // 9: org.packetbroker.v3.Gateway.gateway_id:type_name -> org.packetbroker.v3.GatewayIdentifier
	11, // 10: org.packetbroker.v3.Gateway.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 11: org.packetbroker.v3.Gateway.location:type_name -> org.packetbroker.v3.GatewayLocation
	14, // 12: org.packetbroker.v3.Gateway.administrative_contact:type_name -> org.packetbroker.v3.ContactInfo
	14, // 13: org.packetbroker.v3.Gateway.technical_contact:type_name -> org.packetbroker.v3.ContactInfo
	15, // 14: org.packetbroker.v3.Gateway.online:type_name -> google.protobuf.BoolValue
	1,  // 15: org.packetbroker.v3.Gateway.frequency_plan:type_name -> org.packetbroker.v3.GatewayFrequencyPlan
	16, // 16: org.packetbroker.v3.Gateway.rx_rate:type_name -> google.protobuf.FloatValue
	16, // 17: org.packetbroker.v3.Gateway.tx_rate:type_name -> google.protobuf.FloatValue
	17, // 18: org.packetbroker.v3.GatewayLocation.Terrestrial.location:type_name -> org.packetbroker.v3.Location
	18, // 19: org.packetbroker.v3.GatewayLocation.Terrestrial.antenna_placement:type_name -> org.packetbroker.v3.TerrestrialAntennaPlacement
	19, // 20: org.packetbroker.v3.GatewayLocation.Terrestrial.antenna_count:type_name -> google.protobuf.UInt32Value
	15, // 21: org.packetbroker.v3.GatewayLocation.Terrestrial.fine_timestamps:type_name -> google.protobuf.BoolValue
	17, // 22: org.packetbroker.v3.GatewayLocation.Satellite.location:type_name -> org.packetbroker.v3.Location
	20, // 23: org.packetbroker.v3.GatewayLocation.Satellite.trajectory:type_name -> org.packetbroker.v3.TimedLocation
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_packetbroker_api_v3_gateway_proto_init() }
func file_packetbroker_api_v3_gateway_proto_init() {
	if File_packetbroker_api_v3_gateway_proto != nil {
		return
	}
	file_packetbroker_api_v3_enums_proto_init()
	file_packetbroker_api_v3_contact_proto_init()
	file_packetbroker_api_v3_location_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_packetbroker_api_v3_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayFrequencyPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayLocationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayFrequencyPlan_LoRaMultiSFChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayFrequencyPlan_LoRaSingleSFChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayFrequencyPlan_FSKChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayLocation_Terrestrial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_packetbroker_api_v3_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayLocation_Satellite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_packetbroker_api_v3_gateway_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GatewayIdentifier_Plain)(nil),
		(*GatewayIdentifier_Hash)(nil),
	}
	file_packetbroker_api_v3_gateway_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GatewayLocation_Terrestrial_)(nil),
		(*GatewayLocation_Satellite_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_packetbroker_api_v3_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packetbroker_api_v3_gateway_proto_goTypes,
		DependencyIndexes: file_packetbroker_api_v3_gateway_proto_depIdxs,
		MessageInfos:      file_packetbroker_api_v3_gateway_proto_msgTypes,
	}.Build()
	File_packetbroker_api_v3_gateway_proto = out.File
	file_packetbroker_api_v3_gateway_proto_rawDesc = nil
	file_packetbroker_api_v3_gateway_proto_goTypes = nil
	file_packetbroker_api_v3_gateway_proto_depIdxs = nil
}
